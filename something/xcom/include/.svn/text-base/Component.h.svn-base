/**
 * @file component.h
 * @comments
 * component.h defines the class template Component, which is the container of
 * all policies and interfaces. The structure of the component is as follows:
 *
 * 		o	o	o ISomething
 * 		|	|	|
 * 		|	|	|   +----------+
 * 	+---------------| Policies |
 * 	|               +----------+
 *  |   Component    |
 *  |				 |
 * 	+----------------+
 *
 * @author niexw
 */

//
// @TODO:
// 1. diamond inherit
// 2. aggretable interface
//

#ifndef BOOST_PP_IS_ITERATING

#ifndef _XCOM_COMPONENT_H_
#define _XCOM_COMPONENT_H_

#include "Defines.h"
#include <boost/preprocessor/repetition.hpp>
#include <boost/preprocessor/iteration.hpp>
#include <boost/static_assert.hpp>

#include "Interfaces.h"
#include "MetaFunctions.h"

#define XCOM_COMPONENT_PRIMARY_PARAMS									\
	BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT(XCOM_MAX_INTERFACES_NUM,		\
			typename T, boost::mpl::na)

#define XCOM_PARTIALIZED_PARAMS(n)										\
	BOOST_PP_COMMA_IF(n) BOOST_PP_ENUM_PARAMS(n, typename T)

#define XCOM_PARTIALIZED_ARGUMENTS(n)									\
	BOOST_PP_ENUM_PARAMS(n, T)											\
	BOOST_PP_COMMA_IF(BOOST_PP_AND(										\
						  BOOST_PP_SUB(XCOM_MAX_INTERFACES_NUM, n), n))	\
	BOOST_PP_ENUM(BOOST_PP_SUB(XCOM_MAX_INTERFACES_NUM, n),				\
				  NA_print, boost::mpl::na)

#define XCOM_ARGUMENTS_SEQ(n)											\
	boost::mpl::vector<BOOST_PP_ENUM_PARAMS(n, T)>

#define XCOM_PARTIALIZED_PC_ARGUMENTS(n)								\
	BOOST_PP_ENUM_PARAMS(n, T)											\
	BOOST_PP_COMMA_IF(BOOST_PP_AND(										\
						  BOOST_PP_SUB(XCOM_MAX_INTERFACES_NUM, n), n))	\
	BOOST_PP_ENUM(BOOST_PP_SUB(XCOM_MAX_INTERFACES_NUM, n),	NA_print,	\
				  EmptyPolicy)

namespace xcom
{

using meta::applyPolicy;
using meta::EmptyPolicy;

#define NA_print1(z, n, data) template <typename, typename> class T##n = EmptyPolicy
template <typename Class, BOOST_PP_ENUM(
		XCOM_MAX_INTERFACES_NUM, NA_print1, ~)>
struct Policies
{ BOOST_STATIC_ASSERT(sizeof(Class) == 0); };
#undef NA_print1

template <XCOM_COMPONENT_PRIMARY_PARAMS>
struct Interfaces
{ BOOST_STATIC_ASSERT(sizeof(T0) == 0); };

template <typename T>
struct Component : public T::InheritBase
{
	typedef T Traits;
};

}; // namespace com

#define BOOST_PP_ITERATION_LIMITS (0, XCOM_MAX_INTERFACES_NUM-1)
#define BOOST_PP_FILENAME_1 "./Component.h" // this file
#include BOOST_PP_ITERATE()

#endif // _XCOM_COMPONENT_H_

#else // BOOST_PP_IS_ITERATING

#define n BOOST_PP_ITERATION()


namespace xcom {
#define NA_print(z, n, data) data

#define NA_print1(z, n, data) data##n<Class>
#define NA_print2(z, n, data) template <typename, typename> class T##n
#define NA_print3(z, n, data) applyPolicy<Class, T##n>
template <typename Class BOOST_PP_COMMA_IF(n) BOOST_PP_ENUM(n, NA_print2, ~)>
struct Policies<Class, XCOM_PARTIALIZED_PC_ARGUMENTS(n)>
{
	typedef boost::mpl::vector<BOOST_PP_ENUM(n, NA_print3, ~)> type;
};
#undef NA_print3
#undef NA_print2
#undef NA_print1


template <BOOST_PP_ENUM_PARAMS(n, typename T)>
struct Interfaces<XCOM_PARTIALIZED_ARGUMENTS(n)>
{
	typedef boost::mpl::vector<BOOST_PP_ENUM_PARAMS(n, T)> type;
};

#undef NA_print
}; // namespace com

#endif // BOOST_PP_IS_ITERATING
