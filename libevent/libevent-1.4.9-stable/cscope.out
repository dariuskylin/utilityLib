cscope 15 $HOME/git-repository/libevent/libevent-1.4.9-stable -q 0000005032 0000636372
	@WIN32-Code/config.h

8 
	#DNS_USE_FTIME_FOR_ID
 1

	)

35 
	#HAVE_FCNTL_H
 1

	)

68 
	#HAVE_MEMORY_H
 1

	)

95 
	#HAVE_SIGNAL
 1

	)

98 
	#HAVE_SIGNAL_H
 1

	)

101 
	#HAVE_STDARG_H
 1

	)

107 
	#HAVE_STDLIB_H
 1

	)

110 
	#HAVE_STRINGS_H
 1

	)

113 
	#HAVE_STRING_H
 1

	)

125 
	#HAVE_STRUCT_IN6_ADDR
 1

	)

167 
	#HAVE_TIMERCMP
 1

	)

170 
	#HAVE_TIMERISSET
 1

	)

182 
	#PACKAGE
 "libevít"

	)

185 
	#PACKAGE_BUGREPORT
 ""

	)

188 
	#PACKAGE_NAME
 ""

	)

191 
	#PACKAGE_STRING
 ""

	)

194 
	#PACKAGE_TARNAME
 ""

	)

197 
	#PACKAGE_VERSION
 ""

	)

200 
	#STDC_HEADERS
 1

	)

203 
	#TIME_WITH_SYS_TIME
 1

	)

206 
	#VERSION
 "1.3.99-åunk"

	)

209 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1300

210 
	#__func__
 "??"

	)

212 
	#__func__
 
__FUNCTION__


	)

220 #i‚de‡
__˝lu•lus


221 
	#ölöe
 
__ölöe


	)

231 
	#sockÀn_t
 

	)

234 
	#uöt16_t
 

	)

237 
	#uöt32_t
 

	)

240 
	#uöt64_t
 
__uöt64_t


	)

243 
	#uöt8_t
 

	)

	@WIN32-Code/tree.h

27 #i‚def 
_SYS_TREE_H_


28 
	#_SYS_TREE_H_


	)

57 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

58 
	s«me
 { \

59 
ty≥
 *
•h_roŸ
; \

60 }

	)

62 
	#SPLAY_INITIALIZER
(
roŸ
) \

63 { 
NULL
 }

	)

65 
	#SPLAY_INIT
(
roŸ
) do { \

66 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

67 } 0)

	)

69 
	#SPLAY_ENTRY
(
ty≥
) \

71 
ty≥
 *
•e_À·
; \

72 
ty≥
 *
•e_right
; \

73 }

	)

75 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

76 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

77 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

78 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

81 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

82 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

83 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

84 (
hód
)->
•h_roŸ
 = 
tmp
; \

85 } 0)

	)

87 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

88 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

89 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

90 (
hód
)->
•h_roŸ
 = 
tmp
; \

91 } 0)

	)

93 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

94 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

95 
tmp
 = (
hód
)->
•h_roŸ
; \

96 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

97 } 0)

	)

99 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

100 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

101 
tmp
 = (
hód
)->
•h_roŸ
; \

102 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

103 } 0)

	)

105 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

106 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

107 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

108 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

109 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

110 } 0)

	)

114 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

115 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

116 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

117 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

118 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

121 
__ölöe
 
ty≥
 * \

122 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

124 i‡(
	`SPLAY_EMPTY
(
hód
)) \

125 (
NULL
); \

126 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

127 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

128  (
hód
->
•h_roŸ
); \

129  (
NULL
); \

132 
__ölöe
 
ty≥
 * \

133 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

135 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

136 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

137 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

138 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

139 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

142 
ñm
 = 
NULL
; \

143  (
ñm
); \

146 
__ölöe
 
ty≥
 * \

147 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

149 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

150  (
	`SPLAY_ROOT
(
hód
)); \

151 }

	)

156 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

157 
ty≥
 * \

158 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

160 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

161 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

163 
__comp
; \

164 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

165 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

166 if(
__comp
 < 0) { \

167 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

168 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

169 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

170 } i‡(
__comp
 > 0) { \

171 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

172 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

173 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

175  ((
hód
)->
•h_roŸ
); \

177 (
hód
)->
•h_roŸ
 = (
ñm
); \

178  (
NULL
); \

181 
ty≥
 * \

182 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

184 
ty≥
 *
__tmp
; \

185 i‡(
	`SPLAY_EMPTY
(
hód
)) \

186  (
NULL
); \

187 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

188 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

189 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

190 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

192 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

193 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

194 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

195 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

197  (
ñm
); \

199  (
NULL
); \

203 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

205 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

206 
__comp
; \

208 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

209 
__À·
 = 
__right
 = &
__node
; \

211 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

212 i‡(
__comp
 < 0) { \

213 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

214 i‡(
__tmp
 =
NULL
) \

216 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

217 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

218 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

221 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

222 } i‡(
__comp
 > 0) { \

223 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

224 i‡(
__tmp
 =
NULL
) \

226 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

227 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

228 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

231 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

234 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

240 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

242 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

244 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

245 
__À·
 = 
__right
 = &
__node
; \

248 i‡(
__comp
 < 0) { \

249 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

250 i‡(
__tmp
 =
NULL
) \

252 i‡(
__comp
 < 0){ \

253 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

254 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

257 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

258 } i‡(
__comp
 > 0) { \

259 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

260 i‡(
__tmp
 =
NULL
) \

262 i‡(
__comp
 > 0) { \

263 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

264 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

267 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

270 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

271 }

	)

273 
	#SPLAY_NEGINF
 -1

	)

274 
	#SPLAY_INF
 1

	)

276 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

277 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

278 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

279 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

280 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

281 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

282 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

283 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

285 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

286 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

287 (
x
Ë!
NULL
; \

288 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

291 
	#RB_HEAD
(
«me
, 
ty≥
) \

292 
	s«me
 { \

293 
ty≥
 *
rbh_roŸ
; \

294 }

	)

296 
	#RB_INITIALIZER
(
roŸ
) \

297 { 
NULL
 }

	)

299 
	#RB_INIT
(
roŸ
) do { \

300 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

301 } 0)

	)

303 
	#RB_BLACK
 0

	)

304 
	#RB_RED
 1

	)

305 
	#RB_ENTRY
(
ty≥
) \

307 
ty≥
 *
rbe_À·
; \

308 
ty≥
 *
rbe_right
; \

309 
ty≥
 *
rbe_∑ª¡
; \

310 
rbe_cﬁ‹
; \

311 }

	)

313 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

314 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

315 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

316 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

317 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

318 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

320 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

321 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

322 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

323 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

324 } 0)

	)

326 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

327 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

328 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

329 } 0)

	)

331 #i‚de‡
RB_AUGMENT


332 
	#RB_AUGMENT
(
x
)

	)

335 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

336 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

337 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

338 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

340 
	`RB_AUGMENT
(
ñm
); \

341 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

342 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

343 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

345 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

347 (
hód
)->
rbh_roŸ
 = (
tmp
); \

348 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

349 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

350 
	`RB_AUGMENT
(
tmp
); \

351 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

352 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

353 } 0)

	)

355 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

356 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

357 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

358 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

360 
	`RB_AUGMENT
(
ñm
); \

361 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

362 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

363 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

365 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

367 (
hód
)->
rbh_roŸ
 = (
tmp
); \

368 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

369 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

370 
	`RB_AUGMENT
(
tmp
); \

371 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

372 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

373 } 0)

	)

376 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

377 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

378 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

379 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

380 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

381 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

382 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

383 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

385 

	)

389 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

391 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

393 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

394 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

395 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

396 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

397 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

398 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

399 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

400 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

401 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

402 
ñm
 = 
g∑ª¡
; \

405 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

406 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

407 
tmp
 = 
∑ª¡
; \

408 
∑ª¡
 = 
ñm
; \

409 
ñm
 = 
tmp
; \

411 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

412 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

414 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

415 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

416 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

417 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

418 
ñm
 = 
g∑ª¡
; \

421 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

422 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

423 
tmp
 = 
∑ª¡
; \

424 
∑ª¡
 = 
ñm
; \

425 
ñm
 = 
tmp
; \

427 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

428 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

431 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

435 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

437 
ty≥
 *
tmp
; \

438 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

439 
ñm
 !
	`RB_ROOT
(
hód
)) { \

440 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

441 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

442 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

443 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

444 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

445 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

447 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

448 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

449 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

450 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

451 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

452 
ñm
 = 
∑ª¡
; \

453 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

455 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

456 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

457 
ty≥
 *
ﬁe·
; \

458 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

459 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

460 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

461 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

462 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

464 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

465 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

466 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

467 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

468 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

469 
ñm
 = 
	`RB_ROOT
(
hód
); \

473 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

474 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

475 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

476 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

477 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

479 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

480 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

481 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

482 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

483 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

484 
ñm
 = 
∑ª¡
; \

485 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

487 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

488 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

489 
ty≥
 *
‹ight
; \

490 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

491 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

492 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

493 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

494 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

496 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

497 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

498 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

499 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

500 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

501 
ñm
 = 
	`RB_ROOT
(
hód
); \

506 i‡(
ñm
) \

507 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

510 
ty≥
 * \

511 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

513 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

514 
cﬁ‹
; \

515 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

516 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

517 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

518 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

520 
ty≥
 *
À·
; \

521 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

522 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

523 
ñm
 = 
À·
; \

524 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

525 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

526 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

527 i‡(
chûd
) \

528 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

529 i‡(
∑ª¡
) { \

530 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

531 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

533 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

534 
	`RB_AUGMENT
(
∑ª¡
); \

536 
	`RB_ROOT
(
hód
Ë
chûd
; \

537 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

538 
∑ª¡
 = 
ñm
; \

539 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

540 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

541 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

542 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

544 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

545 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

547 
	`RB_ROOT
(
hód
Ë
ñm
; \

548 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

549 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

550 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

551 i‡(
∑ª¡
) { \

552 
À·
 = 
∑ª¡
; \

554 
	`RB_AUGMENT
(
À·
); \

555 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

557 
cﬁ‹
; \

559 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

560 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

561 i‡(
chûd
) \

562 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

563 i‡(
∑ª¡
) { \

564 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

565 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

567 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

568 
	`RB_AUGMENT
(
∑ª¡
); \

570 
	`RB_ROOT
(
hód
Ë
chûd
; \

571 
cﬁ‹
: \

572 i‡(
cﬁ‹
 =
RB_BLACK
) \

573 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

574  (
ﬁd
); \

578 
ty≥
 * \

579 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

581 
ty≥
 *
tmp
; \

582 
ty≥
 *
∑ª¡
 = 
NULL
; \

583 
comp
 = 0; \

584 
tmp
 = 
	`RB_ROOT
(
hód
); \

585 
tmp
) { \

586 
∑ª¡
 = 
tmp
; \

587 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

588 i‡(
comp
 < 0) \

589 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

590 i‡(
comp
 > 0) \

591 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

593  (
tmp
); \

595 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

596 i‡(
∑ª¡
 !
NULL
) { \

597 i‡(
comp
 < 0) \

598 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

600 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

601 
	`RB_AUGMENT
(
∑ª¡
); \

603 
	`RB_ROOT
(
hód
Ë
ñm
; \

604 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

605  (
NULL
); \

609 
ty≥
 * \

610 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

612 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

613 
comp
; \

614 
tmp
) { \

615 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

616 i‡(
comp
 < 0) \

617 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

618 i‡(
comp
 > 0) \

619 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

621  (
tmp
); \

623  (
NULL
); \

626 
ty≥
 * \

627 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

629 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

630 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

631 
	`RB_LEFT
(
ñm
, 
fõld
)) \

632 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

634 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

635 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

636 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

638 
	`RB_PARENT
(
ñm
, 
fõld
) && \

639 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

640 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

641 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

644  (
ñm
); \

647 
ty≥
 * \

648 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

650 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

651 
ty≥
 *
∑ª¡
 = 
NULL
; \

652 
tmp
) { \

653 
∑ª¡
 = 
tmp
; \

654 i‡(
vÆ
 < 0) \

655 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

657 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

659  (
∑ª¡
); \

660 }

	)

662 
	#RB_NEGINF
 -1

	)

663 
	#RB_INF
 1

	)

665 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

666 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

667 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

668 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

669 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

670 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

672 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

673 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

674 (
x
Ë!
NULL
; \

675 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

704 #i‚def 
_SYS_TREE_H_


705 
	#_SYS_TREE_H_


	)

734 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

735 
	s«me
 { \

736 
ty≥
 *
•h_roŸ
; \

737 }

	)

739 
	#SPLAY_INITIALIZER
(
roŸ
) \

740 { 
NULL
 }

	)

742 
	#SPLAY_INIT
(
roŸ
) do { \

743 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

744 } 0)

	)

746 
	#SPLAY_ENTRY
(
ty≥
) \

748 
ty≥
 *
•e_À·
; \

749 
ty≥
 *
•e_right
; \

750 }

	)

752 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

753 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

754 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

755 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

758 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

759 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

760 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

761 (
hód
)->
•h_roŸ
 = 
tmp
; \

762 } 0)

	)

764 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

765 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

766 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

767 (
hód
)->
•h_roŸ
 = 
tmp
; \

768 } 0)

	)

770 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

771 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

772 
tmp
 = (
hód
)->
•h_roŸ
; \

773 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

774 } 0)

	)

776 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

777 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

778 
tmp
 = (
hód
)->
•h_roŸ
; \

779 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

780 } 0)

	)

782 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

783 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

784 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

785 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

786 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

787 } 0)

	)

791 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

792 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

793 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

794 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

795 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

798 
__ölöe
 
ty≥
 * \

799 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

801 i‡(
	`SPLAY_EMPTY
(
hód
)) \

802 (
NULL
); \

803 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

804 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

805  (
hód
->
•h_roŸ
); \

806  (
NULL
); \

809 
__ölöe
 
ty≥
 * \

810 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

812 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

813 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

814 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

815 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

816 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

819 
ñm
 = 
NULL
; \

820  (
ñm
); \

823 
__ölöe
 
ty≥
 * \

824 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

826 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

827  (
	`SPLAY_ROOT
(
hód
)); \

828 }

	)

833 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

834 
ty≥
 * \

835 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

837 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

838 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

840 
__comp
; \

841 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

842 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

843 if(
__comp
 < 0) { \

844 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

845 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

846 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

847 } i‡(
__comp
 > 0) { \

848 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

849 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

850 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

852  ((
hód
)->
•h_roŸ
); \

854 (
hód
)->
•h_roŸ
 = (
ñm
); \

855  (
NULL
); \

858 
ty≥
 * \

859 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

861 
ty≥
 *
__tmp
; \

862 i‡(
	`SPLAY_EMPTY
(
hód
)) \

863  (
NULL
); \

864 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

865 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

866 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

867 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

869 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

870 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

871 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

872 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

874  (
ñm
); \

876  (
NULL
); \

880 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

882 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

883 
__comp
; \

885 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

886 
__À·
 = 
__right
 = &
__node
; \

888 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

889 i‡(
__comp
 < 0) { \

890 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

891 i‡(
__tmp
 =
NULL
) \

893 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

894 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

895 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

898 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

899 } i‡(
__comp
 > 0) { \

900 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

901 i‡(
__tmp
 =
NULL
) \

903 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

904 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

905 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

908 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

911 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

917 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

919 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

921 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

922 
__À·
 = 
__right
 = &
__node
; \

925 i‡(
__comp
 < 0) { \

926 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

927 i‡(
__tmp
 =
NULL
) \

929 i‡(
__comp
 < 0){ \

930 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

931 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

934 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

935 } i‡(
__comp
 > 0) { \

936 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

937 i‡(
__tmp
 =
NULL
) \

939 i‡(
__comp
 > 0) { \

940 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

941 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

944 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

947 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

948 }

	)

950 
	#SPLAY_NEGINF
 -1

	)

951 
	#SPLAY_INF
 1

	)

953 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

954 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

955 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

956 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

957 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

958 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

959 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

960 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

962 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

963 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

964 (
x
Ë!
NULL
; \

965 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

968 
	#RB_HEAD
(
«me
, 
ty≥
) \

969 
	s«me
 { \

970 
ty≥
 *
rbh_roŸ
; \

971 }

	)

973 
	#RB_INITIALIZER
(
roŸ
) \

974 { 
NULL
 }

	)

976 
	#RB_INIT
(
roŸ
) do { \

977 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

978 } 0)

	)

980 
	#RB_BLACK
 0

	)

981 
	#RB_RED
 1

	)

982 
	#RB_ENTRY
(
ty≥
) \

984 
ty≥
 *
rbe_À·
; \

985 
ty≥
 *
rbe_right
; \

986 
ty≥
 *
rbe_∑ª¡
; \

987 
rbe_cﬁ‹
; \

988 }

	)

990 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

991 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

992 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

993 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

994 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

995 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

997 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

998 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

999 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

1000 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

1001 } 0)

	)

1003 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

1004 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

1005 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

1006 } 0)

	)

1008 #i‚de‡
RB_AUGMENT


1009 
	#RB_AUGMENT
(
x
)

	)

1012 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

1013 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

1014 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

1015 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

1017 
	`RB_AUGMENT
(
ñm
); \

1018 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

1019 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

1020 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1022 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1024 (
hód
)->
rbh_roŸ
 = (
tmp
); \

1025 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

1026 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

1027 
	`RB_AUGMENT
(
tmp
); \

1028 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

1029 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

1030 } 0)

	)

1032 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

1033 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

1034 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

1035 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

1037 
	`RB_AUGMENT
(
ñm
); \

1038 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

1039 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

1040 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1042 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1044 (
hód
)->
rbh_roŸ
 = (
tmp
); \

1045 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

1046 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

1047 
	`RB_AUGMENT
(
tmp
); \

1048 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

1049 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

1050 } 0)

	)

1053 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

1054 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

1055 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

1056 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

1057 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

1058 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

1059 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

1060 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

1062 

	)

1066 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

1068 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

1070 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

1071 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

1072 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

1073 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

1074 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

1075 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

1076 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

1077 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

1078 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

1079 
ñm
 = 
g∑ª¡
; \

1082 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1083 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1084 
tmp
 = 
∑ª¡
; \

1085 
∑ª¡
 = 
ñm
; \

1086 
ñm
 = 
tmp
; \

1088 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

1089 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

1091 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

1092 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

1093 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

1094 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

1095 
ñm
 = 
g∑ª¡
; \

1098 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1099 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1100 
tmp
 = 
∑ª¡
; \

1101 
∑ª¡
 = 
ñm
; \

1102 
ñm
 = 
tmp
; \

1104 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

1105 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

1108 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

1112 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

1114 
ty≥
 *
tmp
; \

1115 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

1116 
ñm
 !
	`RB_ROOT
(
hód
)) { \

1117 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1118 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1119 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

1120 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

1121 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1122 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1124 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1125 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

1126 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1127 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

1128 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1129 
ñm
 = 
∑ª¡
; \

1130 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1132 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1133 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

1134 
ty≥
 *
ﬁe·
; \

1135 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

1136 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

1137 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1138 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

1139 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1141 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

1142 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

1143 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

1144 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

1145 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1146 
ñm
 = 
	`RB_ROOT
(
hód
); \

1150 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1151 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

1152 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

1153 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1154 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1156 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1157 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

1158 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1159 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

1160 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1161 
ñm
 = 
∑ª¡
; \

1162 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1164 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1165 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

1166 
ty≥
 *
‹ight
; \

1167 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

1168 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

1169 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1170 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

1171 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1173 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

1174 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

1175 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

1176 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

1177 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1178 
ñm
 = 
	`RB_ROOT
(
hód
); \

1183 i‡(
ñm
) \

1184 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

1187 
ty≥
 * \

1188 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

1190 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

1191 
cﬁ‹
; \

1192 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

1193 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

1194 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

1195 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

1197 
ty≥
 *
À·
; \

1198 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

1199 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

1200 
ñm
 = 
À·
; \

1201 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

1202 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1203 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

1204 i‡(
chûd
) \

1205 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

1206 i‡(
∑ª¡
) { \

1207 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

1208 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1210 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1211 
	`RB_AUGMENT
(
∑ª¡
); \

1213 
	`RB_ROOT
(
hód
Ë
chûd
; \

1214 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

1215 
∑ª¡
 = 
ñm
; \

1216 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

1217 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

1218 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

1219 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

1221 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

1222 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

1224 
	`RB_ROOT
(
hód
Ë
ñm
; \

1225 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

1226 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

1227 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

1228 i‡(
∑ª¡
) { \

1229 
À·
 = 
∑ª¡
; \

1231 
	`RB_AUGMENT
(
À·
); \

1232 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

1234 
cﬁ‹
; \

1236 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1237 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

1238 i‡(
chûd
) \

1239 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

1240 i‡(
∑ª¡
) { \

1241 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

1242 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1244 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1245 
	`RB_AUGMENT
(
∑ª¡
); \

1247 
	`RB_ROOT
(
hód
Ë
chûd
; \

1248 
cﬁ‹
: \

1249 i‡(
cﬁ‹
 =
RB_BLACK
) \

1250 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

1251  (
ﬁd
); \

1255 
ty≥
 * \

1256 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

1258 
ty≥
 *
tmp
; \

1259 
ty≥
 *
∑ª¡
 = 
NULL
; \

1260 
comp
 = 0; \

1261 
tmp
 = 
	`RB_ROOT
(
hód
); \

1262 
tmp
) { \

1263 
∑ª¡
 = 
tmp
; \

1264 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

1265 i‡(
comp
 < 0) \

1266 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1267 i‡(
comp
 > 0) \

1268 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1270  (
tmp
); \

1272 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

1273 i‡(
∑ª¡
 !
NULL
) { \

1274 i‡(
comp
 < 0) \

1275 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

1277 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

1278 
	`RB_AUGMENT
(
∑ª¡
); \

1280 
	`RB_ROOT
(
hód
Ë
ñm
; \

1281 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

1282  (
NULL
); \

1286 
ty≥
 * \

1287 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

1289 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

1290 
comp
; \

1291 
tmp
) { \

1292 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

1293 i‡(
comp
 < 0) \

1294 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1295 i‡(
comp
 > 0) \

1296 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1298  (
tmp
); \

1300  (
NULL
); \

1303 
ty≥
 * \

1304 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

1306 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

1307 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

1308 
	`RB_LEFT
(
ñm
, 
fõld
)) \

1309 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

1311 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

1312 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

1313 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1315 
	`RB_PARENT
(
ñm
, 
fõld
) && \

1316 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

1317 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1318 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1321  (
ñm
); \

1324 
ty≥
 * \

1325 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

1327 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

1328 
ty≥
 *
∑ª¡
 = 
NULL
; \

1329 
tmp
) { \

1330 
∑ª¡
 = 
tmp
; \

1331 i‡(
vÆ
 < 0) \

1332 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1334 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1336  (
∑ª¡
); \

1337 }

	)

1339 
	#RB_NEGINF
 -1

	)

1340 
	#RB_INF
 1

	)

1342 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

1343 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

1344 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

1345 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

1346 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

1347 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

1349 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

1350 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

1351 (
x
Ë!
NULL
; \

1352 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

	@WIN32-Code/win32.c

28 #ifde‡
_MSC_VER


29 
	~"c⁄fig.h
"

32 
	~"../c⁄fig.h
"

35 
	~<wösock2.h
>

36 
	~<wödows.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/queue.h
>

39 
	~<sig«l.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<î∫o.h
>

44 
	~<as£π.h
>

46 
	#RB_AUGMENT
(
x
Ë()(x)

	)

47 
	~"åì.h
"

48 
	~"log.h
"

49 
	~"evít.h
"

50 
	~"evít-öã∫Æ.h
"

52 
	#XFREE
(
±r
Ëdÿ{ i‡’åË
	`‰ì
’å); } 0)

	)

54 
evít_li°
 
timequeue
;

55 
evít_li°
 
addqueue
;

57 
evít_li°
 
sig«lqueue
;

60 
	swö_fd_£t
 {

61 
u_öt
 
	mfd_cou¡
;

62 
SOCKET
 
	mfd_¨øy
[1];

65 
	gevsigˇught
[
NSIG
];

66 vﬁ©ûê
sig_©omic_t
 
	gsig«l_ˇught
 = 0;

68 vﬁ©ûê
	gSIGFPE_REQ
 = 0.0f;

71 
sig«l_h™dÀr
(
sig
);

73 
sig«l_¥o˚ss
();

74 
sig«l_ªˇlc
();

77 
	sevít_íåy
 {

78 
RB_ENTRY
(
evít_íåy
Ë
	mnode
;

79 
SOCKET
 
	msock
;

80 
	mªad_pos
;

81 
	mwrôe_pos
;

82 
evít
 *
	mªad_evít
;

83 
evít
 *
	mwrôe_evít
;

87 
	$com∑ª
(
evít_íåy
 *
a
, evít_íåy *
b
)

89 i‡(
a
->
sock
 < 
b
->sock)

91 i‡(
a
->
sock
 > 
b
->sock)

95 
	}
}

97 
	swö32›
 {

98 
	mfd_£tsz
;

99 
wö_fd_£t
 *
	mªad£t_ö
;

100 
wö_fd_£t
 *
	mwrôe£t_ö
;

101 
wö_fd_£t
 *
	mªad£t_out
;

102 
wö_fd_£t
 *
	mwrôe£t_out
;

103 
wö_fd_£t
 *
	mex£t_out
;

104 
RB_HEAD
(
evít_m≠
, 
evít_íåy
Ë
	mevít_roŸ
;

107 
RB_PROTOTYPE
(
evít_m≠
, 
evít_íåy
, 
node
, 
com∑ª
);

108 
RB_GENERATE
(
evít_m≠
, 
evít_íåy
, 
node
, 
com∑ª
);

110 *
wö32_öô
 (
evít_ba£
 *);

111 
wö32_ö£π
 (*, 
evít
 *);

112 
wö32_dñ
 (*, 
evít
 *);

113 
wö32_di•©ch
 (
evít_ba£
 *
ba£
, *, 
timevÆ
 *);

114 
wö32_dóŒoc
 (
evít_ba£
 *, *);

116 
evít›
 
	gwö32›s
 = {

118 
wö32_öô
,

119 
wö32_ö£π
,

120 
wö32_dñ
,

121 
wö32_di•©ch
,

122 
wö32_dóŒoc
,

126 
	#FD_SET_ALLOC_SIZE
(
n
Ë(((
wö_fd_£t
Ë+ (“)-1)*(
SOCKET
)))

	)

129 
	$ªÆloc_fd_£ts
(
wö32›
 *
›
, 
size_t
 
√w_size
)

131 
size_t
 
size
;

133 
	`as£π
(
√w_size
 >
›
->
ªad£t_ö
->
fd_cou¡
 &&

134 
√w_size
 >
›
->
wrôe£t_ö
->
fd_cou¡
);

135 
	`as£π
(
√w_size
 >= 1);

137 
size
 = 
	`FD_SET_ALLOC_SIZE
(
√w_size
);

138 i‡(!(
›
->
ªad£t_ö
 = 
	`ªÆloc
(›->ªad£t_ö, 
size
)))

140 i‡(!(
›
->
wrôe£t_ö
 = 
	`ªÆloc
(›->wrôe£t_ö, 
size
)))

142 i‡(!(
›
->
ªad£t_out
 = 
	`ªÆloc
(›->ªad£t_out, 
size
)))

144 i‡(!(
›
->
ex£t_out
 = 
	`ªÆloc
(›->ex£t_out, 
size
)))

146 i‡(!(
›
->
wrôe£t_out
 = 
	`ªÆloc
(›->wrôe£t_out, 
size
)))

148 
›
->
fd_£tsz
 = 
√w_size
;

150 
	}
}

153 
	$timevÆ_to_ms
(
timevÆ
 *
tv
)

155  ((
tv
->
tv_£c
 * 1000Ë+ (tv->
tv_u£c
 / 1000));

156 
	}
}

158 
evít_íåy
*

159 
	$gë_evít_íåy
(
wö32›
 *
›
, 
SOCKET
 
s
, 
¸óã
)

161 
evít_íåy
 
key
, *
vÆ
;

162 
key
.
sock
 = 
s
;

163 
vÆ
 = 
	`RB_FIND
(
evít_m≠
, &
›
->
evít_roŸ
, &
key
);

164 i‡(
vÆ
 || !
¸óã
)

165  
vÆ
;

166 i‡(!(
vÆ
 = 
	`ˇŒoc
(1, (
evít_íåy
)))) {

167 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

168  
NULL
;

170 
vÆ
->
sock
 = 
s
;

171 
vÆ
->
ªad_pos
 = vÆ->
wrôe_pos
 = -1;

172 
	`RB_INSERT
(
evít_m≠
, &
›
->
evít_roŸ
, 
vÆ
);

173  
vÆ
;

174 
	}
}

177 
	$do_fd_£t
(
wö32›
 *
›
, 
evít_íåy
 *
ít
, 
ªad
)

179 
SOCKET
 
s
 = 
ít
->
sock
;

180 
wö_fd_£t
 *
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

181 i‡(
ªad
) {

182 i‡(
ít
->
ªad_pos
 >= 0)

185 i‡(
ít
->
wrôe_pos
 >= 0)

188 i‡(
£t
->
fd_cou¡
 =
›
->
fd_£tsz
) {

189 i‡(
	`ªÆloc_fd_£ts
(
›
, op->
fd_£tsz
*2))

192 
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

194 
£t
->
fd_¨øy
[£t->
fd_cou¡
] = 
s
;

195 i‡(
ªad
)

196 
ít
->
ªad_pos
 = 
£t
->
fd_cou¡
;

198 
ít
->
wrôe_pos
 = 
£t
->
fd_cou¡
;

199  (
£t
->
fd_cou¡
++);

200 
	}
}

203 
	$do_fd_˛ór
(
wö32›
 *
›
, 
evít_íåy
 *
ít
, 
ªad
)

205 
i
;

206 
wö_fd_£t
 *
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

207 i‡(
ªad
) {

208 
i
 = 
ít
->
ªad_pos
;

209 
ít
->
ªad_pos
 = -1;

211 
i
 = 
ít
->
wrôe_pos
;

212 
ít
->
wrôe_pos
 = -1;

214 i‡(
i
 < 0)

216 i‡(--
£t
->
fd_cou¡
 !
i
) {

217 
evít_íåy
 *
ít2
;

218 
SOCKET
 
s2
;

219 
s2
 = 
£t
->
fd_¨øy
[
i
] = së->fd_¨øy[£t->
fd_cou¡
];

220 
ít2
 = 
	`gë_evít_íåy
(
›
, 
s2
, 0);

221 i‡(!
ít
)

223 i‡(
ªad
)

224 
ít2
->
ªad_pos
 = 
i
;

226 
ít2
->
wrôe_pos
 = 
i
;

229 
	}
}

231 
	#NEVENT
 64

	)

233 
	$wö32_öô
(
evít_ba£
 *
_ba£
)

235 
wö32›
 *
wö›
;

236 
size_t
 
size
;

237 i‡(!(
wö›
 = 
	`ˇŒoc
(1, (
wö32›
))))

238  
NULL
;

239 
wö›
->
fd_£tsz
 = 
NEVENT
;

240 
size
 = 
	`FD_SET_ALLOC_SIZE
(
NEVENT
);

241 i‡(!(
wö›
->
ªad£t_ö
 = 
	`mÆloc
(
size
)))

242 
îr
;

243 i‡(!(
wö›
->
wrôe£t_ö
 = 
	`mÆloc
(
size
)))

244 
îr
;

245 i‡(!(
wö›
->
ªad£t_out
 = 
	`mÆloc
(
size
)))

246 
îr
;

247 i‡(!(
wö›
->
wrôe£t_out
 = 
	`mÆloc
(
size
)))

248 
îr
;

249 i‡(!(
wö›
->
ex£t_out
 = 
	`mÆloc
(
size
)))

250 
îr
;

251 
	`RB_INIT
(&
wö›
->
evít_roŸ
);

252 
wö›
->
ªad£t_ö
->
fd_cou¡
 = wö›->
wrôe£t_ö
->fd_count = 0;

253 
wö›
->
ªad£t_out
->
fd_cou¡
 = wö›->
wrôe£t_out
->fd_count

254 
wö›
->
ex£t_out
->
fd_cou¡
 = 0;

256 
	`evsig«l_öô
(
_ba£
);

258  (
wö›
);

259 
îr
:

260 
	`XFREE
(
wö›
->
ªad£t_ö
);

261 
	`XFREE
(
wö›
->
wrôe£t_ö
);

262 
	`XFREE
(
wö›
->
ªad£t_out
);

263 
	`XFREE
(
wö›
->
wrôe£t_out
);

264 
	`XFREE
(
wö›
->
ex£t_out
);

265 
	`XFREE
(
wö›
);

266  (
NULL
);

267 
	}
}

270 
	$wö32_ö£π
(*
›
, 
evít
 *
ev
)

272 
wö32›
 *wö32› = 
›
;

273 
evít_íåy
 *
ít
;

275 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

276  (
	`evsig«l_add
(
ev
));

278 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

280 
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
ev
->
ev_fd
, 1);

281 i‡(!
ít
)

284 
	`evít_debug
(("%s:áddögÉvíàf‹ %d", 
__func__
, ()
ev
->
ev_fd
));

285 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

286 i‡(
	`do_fd_£t
(
wö32›
, 
ít
, 1)<0)

288 
ít
->
ªad_evít
 = 
ev
;

290 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

291 i‡(
	`do_fd_£t
(
wö32›
, 
ít
, 0)<0)

293 
ít
->
wrôe_evít
 = 
ev
;

296 
	}
}

299 
	$wö32_dñ
(*
›
, 
evít
 *
ev
)

301 
wö32›
 *wö32› = 
›
;

302 
evít_íåy
 *
ít
;

304 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

305  (
	`evsig«l_dñ
(
ev
));

307 i‡(!(
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
ev
->
ev_fd
, 0)))

309 
	`evít_debug
(("%s: RemovögÉvíàf‹ %d", 
__func__
, 
ev
->
ev_fd
));

310 i‡(
ev
 =
ít
->
ªad_evít
) {

311 
	`do_fd_˛ór
(
wö32›
, 
ít
, 1);

312 
ít
->
ªad_evít
 = 
NULL
;

314 i‡(
ev
 =
ít
->
wrôe_evít
) {

315 
	`do_fd_˛ór
(
wö32›
, 
ít
, 0);

316 
ít
->
wrôe_evít
 = 
NULL
;

318 i‡(!
ít
->
ªad_evít
 && !ít->
wrôe_evít
) {

319 
	`RB_REMOVE
(
evít_m≠
, &
wö32›
->
evít_roŸ
, 
ít
);

320 
	`‰ì
(
ít
);

324 
	}
}

327 
	$fd_£t_c›y
(
wö_fd_£t
 *
out
, c⁄° wö_fd_£à*
ö
)

329 
out
->
fd_cou¡
 = 
ö
->fd_count;

330 
	`mem˝y
(
out
->
fd_¨øy
, 
ö
->fd_¨øy, in->
fd_cou¡
 * ((
SOCKET
)));

331 
	}
}

345 
	$wö32_di•©ch
(
evít_ba£
 *
ba£
, *
›
,

346 
timevÆ
 *
tv
)

348 
wö32›
 *wö32› = 
›
;

349 
ªs
 = 0;

350 
i
;

351 
fd_cou¡
;

353 
	`fd_£t_c›y
(
wö32›
->
ªad£t_out
, wö32›->
ªad£t_ö
);

354 
	`fd_£t_c›y
(
wö32›
->
ex£t_out
, wö32›->
ªad£t_ö
);

355 
	`fd_£t_c›y
(
wö32›
->
wrôe£t_out
, wö32›->
wrôe£t_ö
);

357 
fd_cou¡
 =

358 (
wö32›
->
ªad£t_out
->
fd_cou¡
 > wö32›->
wrôe£t_out
->fd_count) ?

359 
wö32›
->
ªad£t_out
->
fd_cou¡
 : wö32›->
wrôe£t_out
->fd_count;

361 i‡(!
fd_cou¡
) {

363 
	`SÀï
(
	`timevÆ_to_ms
(
tv
));

364 
	`evsig«l_¥o˚ss
(
ba£
);

368 
ªs
 = 
	`£À˘
(
fd_cou¡
,

369 (
fd_£t
*)
wö32›
->
ªad£t_out
,

370 (
fd_£t
*)
wö32›
->
wrôe£t_out
,

371 (
fd_£t
*)
wö32›
->
ex£t_out
, 
tv
);

373 
	`evít_debug
(("%s: sñe˘Ñëu∫ed %d", 
__func__
, 
ªs
));

375 if(
ªs
 <= 0) {

376 
	`evsig«l_¥o˚ss
(
ba£
);

377  
ªs
;

378 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

379 
	`evsig«l_¥o˚ss
(
ba£
);

382 
i
=0; i<
wö32›
->
ªad£t_out
->
fd_cou¡
; ++i) {

383 
evít_íåy
 *
ít
;

384 
SOCKET
 
s
 = 
wö32›
->
ªad£t_out
->
fd_¨øy
[
i
];

385 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
ªad_evít
)

386 
	`evít_a˘ive
(
ít
->
ªad_evít
, 
EV_READ
, 1);

388 
i
=0; i<
wö32›
->
ex£t_out
->
fd_cou¡
; ++i) {

389 
evít_íåy
 *
ít
;

390 
SOCKET
 
s
 = 
wö32›
->
ex£t_out
->
fd_¨øy
[
i
];

391 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
ªad_evít
)

392 
	`evít_a˘ive
(
ít
->
ªad_evít
, 
EV_READ
, 1);

394 
i
=0; i<
wö32›
->
wrôe£t_out
->
fd_cou¡
; ++i) {

395 
evít_íåy
 *
ít
;

396 
SOCKET
 
s
 = 
wö32›
->
wrôe£t_out
->
fd_¨øy
[
i
];

397 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
wrôe_evít
)

398 
	`evít_a˘ive
(
ít
->
wrôe_evít
, 
EV_WRITE
, 1);

402 i‡(
	`sig«l_ªˇlc
() == -1)

407 
	}
}

410 
	$wö32_dóŒoc
(
evít_ba£
 *
_ba£
, *
¨g
)

412 
wö32›
 *wö32› = 
¨g
;

414 
	`evsig«l_dóŒoc
(
_ba£
);

415 i‡(
wö32›
->
ªad£t_ö
)

416 
	`‰ì
(
wö32›
->
ªad£t_ö
);

417 i‡(
wö32›
->
wrôe£t_ö
)

418 
	`‰ì
(
wö32›
->
wrôe£t_ö
);

419 i‡(
wö32›
->
ªad£t_out
)

420 
	`‰ì
(
wö32›
->
ªad£t_out
);

421 i‡(
wö32›
->
wrôe£t_out
)

422 
	`‰ì
(
wö32›
->
wrôe£t_out
);

423 i‡(
wö32›
->
ex£t_out
)

424 
	`‰ì
(
wö32›
->
ex£t_out
);

427 
	`mem£t
(
wö32›
, 0, (win32op));

428 
	`‰ì
(
wö32›
);

429 
	}
}

433 
	$sig«l_h™dÀr
(
sig
)

435 
evsigˇught
[
sig
]++;

436 
sig«l_ˇught
 = 1;

437 
	}
}

440 
	$sig«l_ªˇlc
()

442 
evít
 *
ev
;

445 
	`TAILQ_FOREACH
(
ev
, &
sig«lqueue
, 
ev_sig«l_√xt
) {

446 if(()
	`sig«l
(
	`EVENT_SIGNAL
(
ev
), 
sig«l_h™dÀr
) == -1)

450 
	}
}

453 
	$sig«l_¥o˚ss
()

455 
evít
 *
ev
;

456 
nˇŒs
;

458 
	`TAILQ_FOREACH
(
ev
, &
sig«lqueue
, 
ev_sig«l_√xt
) {

459 
nˇŒs
 = 
evsigˇught
[
	`EVENT_SIGNAL
(
ev
)];

460 i‡(
nˇŒs
) {

461 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

462 
	`evít_dñ
(
ev
);

463 
	`evít_a˘ive
(
ev
, 
EV_SIGNAL
, 
nˇŒs
);

467 
	`mem£t
(
evsigˇught
, 0, (evsigcaught));

468 
sig«l_ˇught
 = 0;

469 
	}
}

	@buffer.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
WIN32


33 
	~<wösock2.h
>

34 
	~<wödows.h
>

37 #ifde‡
HAVE_VASPRINTF


39 
	#_GNU_SOURCE


	)

42 
	~<sys/ty≥s.h
>

44 #ifde‡
HAVE_SYS_TIME_H


45 
	~<sys/time.h
>

48 #ifde‡
HAVE_SYS_IOCTL_H


49 
	~<sys/io˘l.h
>

52 
	~<as£π.h
>

53 
	~<î∫o.h
>

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 #ifde‡
HAVE_STDARG_H


58 
	~<°d¨g.h
>

60 #ifde‡
HAVE_UNISTD_H


61 
	~<uni°d.h
>

64 
	~"evít.h
"

65 
	~"c⁄fig.h
"

66 
	~"evutû.h
"

68 
evbuf„r
 *

69 
	$evbuf„r_√w
()

71 
evbuf„r
 *
buf„r
;

73 
buf„r
 = 
	`ˇŒoc
(1, (
evbuf„r
));

75  (
buf„r
);

76 
	}
}

79 
	$evbuf„r_‰ì
(
evbuf„r
 *
buf„r
)

81 i‡(
buf„r
->
‹ig_buf„r
 !
NULL
)

82 
	`‰ì
(
buf„r
->
‹ig_buf„r
);

83 
	`‰ì
(
buf„r
);

84 
	}
}

91 
	#SWAP
(
x
,
y
) do { \

92 (
x
)->
buf„r
 = (
y
)->buffer; \

93 (
x
)->
‹ig_buf„r
 = (
y
)->orig_buffer; \

94 (
x
)->
mißlign
 = (
y
)->misalign; \

95 (
x
)->
tŸÆÀn
 = (
y
)->totallen; \

96 (
x
)->
off
 = (
y
)->off; \

97 } 0)

	)

100 
	$evbuf„r_add_buf„r
(
evbuf„r
 *
outbuf
, evbuf„∏*
öbuf
)

102 
ªs
;

105 i‡(
outbuf
->
off
 == 0) {

106 
evbuf„r
 
tmp
;

107 
size_t
 
ﬁdoff
 = 
öbuf
->
off
;

110 
	`SWAP
(&
tmp
, 
outbuf
);

111 
	`SWAP
(
outbuf
, 
öbuf
);

112 
	`SWAP
(
öbuf
, &
tmp
);

119 i‡(
öbuf
->
off
 !
ﬁdoff
 && inbuf->
cb
 !
NULL
)

120 (*
öbuf
->
cb
)(öbuf, 
ﬁdoff
, inbuf->
off
, inbuf->
cb¨g
);

121 i‡(
ﬁdoff
 && 
outbuf
->
cb
 !
NULL
)

122 (*
outbuf
->
cb
)(outbuf, 0, 
ﬁdoff
, outbuf->
cb¨g
);

127 
ªs
 = 
	`evbuf„r_add
(
outbuf
, 
öbuf
->
buf„r
, inbuf->
off
);

128 i‡(
ªs
 == 0) {

130 
	`evbuf„r_døö
(
öbuf
, inbuf->
off
);

133  (
ªs
);

134 
	}
}

137 
	$evbuf„r_add_v¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, 
va_li°
 
≠
)

139 *
buf„r
;

140 
size_t
 
•a˚
;

141 
size_t
 
ﬁdoff
 = 
buf
->
off
;

142 
sz
;

143 
va_li°
 
aq
;

146 
	`evbuf„r_ex∑nd
(
buf
, 64);

148 
size_t
 
u£d
 = 
buf
->
mißlign
 + buf->
off
;

149 
buf„r
 = (*)
buf
->buf„∏+ buf->
off
;

150 
	`as£π
(
buf
->
tŸÆÀn
 >
u£d
);

151 
•a˚
 = 
buf
->
tŸÆÀn
 - 
u£d
;

153 #i‚de‡
va_c›y


154 
	#va_c›y
(
d°
, 
§c
Ë
	`mem˝y
(&(d°), &(§c), (
va_li°
))

	)

156 
	`va_c›y
(
aq
, 
≠
);

158 
sz
 = 
	`evutû_v¢¥ötf
(
buf„r
, 
•a˚
, 
fmt
, 
aq
);

160 
	`va_íd
(
aq
);

162 i‡(
sz
 < 0)

164 i‡(
sz
 < 
•a˚
) {

165 
buf
->
off
 +
sz
;

166 i‡(
buf
->
cb
 !
NULL
)

167 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

168  (
sz
);

170 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
sz
 + 1) == -1)

175 
	}
}

178 
	$evbuf„r_add_¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, ...)

180 
ªs
 = -1;

181 
va_li°
 
≠
;

183 
	`va_°¨t
(
≠
, 
fmt
);

184 
ªs
 = 
	`evbuf„r_add_v¥ötf
(
buf
, 
fmt
, 
≠
);

185 
	`va_íd
(
≠
);

187  (
ªs
);

188 
	}
}

193 
	$evbuf„r_ªmove
(
evbuf„r
 *
buf
, *
d©a
, 
size_t
 
d©Àn
)

195 
size_t
 
ƒód
 = 
d©Àn
;

196 i‡(
ƒód
 >
buf
->
off
)

197 
ƒód
 = 
buf
->
off
;

199 
	`mem˝y
(
d©a
, 
buf
->
buf„r
, 
ƒód
);

200 
	`evbuf„r_døö
(
buf
, 
ƒód
);

202  (
ƒód
);

203 
	}
}

211 
	$evbuf„r_ªadlöe
(
evbuf„r
 *
buf„r
)

213 
u_ch¨
 *
d©a
 = 
	`EVBUFFER_DATA
(
buf„r
);

214 
size_t
 
Àn
 = 
	`EVBUFFER_LENGTH
(
buf„r
);

215 *
löe
;

216 
i
;

218 
i
 = 0; i < 
Àn
; i++) {

219 i‡(
d©a
[
i
] == '\r' || data[i] == '\n')

223 i‡(
i
 =
Àn
)

224  (
NULL
);

226 i‡((
löe
 = 
	`mÆloc
(
i
 + 1)Ë=
NULL
) {

227 
	`Ârötf
(
°dîr
, "%s: ouào‡mem‹y\n", 
__func__
);

228 
	`evbuf„r_døö
(
buf„r
, 
i
);

229  (
NULL
);

232 
	`mem˝y
(
löe
, 
d©a
, 
i
);

233 
löe
[
i
] = '\0';

239 i‡–
i
 < 
Àn
 - 1 ) {

240 
fch
 = 
d©a
[
i
], 
sch
 = data[i+1];

243 i‡–(
sch
 ='\r' || sch ='\n'Ë&& sch !
fch
 )

244 
i
 += 1;

247 
	`evbuf„r_døö
(
buf„r
, 
i
 + 1);

249  (
löe
);

250 
	}
}

255 
	$evbuf„r_Æign
(
evbuf„r
 *
buf
)

257 
	`memmove
(
buf
->
‹ig_buf„r
, buf->
buf„r
, buf->
off
);

258 
buf
->
buf„r
 = buf->
‹ig_buf„r
;

259 
buf
->
mißlign
 = 0;

260 
	}
}

265 
	$evbuf„r_ex∑nd
(
evbuf„r
 *
buf
, 
size_t
 
d©Àn
)

267 
size_t
 
√ed
 = 
buf
->
mißlign
 + buf->
off
 + 
d©Àn
;

270 i‡(
buf
->
tŸÆÀn
 >
√ed
)

277 i‡(
buf
->
mißlign
 >
d©Àn
) {

278 
	`evbuf„r_Æign
(
buf
);

280 *
√wbuf
;

281 
size_t
 
Àngth
 = 
buf
->
tŸÆÀn
;

283 i‡(
Àngth
 < 256)

284 
Àngth
 = 256;

285 
Àngth
 < 
√ed
)

286 
Àngth
 <<= 1;

288 i‡(
buf
->
‹ig_buf„r
 !buf->
buf„r
)

289 
	`evbuf„r_Æign
(
buf
);

290 i‡((
√wbuf
 = 
	`ªÆloc
(
buf
->
buf„r
, 
Àngth
)Ë=
NULL
)

293 
buf
->
‹ig_buf„r
 = buf->
buf„r
 = 
√wbuf
;

294 
buf
->
tŸÆÀn
 = 
Àngth
;

298 
	}
}

301 
	$evbuf„r_add
(
evbuf„r
 *
buf
, c⁄° *
d©a
, 
size_t
 
d©Àn
)

303 
size_t
 
√ed
 = 
buf
->
mißlign
 + buf->
off
 + 
d©Àn
;

304 
size_t
 
ﬁdoff
 = 
buf
->
off
;

306 i‡(
buf
->
tŸÆÀn
 < 
√ed
) {

307 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
d©Àn
) == -1)

311 
	`mem˝y
(
buf
->
buf„r
 + buf->
off
, 
d©a
, 
d©Àn
);

312 
buf
->
off
 +
d©Àn
;

314 i‡(
d©Àn
 && 
buf
->
cb
 !
NULL
)

315 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

318 
	}
}

321 
	$evbuf„r_døö
(
evbuf„r
 *
buf
, 
size_t
 
Àn
)

323 
size_t
 
ﬁdoff
 = 
buf
->
off
;

325 i‡(
Àn
 >
buf
->
off
) {

326 
buf
->
off
 = 0;

327 
buf
->
buf„r
 = buf->
‹ig_buf„r
;

328 
buf
->
mißlign
 = 0;

329 
d⁄e
;

332 
buf
->
buf„r
 +
Àn
;

333 
buf
->
mißlign
 +
Àn
;

335 
buf
->
off
 -
Àn
;

337 
d⁄e
:

339 i‡(
buf
->
off
 !
ﬁdoff
 && buf->
cb
 !
NULL
)

340 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

342 
	}
}

348 
	#EVBUFFER_MAX_READ
 4096

	)

351 
	$evbuf„r_ªad
(
evbuf„r
 *
buf
, 
fd
, 
howmuch
)

353 
u_ch¨
 *
p
;

354 
size_t
 
ﬁdoff
 = 
buf
->
off
;

355 
n
 = 
EVBUFFER_MAX_READ
;

357 #i‡
	`deföed
(
FIONREAD
)

358 #ifde‡
WIN32


359 
 g
 = 
n
;

360 i‡(
	`io˘lsockë
(
fd
, 
FIONREAD
, &
 g
Ë=-1 || (
n
=lng) == 0) {

362 i‡(
	`io˘l
(
fd
, 
FIONREAD
, &
n
) == -1 ||Ç == 0) {

364 
n
 = 
EVBUFFER_MAX_READ
;

365 } i‡(
n
 > 
EVBUFFER_MAX_READ
 &&Ç > 
howmuch
) {

373 i‡(
n
 > 
buf
->
tŸÆÀn
 << 2)

374 
n
 = 
buf
->
tŸÆÀn
 << 2;

375 i‡(
n
 < 
EVBUFFER_MAX_READ
)

376 
n
 = 
EVBUFFER_MAX_READ
;

379 i‡(
howmuch
 < 0 || howmuch > 
n
)

380 
howmuch
 = 
n
;

383 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
howmuch
) == -1)

387 
p
 = 
buf
->
buf„r
 + buf->
off
;

389 #i‚de‡
WIN32


390 
n
 = 
	`ªad
(
fd
, 
p
, 
howmuch
);

392 
n
 = 
	`ªcv
(
fd
, 
p
, 
howmuch
, 0);

394 i‡(
n
 == -1)

396 i‡(
n
 == 0)

399 
buf
->
off
 +
n
;

402 i‡(
buf
->
off
 !
ﬁdoff
 && buf->
cb
 !
NULL
)

403 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

405  (
n
);

406 
	}
}

409 
	$evbuf„r_wrôe
(
evbuf„r
 *
buf„r
, 
fd
)

411 
n
;

413 #i‚de‡
WIN32


414 
n
 = 
	`wrôe
(
fd
, 
buf„r
->buf„r, buf„r->
off
);

416 
n
 = 
	`£nd
(
fd
, 
buf„r
->buf„r, buf„r->
off
, 0);

418 i‡(
n
 == -1)

420 i‡(
n
 == 0)

422 
	`evbuf„r_døö
(
buf„r
, 
n
);

424  (
n
);

425 
	}
}

427 
u_ch¨
 *

428 
	$evbuf„r_föd
(
evbuf„r
 *
buf„r
, c⁄° 
u_ch¨
 *
wh©
, 
size_t
 
Àn
)

430 
u_ch¨
 *
£¨ch
 = 
buf„r
->buf„r, *
íd
 = sórch + buf„r->
off
;

431 
u_ch¨
 *
p
;

433 
£¨ch
 < 
íd
 &&

434 (
p
 = 
	`memchr
(
£¨ch
, *
wh©
, 
íd
 - sórch)Ë!
NULL
) {

435 i‡(
p
 + 
Àn
 > 
íd
)

437 i‡(
	`memcmp
(
p
, 
wh©
, 
Àn
) == 0)

438  (
p
);

439 
£¨ch
 = 
p
 + 1;

442  (
NULL
);

443 
	}
}

445 
evbuf„r_£tcb
(
evbuf„r
 *
buf„r
,

446 (*
cb
)(
evbuf„r
 *, 
size_t
, size_t, *),

447 *
cb¨g
)

449 
buf„r
->
cb
 = cb;

450 
buf„r
->
cb¨g
 = cbarg;

451 
	}
}

	@compat/sys/_time.h

35 #i‚de‡
_SYS_TIME_H_


36 
	#_SYS_TIME_H_


	)

38 
	~<sys/ty≥s.h
>

44 
	stimevÆ
 {

45 
	mtv_£c
;

46 
	mtv_u£c
;

52 
	stime•ec
 {

53 
time_t
 
	mtv_£c
;

54 
	mtv_n£c
;

57 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

58 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

59 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

60 }

	)

61 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

62 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

63 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

64 }

	)

66 
	stimez⁄e
 {

67 
	mtz_möuãswe°
;

68 
	mtz_d°time
;

70 
	#DST_NONE
 0

	)

71 
	#DST_USA
 1

	)

72 
	#DST_AUST
 2

	)

73 
	#DST_WET
 3

	)

74 
	#DST_MET
 4

	)

75 
	#DST_EET
 5

	)

76 
	#DST_CAN
 6

	)

79 
	#timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

80 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

81 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

82 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

83 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

84 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

85 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

87 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

88 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

89 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

90 (
vvp
)->
tv_£c
++; \

91 (
vvp
)->
tv_u£c
 -= 1000000; \

93 } 0)

	)

94 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

96 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

97 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

98 i‡((
vvp
)->
tv_u£c
 < 0) { \

99 (
vvp
)->
tv_£c
--; \

100 (
vvp
)->
tv_u£c
 += 1000000; \

102 } 0)

	)

105 
	#time•ec˛ór
(
t•
Ë—•)->
tv_£c
 = (t•)->
tv_n£c
 = 0

	)

106 
	#time•ecis£t
(
t•
Ë(—•)->
tv_£c
 || (t•)->
tv_n£c
)

	)

107 
	#time•eccmp
(
t•
, 
u•
, 
cmp
) \

108 (((
t•
)->
tv_£c
 =(
u•
)->tv_sec) ? \

109 ((
t•
)->
tv_n£c
 
	`cmp
 (
u•
)->tv_nsec) : \

110 ((
t•
)->
tv_£c
 
	`cmp
 (
u•
)->tv_£c))

	)

111 
	#time•eˇdd
(
t•
, 
u•
, 
v•
) \

113 (
v•
)->
tv_£c
 = (
t•
)->tv_£¯+ (
u•
)->tv_sec; \

114 (
v•
)->
tv_n£c
 = (
t•
)->tv_n£¯+ (
u•
)->tv_nsec; \

115 i‡((
v•
)->
tv_n£c
 >= 1000000000L) { \

116 (
v•
)->
tv_£c
++; \

117 (
v•
)->
tv_n£c
 -= 1000000000L; \

119 } 0)

	)

120 
	#time•ecsub
(
t•
, 
u•
, 
v•
) \

122 (
v•
)->
tv_£c
 = (
t•
)->tv_£¯- (
u•
)->tv_sec; \

123 (
v•
)->
tv_n£c
 = (
t•
)->tv_n£¯- (
u•
)->tv_nsec; \

124 i‡((
v•
)->
tv_n£c
 < 0) { \

125 (
v•
)->
tv_£c
--; \

126 (
v•
)->
tv_n£c
 += 1000000000L; \

128 } 0)

	)

134 
	#ITIMER_REAL
 0

	)

135 
	#ITIMER_VIRTUAL
 1

	)

136 
	#ITIMER_PROF
 2

	)

138 
	sôimîvÆ
 {

139 
timevÆ
 
	mô_öãrvÆ
;

140 
timevÆ
 
	mô_vÆue
;

146 
	s˛ocköfo
 {

147 
	mhz
;

148 
	mtick
;

149 
	mtickadj
;

150 
	m°©hz
;

151 
	m¥ofhz
;

154 
	#CLOCK_REALTIME
 0

	)

155 
	#CLOCK_VIRTUAL
 1

	)

156 
	#CLOCK_PROF
 2

	)

158 
	#TIMER_RELTIME
 0x0

	)

159 
	#TIMER_ABSTIME
 0x1

	)

	@compat/sys/queue.h

35 #i‚def 
_SYS_QUEUE_H_


36 
	#_SYS_QUEUE_H_


	)

88 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

89 
	s«me
 { \

90 
ty≥
 *
¶h_fú°
; \

91 }

	)

93 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

94 { 
NULL
 }

	)

96 #i‚de‡
WIN32


97 
	#SLIST_ENTRY
(
ty≥
) \

99 
ty≥
 *
¶e_√xt
; \

100 }

	)

106 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

107 
	#SLIST_END
(
hód
Ë
NULL


	)

108 
	#SLIST_EMPTY
(
hód
Ë(
	`SLIST_FIRST
(hódË=
	`SLIST_END
(hód))

	)

109 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

111 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

112 (
v¨
Ë
	`SLIST_FIRST
(
hód
); \

113 (
v¨
Ë!
	`SLIST_END
(
hód
); \

114 (
v¨
Ë
	`SLIST_NEXT
(v¨, 
fõld
))

	)

119 
	#SLIST_INIT
(
hód
) { \

120 
	`SLIST_FIRST
(
hód
Ë
	`SLIST_END
(head); \

121 }

	)

123 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

124 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

125 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

126 } 0)

	)

128 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

129 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

130 (
hód
)->
¶h_fú°
 = (
ñm
); \

131 } 0)

	)

133 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

134 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

135 } 0)

	)

140 
	#LIST_HEAD
(
«me
, 
ty≥
) \

141 
	s«me
 { \

142 
ty≥
 *
lh_fú°
; \

143 }

	)

145 
	#LIST_HEAD_INITIALIZER
(
hód
) \

146 { 
NULL
 }

	)

148 
	#LIST_ENTRY
(
ty≥
) \

150 
ty≥
 *
À_√xt
; \

151 
ty≥
 **
À_¥ev
; \

152 }

	)

157 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

158 
	#LIST_END
(
hód
Ë
NULL


	)

159 
	#LIST_EMPTY
(
hód
Ë(
	`LIST_FIRST
(hódË=
	`LIST_END
(hód))

	)

160 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

162 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

163 (
v¨
Ë
	`LIST_FIRST
(
hód
); \

164 (
v¨
)!
	`LIST_END
(
hód
); \

165 (
v¨
Ë
	`LIST_NEXT
(v¨, 
fõld
))

	)

170 
	#LIST_INIT
(
hód
) do { \

171 
	`LIST_FIRST
(
hód
Ë
	`LIST_END
(head); \

172 } 0)

	)

174 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

175 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

176 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

177 &(
ñm
)->
fõld
.
À_√xt
; \

178 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

179 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

180 } 0)

	)

182 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

183 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

184 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

185 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

186 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

187 } 0)

	)

189 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

190 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

191 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

192 (
hód
)->
lh_fú°
 = (
ñm
); \

193 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

194 } 0)

	)

196 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

197 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

198 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

199 (
ñm
)->
fõld
.
À_¥ev
; \

200 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

201 } 0)

	)

203 
	#LIST_REPLACE
(
ñm
, 
ñm2
, 
fõld
) do { \

204 i‡(((
ñm2
)->
fõld
.
À_√xt
 = (
ñm
)->fõld.À_√xtË!
NULL
) \

205 (
ñm2
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

206 &(
ñm2
)->
fõld
.
À_√xt
; \

207 (
ñm2
)->
fõld
.
À_¥ev
 = (
ñm
)->field.le_prev; \

208 *(
ñm2
)->
fõld
.
À_¥ev
 = (elm2); \

209 } 0)

	)

214 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

215 
	s«me
 { \

216 
ty≥
 *
sqh_fú°
; \

217 
ty≥
 **
sqh_œ°
; \

218 }

	)

220 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

221 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

223 
	#SIMPLEQ_ENTRY
(
ty≥
) \

225 
ty≥
 *
sqe_√xt
; \

226 }

	)

231 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

232 
	#SIMPLEQ_END
(
hód
Ë
NULL


	)

233 
	#SIMPLEQ_EMPTY
(
hód
Ë(
	`SIMPLEQ_FIRST
(hódË=
	`SIMPLEQ_END
(hód))

	)

234 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

236 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

237 (
v¨
Ë
	`SIMPLEQ_FIRST
(
hód
); \

238 (
v¨
Ë!
	`SIMPLEQ_END
(
hód
); \

239 (
v¨
Ë
	`SIMPLEQ_NEXT
(v¨, 
fõld
))

	)

244 
	#SIMPLEQ_INIT
(
hód
) do { \

245 (
hód
)->
sqh_fú°
 = 
NULL
; \

246 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

247 } 0)

	)

249 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

250 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

251 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

252 (
hód
)->
sqh_fú°
 = (
ñm
); \

253 } 0)

	)

255 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

256 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

257 *(
hód
)->
sqh_œ°
 = (
ñm
); \

258 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

259 } 0)

	)

261 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

262 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

263 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

264 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

265 } 0)

	)

267 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

268 i‡(((
hód
)->
sqh_fú°
 = (
ñm
)->
fõld
.
sqe_√xt
Ë=
NULL
) \

269 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

270 } 0)

	)

275 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

276 
	s«me
 { \

277 
ty≥
 *
tqh_fú°
; \

278 
ty≥
 **
tqh_œ°
; \

279 }

	)

281 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

282 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

284 
	#TAILQ_ENTRY
(
ty≥
) \

286 
ty≥
 *
tqe_√xt
; \

287 
ty≥
 **
tqe_¥ev
; \

288 }

	)

293 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

294 
	#TAILQ_END
(
hód
Ë
NULL


	)

295 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

296 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

297 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

299 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

300 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

301 
	#TAILQ_EMPTY
(
hód
) \

302 (
	`TAILQ_FIRST
(
hód
Ë=
	`TAILQ_END
(hód))

	)

304 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

305 (
v¨
Ë
	`TAILQ_FIRST
(
hód
); \

306 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

307 (
v¨
Ë
	`TAILQ_NEXT
(v¨, 
fõld
))

	)

309 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
, 
hód«me
) \

310 (
v¨
Ë
	`TAILQ_LAST
(
hód
, 
hód«me
); \

311 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

312 (
v¨
Ë
	`TAILQ_PREV
(v¨, 
hód«me
, 
fõld
))

	)

317 
	#TAILQ_INIT
(
hód
) do { \

318 (
hód
)->
tqh_fú°
 = 
NULL
; \

319 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

320 } 0)

	)

322 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

323 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

324 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

325 &(
ñm
)->
fõld
.
tqe_√xt
; \

327 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

328 (
hód
)->
tqh_fú°
 = (
ñm
); \

329 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

330 } 0)

	)

332 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

333 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

334 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

335 *(
hód
)->
tqh_œ°
 = (
ñm
); \

336 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

337 } 0)

	)

339 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

340 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

341 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

342 &(
ñm
)->
fõld
.
tqe_√xt
; \

344 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

345 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

346 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

347 } 0)

	)

349 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

350 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

351 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

352 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

353 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

354 } 0)

	)

356 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

357 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

358 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

359 (
ñm
)->
fõld
.
tqe_¥ev
; \

361 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

362 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

363 } 0)

	)

365 
	#TAILQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

366 i‡(((
ñm2
)->
fõld
.
tqe_√xt
 = (
ñm
)->fõld.tqe_√xtË!
NULL
) \

367 (
ñm2
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

368 &(
ñm2
)->
fõld
.
tqe_√xt
; \

370 (
hód
)->
tqh_œ°
 = &(
ñm2
)->
fõld
.
tqe_√xt
; \

371 (
ñm2
)->
fõld
.
tqe_¥ev
 = (
ñm
)->field.tqe_prev; \

372 *(
ñm2
)->
fõld
.
tqe_¥ev
 = (elm2); \

373 } 0)

	)

378 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

379 
	s«me
 { \

380 
ty≥
 *
cqh_fú°
; \

381 
ty≥
 *
cqh_œ°
; \

382 }

	)

384 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

385 { 
	`CIRCLEQ_END
(&
hód
), CIRCLEQ_END(&hódË}

	)

387 
	#CIRCLEQ_ENTRY
(
ty≥
) \

389 
ty≥
 *
cqe_√xt
; \

390 
ty≥
 *
cqe_¥ev
; \

391 }

	)

396 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

397 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

398 
	#CIRCLEQ_END
(
hód
Ë((*)(hód))

	)

399 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

400 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

401 
	#CIRCLEQ_EMPTY
(
hód
) \

402 (
	`CIRCLEQ_FIRST
(
hód
Ë=
	`CIRCLEQ_END
(hód))

	)

404 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

405 (
v¨
Ë
	`CIRCLEQ_FIRST
(
hód
); \

406 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

407 (
v¨
Ë
	`CIRCLEQ_NEXT
(v¨, 
fõld
))

	)

409 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

410 (
v¨
Ë
	`CIRCLEQ_LAST
(
hód
); \

411 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

412 (
v¨
Ë
	`CIRCLEQ_PREV
(v¨, 
fõld
))

	)

417 
	#CIRCLEQ_INIT
(
hód
) do { \

418 (
hód
)->
cqh_fú°
 = 
	`CIRCLEQ_END
(head); \

419 (
hód
)->
cqh_œ°
 = 
	`CIRCLEQ_END
(head); \

420 } 0)

	)

422 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

423 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

424 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

425 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

426 (
hód
)->
cqh_œ°
 = (
ñm
); \

428 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

429 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

430 } 0)

	)

432 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

433 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

434 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

435 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

436 (
hód
)->
cqh_fú°
 = (
ñm
); \

438 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

439 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

440 } 0)

	)

442 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

443 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

444 (
ñm
)->
fõld
.
cqe_¥ev
 = 
	`CIRCLEQ_END
(
hód
); \

445 i‡((
hód
)->
cqh_œ°
 =
	`CIRCLEQ_END
(head)) \

446 (
hód
)->
cqh_œ°
 = (
ñm
); \

448 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

449 (
hód
)->
cqh_fú°
 = (
ñm
); \

450 } 0)

	)

452 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

453 (
ñm
)->
fõld
.
cqe_√xt
 = 
	`CIRCLEQ_END
(
hód
); \

454 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

455 i‡((
hód
)->
cqh_fú°
 =
	`CIRCLEQ_END
(head)) \

456 (
hód
)->
cqh_fú°
 = (
ñm
); \

458 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

459 (
hód
)->
cqh_œ°
 = (
ñm
); \

460 } 0)

	)

462 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

463 i‡((
ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

464 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

466 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

467 (
ñm
)->
fõld
.
cqe_¥ev
; \

468 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

469 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

471 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

472 (
ñm
)->
fõld
.
cqe_√xt
; \

473 } 0)

	)

475 
	#CIRCLEQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

476 i‡(((
ñm2
)->
fõld
.
cqe_√xt
 = (
ñm
)->field.cqe_next) == \

477 
	`CIRCLEQ_END
(
hód
)) \

478 (
hód
).
cqh_œ°
 = (
ñm2
); \

480 (
ñm2
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (elm2); \

481 i‡(((
ñm2
)->
fõld
.
cqe_¥ev
 = (
ñm
)->field.cqe_prev) == \

482 
	`CIRCLEQ_END
(
hód
)) \

483 (
hód
).
cqh_fú°
 = (
ñm2
); \

485 (
ñm2
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (elm2); \

486 } 0)

	)

	@config.h

5 
	#DNS_USE_CPU_CLOCK_FOR_ID
 1

	)

11 
	#HAVE_CLOCK_GETTIME
 1

	)

17 
	#HAVE_DLFCN_H
 1

	)

20 
	#HAVE_EPOLL
 1

	)

23 
	#HAVE_EPOLL_CTL
 1

	)

29 
	#HAVE_FCNTL
 1

	)

32 
	#HAVE_FCNTL_H
 1

	)

35 
	#HAVE_GETADDRINFO
 1

	)

38 
	#HAVE_GETNAMEINFO
 1

	)

41 
	#HAVE_GETTIMEOFDAY
 1

	)

44 
	#HAVE_INET_NTOP
 1

	)

47 
	#HAVE_INTTYPES_H
 1

	)

53 
	#HAVE_LIBNSL
 1

	)

56 
	#HAVE_LIBRESOLV
 1

	)

59 
	#HAVE_LIBRT
 1

	)

65 
	#HAVE_MEMORY_H
 1

	)

71 
	#HAVE_POLL
 1

	)

74 
	#HAVE_POLL_H
 1

	)

83 
	#HAVE_SELECT
 1

	)

86 
	#HAVE_SETFD
 1

	)

89 
	#HAVE_SIGACTION
 1

	)

92 
	#HAVE_SIGNAL
 1

	)

95 
	#HAVE_SIGNAL_H
 1

	)

98 
	#HAVE_STDARG_H
 1

	)

101 
	#HAVE_STDINT_H
 1

	)

104 
	#HAVE_STDLIB_H
 1

	)

107 
	#HAVE_STRINGS_H
 1

	)

110 
	#HAVE_STRING_H
 1

	)

116 
	#HAVE_STRSEP
 1

	)

119 
	#HAVE_STRTOK_R
 1

	)

122 
	#HAVE_STRTOLL
 1

	)

125 
	#HAVE_STRUCT_IN6_ADDR
 1

	)

131 
	#HAVE_SYS_EPOLL_H
 1

	)

137 
	#HAVE_SYS_IOCTL_H
 1

	)

140 
	#HAVE_SYS_PARAM_H
 1

	)

143 
	#HAVE_SYS_QUEUE_H
 1

	)

146 
	#HAVE_SYS_SELECT_H
 1

	)

149 
	#HAVE_SYS_SOCKET_H
 1

	)

152 
	#HAVE_SYS_STAT_H
 1

	)

155 
	#HAVE_SYS_TIME_H
 1

	)

158 
	#HAVE_SYS_TYPES_H
 1

	)

161 
	#HAVE_TAILQFOREACH
 1

	)

164 
	#HAVE_TIMERADD
 1

	)

167 
	#HAVE_TIMERCLEAR
 1

	)

170 
	#HAVE_TIMERCMP
 1

	)

173 
	#HAVE_TIMERISSET
 1

	)

176 
	#HAVE_UINT16_T
 1

	)

179 
	#HAVE_UINT32_T
 1

	)

182 
	#HAVE_UINT64_T
 1

	)

185 
	#HAVE_UINT8_T
 1

	)

188 
	#HAVE_UNISTD_H
 1

	)

191 
	#HAVE_VASPRINTF
 1

	)

198 
	#LT_OBJDIR
 ".libs/"

	)

201 
	#PACKAGE
 "libevít"

	)

204 
	#PACKAGE_BUGREPORT
 ""

	)

207 
	#PACKAGE_NAME
 ""

	)

210 
	#PACKAGE_STRING
 ""

	)

213 
	#PACKAGE_TARNAME
 ""

	)

216 
	#PACKAGE_URL
 ""

	)

219 
	#PACKAGE_VERSION
 ""

	)

222 
	#SIZEOF_INT
 4

	)

225 
	#SIZEOF_LONG
 4

	)

228 
	#SIZEOF_LONG_LONG
 8

	)

231 
	#SIZEOF_SHORT
 2

	)

234 
	#STDC_HEADERS
 1

	)

237 
	#TIME_WITH_SYS_TIME
 1

	)

240 
	#VERSION
 "1.4.9-°abÀ"

	)

250 #i‚de‡
__˝lu•lus


	@devpoll.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 
	~<sys/ty≥s.h
>

32 
	~<sys/ªsour˚.h
>

33 #ifde‡
HAVE_SYS_TIME_H


34 
	~<sys/time.h
>

36 
	~<sys/_time.h
>

38 
	~<sys/queue.h
>

39 
	~<sys/devpﬁl.h
>

40 
	~<sig«l.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<uni°d.h
>

45 
	~<f˙é.h
>

46 
	~<î∫o.h
>

47 
	~<as£π.h
>

49 
	~"evít.h
"

50 
	~"evít-öã∫Æ.h
"

51 
	~"evsig«l.h
"

52 
	~"log.h
"

57 
	sevdevpﬁl
 {

58 
evít
 *
	mevªad
;

59 
evít
 *
	mevwrôe
;

62 
	sdevpﬁl›
 {

63 
evdevpﬁl
 *
	mfds
;

64 
	mnfds
;

65 
pﬁlfd
 *
	mevíts
;

66 
	m√víts
;

67 
	mdpfd
;

68 
pﬁlfd
 *
	mch™ges
;

69 
	mnch™ges
;

72 *
devpﬁl_öô
 (
evít_ba£
 *);

73 
devpﬁl_add
 (*, 
evít
 *);

74 
devpﬁl_dñ
 (*, 
evít
 *);

75 
devpﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

76 
devpﬁl_dóŒoc
 (
evít_ba£
 *, *);

78 c⁄° 
evít›
 
	gdevpﬁl›s
 = {

80 
devpﬁl_öô
,

81 
devpﬁl_add
,

82 
devpﬁl_dñ
,

83 
devpﬁl_di•©ch
,

84 
devpﬁl_dóŒoc
,

88 
	#NEVENT
 32000

	)

91 
	$devpﬁl_commô
(
devpﬁl›
 *devpollop)

97 i‡(
	`pwrôe
(
devpﬁl›
->
dpfd
, devpﬁl›->
ch™ges
,

98 (
pﬁlfd
Ë* 
devpﬁl›
->
nch™ges
, 0) == -1)

101 
devpﬁl›
->
nch™ges
 = 0;

103 
	}
}

106 
	$devpﬁl_queue
(
devpﬁl›
 *devpﬁl›, 
fd
, 
evíts
) {

107 
pﬁlfd
 *
pfd
;

109 i‡(
devpﬁl›
->
nch™ges
 >devpﬁl›->
√víts
) {

114 i‡(
	`devpﬁl_commô
(
devpﬁl›
) != 0)

118 
pfd
 = &
devpﬁl›
->
ch™ges
[devpﬁl›->
nch™ges
++];

119 
pfd
->
fd
 = fd;

120 
pfd
->
evíts
 =Évents;

121 
pfd
->
ªvíts
 = 0;

124 
	}
}

127 
	$devpﬁl_öô
(
evít_ba£
 *
ba£
)

129 
dpfd
, 
nfûes
 = 
NEVENT
;

130 
æimô
 
æ
;

131 
devpﬁl›
 *devpollop;

134 i‡(
	`gëív
("EVENT_NODEVPOLL"))

135  (
NULL
);

137 i‡(!(
devpﬁl›
 = 
	`ˇŒoc
(1, (devpollop))))

138  (
NULL
);

140 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) == 0 &&

141 
æ
.
æim_cur
 !
RLIM_INFINITY
)

142 
nfûes
 = 
æ
.
æim_cur
;

145 i‡((
dpfd
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
)) == -1) {

146 
	`evít_w¨n
("open: /dev/poll");

147 
	`‰ì
(
devpﬁl›
);

148  (
NULL
);

151 
devpﬁl›
->
dpfd
 = dpfd;

154 
devpﬁl›
->
evíts
 = 
	`ˇŒoc
(
nfûes
, (
pﬁlfd
));

155 i‡(
devpﬁl›
->
evíts
 =
NULL
) {

156 
	`‰ì
(
devpﬁl›
);

157 
	`˛o£
(
dpfd
);

158  (
NULL
);

160 
devpﬁl›
->
√víts
 = 
nfûes
;

162 
devpﬁl›
->
fds
 = 
	`ˇŒoc
(
nfûes
, (
evdevpﬁl
));

163 i‡(
devpﬁl›
->
fds
 =
NULL
) {

164 
	`‰ì
(
devpﬁl›
->
evíts
);

165 
	`‰ì
(
devpﬁl›
);

166 
	`˛o£
(
dpfd
);

167  (
NULL
);

169 
devpﬁl›
->
nfds
 = 
nfûes
;

171 
devpﬁl›
->
ch™ges
 = 
	`ˇŒoc
(
nfûes
, (
pﬁlfd
));

172 i‡(
devpﬁl›
->
ch™ges
 =
NULL
) {

173 
	`‰ì
(
devpﬁl›
->
fds
);

174 
	`‰ì
(
devpﬁl›
->
evíts
);

175 
	`‰ì
(
devpﬁl›
);

176 
	`˛o£
(
dpfd
);

177  (
NULL
);

180 
	`evsig«l_öô
(
ba£
);

182  (
devpﬁl›
);

183 
	}
}

186 
	$devpﬁl_ªˇlc
(
evít_ba£
 *
ba£
, *
¨g
, 
max
)

188 
devpﬁl›
 *devpﬁl› = 
¨g
;

190 i‡(
max
 >
devpﬁl›
->
nfds
) {

191 
evdevpﬁl
 *
fds
;

192 
nfds
;

194 
nfds
 = 
devpﬁl›
->nfds;

195 
nfds
 <
max
)

196 
nfds
 <<= 1;

198 
fds
 = 
	`ªÆloc
(
devpﬁl›
->fds, 
nfds
 * (
evdevpﬁl
));

199 i‡(
fds
 =
NULL
) {

200 
	`evít_w¨n
("realloc");

203 
devpﬁl›
->
fds
 = fds;

204 
	`mem£t
(
fds
 + 
devpﬁl›
->
nfds
, 0,

205 (
nfds
 - 
devpﬁl›
->nfdsË* (
evdevpﬁl
));

206 
devpﬁl›
->
nfds
 =Çfds;

210 
	}
}

213 
	$devpﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

215 
devpﬁl›
 *devpﬁl› = 
¨g
;

216 
pﬁlfd
 *
evíts
 = 
devpﬁl›
->events;

217 
dvpﬁl
 
dvp
;

218 
evdevpﬁl
 *
evdp
;

219 
i
, 
ªs
, 
timeout
 = -1;

221 i‡(
devpﬁl›
->
nch™ges
)

222 
	`devpﬁl_commô
(
devpﬁl›
);

224 i‡(
tv
 !
NULL
)

225 
timeout
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

227 
dvp
.
dp_fds
 = 
devpﬁl›
->
evíts
;

228 
dvp
.
dp_nfds
 = 
devpﬁl›
->
√víts
;

229 
dvp
.
dp_timeout
 = 
timeout
;

231 
ªs
 = 
	`io˘l
(
devpﬁl›
->
dpfd
, 
DP_POLL
, &
dvp
);

233 i‡(
ªs
 == -1) {

234 i‡(
î∫o
 !
EINTR
) {

235 
	`evít_w¨n
("ioctl: DP_POLL");

239 
	`evsig«l_¥o˚ss
(
ba£
);

241 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

242 
	`evsig«l_¥o˚ss
(
ba£
);

245 
	`evít_debug
(("%s: devpﬁl_waôÑï‹t†%d", 
__func__
, 
ªs
));

247 
i
 = 0; i < 
ªs
; i++) {

248 
which
 = 0;

249 
wh©
 = 
evíts
[
i
].
ªvíts
;

250 
evít
 *
evªad
 = 
NULL
, *
evwrôe
 = NULL;

252 
	`as£π
(
evíts
[
i
].
fd
 < 
devpﬁl›
->
nfds
);

253 
evdp
 = &
devpﬁl›
->
fds
[
evíts
[
i
].
fd
];

255 i‡(
wh©
 & 
POLLHUP
)

256 
wh©
 |
POLLIN
 | 
POLLOUT
;

257 i‡(
wh©
 & 
POLLERR
)

258 
wh©
 |
POLLIN
 | 
POLLOUT
;

260 i‡(
wh©
 & 
POLLIN
) {

261 
evªad
 = 
evdp
->evread;

262 
which
 |
EV_READ
;

265 i‡(
wh©
 & 
POLLOUT
) {

266 
evwrôe
 = 
evdp
->evwrite;

267 
which
 |
EV_WRITE
;

270 i‡(!
which
)

273 i‡(
evªad
 !
NULL
 && !”vªad->
ev_evíts
 & 
EV_PERSIST
))

274 
	`evít_dñ
(
evªad
);

275 i‡(
evwrôe
 !
NULL
 &&Évwrôê!
evªad
 &&

276 !(
evwrôe
->
ev_evíts
 & 
EV_PERSIST
))

277 
	`evít_dñ
(
evwrôe
);

279 i‡(
evªad
 !
NULL
)

280 
	`evít_a˘ive
(
evªad
, 
EV_READ
, 1);

281 i‡(
evwrôe
 !
NULL
)

282 
	`evít_a˘ive
(
evwrôe
, 
EV_WRITE
, 1);

286 
	}
}

290 
	$devpﬁl_add
(*
¨g
, 
evít
 *
ev
)

292 
devpﬁl›
 *devpﬁl› = 
¨g
;

293 
evdevpﬁl
 *
evdp
;

294 
fd
, 
evíts
;

296 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

297  (
	`evsig«l_add
(
ev
));

299 
fd
 = 
ev
->
ev_fd
;

300 i‡(
fd
 >
devpﬁl›
->
nfds
) {

302 i‡(
	`devpﬁl_ªˇlc
(
ev
->
ev_ba£
, 
devpﬁl›
, 
fd
) == -1)

305 
evdp
 = &
devpﬁl›
->
fds
[
fd
];

314 
evíts
 = 0;

315 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

316 i‡(
evdp
->
evªad
 &&Évdp->evªad !
ev
) {

320 
evíts
 |
POLLIN
;

323 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

324 i‡(
evdp
->
evwrôe
 &&Évdp->evwrôê!
ev
) {

328 
evíts
 |
POLLOUT
;

331 i‡(
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
evíts
) != 0)

335 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

336 
evdp
->
evªad
 = 
ev
;

337 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

338 
evdp
->
evwrôe
 = 
ev
;

341 
	}
}

344 
	$devpﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

346 
devpﬁl›
 *devpﬁl› = 
¨g
;

347 
evdevpﬁl
 *
evdp
;

348 
fd
, 
evíts
;

349 
√edwrôedñëe
 = 1, 
√edªaddñëe
 = 1;

351 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

352  (
	`evsig«l_dñ
(
ev
));

354 
fd
 = 
ev
->
ev_fd
;

355 i‡(
fd
 >
devpﬁl›
->
nfds
)

357 
evdp
 = &
devpﬁl›
->
fds
[
fd
];

359 
evíts
 = 0;

360 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

361 
evíts
 |
POLLIN
;

362 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

363 
evíts
 |
POLLOUT
;

372 i‡(
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLREMOVE
) != 0)

375 i‡((
evíts
 & (
POLLIN
|
POLLOUT
)) != (POLLIN|POLLOUT)) {

381 i‡((
evíts
 & 
POLLIN
Ë&& 
evdp
->
evwrôe
 !
NULL
) {

383 
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLOUT
);

384 
√edwrôedñëe
 = 0;

385 } i‡((
evíts
 & 
POLLOUT
Ë&& 
evdp
->
evªad
 !
NULL
) {

387 
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLIN
);

388 
√edªaddñëe
 = 0;

392 i‡(
√edªaddñëe
)

393 
evdp
->
evªad
 = 
NULL
;

394 i‡(
√edwrôedñëe
)

395 
evdp
->
evwrôe
 = 
NULL
;

398 
	}
}

401 
	$devpﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

403 
devpﬁl›
 *devpﬁl› = 
¨g
;

405 
	`evsig«l_dóŒoc
(
ba£
);

406 i‡(
devpﬁl›
->
fds
)

407 
	`‰ì
(
devpﬁl›
->
fds
);

408 i‡(
devpﬁl›
->
evíts
)

409 
	`‰ì
(
devpﬁl›
->
evíts
);

410 i‡(
devpﬁl›
->
ch™ges
)

411 
	`‰ì
(
devpﬁl›
->
ch™ges
);

412 i‡(
devpﬁl›
->
dpfd
 >= 0)

413 
	`˛o£
(
devpﬁl›
->
dpfd
);

415 
	`mem£t
(
devpﬁl›
, 0, (devpollop));

416 
	`‰ì
(
devpﬁl›
);

417 
	}
}

	@epoll.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 
	~<°döt.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/ªsour˚.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_time.h
>

39 
	~<sys/queue.h
>

40 
	~<sys/ïﬁl.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 #ifde‡
HAVE_FCNTL_H


48 
	~<f˙é.h
>

51 
	~"evít.h
"

52 
	~"evít-öã∫Æ.h
"

53 
	~"evsig«l.h
"

54 
	~"log.h
"

59 
	sevïﬁl
 {

60 
evít
 *
	mevªad
;

61 
evít
 *
	mevwrôe
;

64 
	sïﬁl›
 {

65 
evïﬁl
 *
	mfds
;

66 
	mnfds
;

67 
ïﬁl_evít
 *
	mevíts
;

68 
	m√víts
;

69 
	mïfd
;

72 *
ïﬁl_öô
 (
evít_ba£
 *);

73 
ïﬁl_add
 (*, 
evít
 *);

74 
ïﬁl_dñ
 (*, 
evít
 *);

75 
ïﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

76 
ïﬁl_dóŒoc
 (
evít_ba£
 *, *);

78 c⁄° 
evít›
 
	gïﬁl›s
 = {

80 
ïﬁl_öô
,

81 
ïﬁl_add
,

82 
ïﬁl_dñ
,

83 
ïﬁl_di•©ch
,

84 
ïﬁl_dóŒoc
,

88 #ifde‡
HAVE_SETFD


89 
	#FD_CLOSEONEXEC
(
x
) do { \

90 i‡(
	`f˙é
(
x
, 
F_SETFD
, 1) == -1) \

91 
	`evít_w¨n
("f˙é(%d, F_SETFD)", 
x
); \

92 } 0)

	)

94 
	#FD_CLOSEONEXEC
(
x
)

	)

97 
	#NEVENT
 32000

	)

105 
	#MAX_EPOLL_TIMEOUT_MSEC
 (35*60*1000)

	)

108 
	$ïﬁl_öô
(
evít_ba£
 *
ba£
)

110 
ïfd
, 
nfûes
 = 
NEVENT
;

111 
æimô
 
æ
;

112 
ïﬁl›
 *epollop;

115 i‡(
	`gëív
("EVENT_NOEPOLL"))

116  (
NULL
);

118 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) == 0 &&

119 
æ
.
æim_cur
 !
RLIM_INFINITY
) {

125 
nfûes
 = 
æ
.
æim_cur
 - 1;

130 i‡((
ïfd
 = 
	`ïﬁl_¸óã
(
nfûes
)) == -1) {

131 i‡(
î∫o
 !
ENOSYS
)

132 
	`evít_w¨n
("epoll_create");

133  (
NULL
);

136 
	`FD_CLOSEONEXEC
(
ïfd
);

138 i‡(!(
ïﬁl›
 = 
	`ˇŒoc
(1, (epollop))))

139  (
NULL
);

141 
ïﬁl›
->
ïfd
 =Épfd;

144 
ïﬁl›
->
evíts
 = 
	`mÆloc
(
nfûes
 * (
ïﬁl_evít
));

145 i‡(
ïﬁl›
->
evíts
 =
NULL
) {

146 
	`‰ì
(
ïﬁl›
);

147  (
NULL
);

149 
ïﬁl›
->
√víts
 = 
nfûes
;

151 
ïﬁl›
->
fds
 = 
	`ˇŒoc
(
nfûes
, (
evïﬁl
));

152 i‡(
ïﬁl›
->
fds
 =
NULL
) {

153 
	`‰ì
(
ïﬁl›
->
evíts
);

154 
	`‰ì
(
ïﬁl›
);

155  (
NULL
);

157 
ïﬁl›
->
nfds
 = 
nfûes
;

159 
	`evsig«l_öô
(
ba£
);

161  (
ïﬁl›
);

162 
	}
}

165 
	$ïﬁl_ªˇlc
(
evít_ba£
 *
ba£
, *
¨g
, 
max
)

167 
ïﬁl›
 *ïﬁl› = 
¨g
;

169 i‡(
max
 > 
ïﬁl›
->
nfds
) {

170 
evïﬁl
 *
fds
;

171 
nfds
;

173 
nfds
 = 
ïﬁl›
->nfds;

174 
nfds
 < 
max
)

175 
nfds
 <<= 1;

177 
fds
 = 
	`ªÆloc
(
ïﬁl›
->fds, 
nfds
 * (
evïﬁl
));

178 i‡(
fds
 =
NULL
) {

179 
	`evít_w¨n
("realloc");

182 
ïﬁl›
->
fds
 = fds;

183 
	`mem£t
(
fds
 + 
ïﬁl›
->
nfds
, 0,

184 (
nfds
 - 
ïﬁl›
->nfdsË* (
evïﬁl
));

185 
ïﬁl›
->
nfds
 =Çfds;

189 
	}
}

192 
	$ïﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

194 
ïﬁl›
 *ïﬁl› = 
¨g
;

195 
ïﬁl_evít
 *
evíts
 = 
ïﬁl›
->events;

196 
evïﬁl
 *
evï
;

197 
i
, 
ªs
, 
timeout
 = -1;

199 i‡(
tv
 !
NULL
)

200 
timeout
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

202 i‡(
timeout
 > 
MAX_EPOLL_TIMEOUT_MSEC
) {

205 
timeout
 = 
MAX_EPOLL_TIMEOUT_MSEC
;

208 
ªs
 = 
	`ïﬁl_waô
(
ïﬁl›
->
ïfd
, 
evíts
,Épﬁl›->
√víts
, 
timeout
);

210 i‡(
ªs
 == -1) {

211 i‡(
î∫o
 !
EINTR
) {

212 
	`evít_w¨n
("epoll_wait");

216 
	`evsig«l_¥o˚ss
(
ba£
);

218 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

219 
	`evsig«l_¥o˚ss
(
ba£
);

222 
	`evít_debug
(("%s:Épﬁl_waôÑï‹t†%d", 
__func__
, 
ªs
));

224 
i
 = 0; i < 
ªs
; i++) {

225 
wh©
 = 
evíts
[
i
].events;

226 
evít
 *
evªad
 = 
NULL
, *
evwrôe
 = NULL;

228 
evï
 = (
evïﬁl
 *)
evíts
[
i
].
d©a
.
±r
;

230 i‡(
wh©
 & (
EPOLLHUP
|
EPOLLERR
)) {

231 
evªad
 = 
evï
->evread;

232 
evwrôe
 = 
evï
->evwrite;

234 i‡(
wh©
 & 
EPOLLIN
) {

235 
evªad
 = 
evï
->evread;

238 i‡(
wh©
 & 
EPOLLOUT
) {

239 
evwrôe
 = 
evï
->evwrite;

243 i‡(!(
evªad
||
evwrôe
))

246 i‡(
evªad
 !
NULL
)

247 
	`evít_a˘ive
(
evªad
, 
EV_READ
, 1);

248 i‡(
evwrôe
 !
NULL
)

249 
	`evít_a˘ive
(
evwrôe
, 
EV_WRITE
, 1);

253 
	}
}

257 
	$ïﬁl_add
(*
¨g
, 
evít
 *
ev
)

259 
ïﬁl›
 *ïﬁl› = 
¨g
;

260 
ïﬁl_evít
 
ïev
 = {0, {0}};

261 
evïﬁl
 *
evï
;

262 
fd
, 
›
, 
evíts
;

264 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

265  (
	`evsig«l_add
(
ev
));

267 
fd
 = 
ev
->
ev_fd
;

268 i‡(
fd
 >
ïﬁl›
->
nfds
) {

270 i‡(
	`ïﬁl_ªˇlc
(
ev
->
ev_ba£
, 
ïﬁl›
, 
fd
) == -1)

273 
evï
 = &
ïﬁl›
->
fds
[
fd
];

274 
›
 = 
EPOLL_CTL_ADD
;

275 
evíts
 = 0;

276 i‡(
evï
->
evªad
 !
NULL
) {

277 
evíts
 |
EPOLLIN
;

278 
›
 = 
EPOLL_CTL_MOD
;

280 i‡(
evï
->
evwrôe
 !
NULL
) {

281 
evíts
 |
EPOLLOUT
;

282 
›
 = 
EPOLL_CTL_MOD
;

285 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

286 
evíts
 |
EPOLLIN
;

287 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

288 
evíts
 |
EPOLLOUT
;

290 
ïev
.
d©a
.
±r
 = 
evï
;

291 
ïev
.
evíts
 =Évents;

292 i‡(
	`ïﬁl_˘l
(
ïﬁl›
->
ïfd
, 
›
, 
ev
->
ev_fd
, &
ïev
) == -1)

296 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

297 
evï
->
evªad
 = 
ev
;

298 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

299 
evï
->
evwrôe
 = 
ev
;

302 
	}
}

305 
	$ïﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

307 
ïﬁl›
 *ïﬁl› = 
¨g
;

308 
ïﬁl_evít
 
ïev
 = {0, {0}};

309 
evïﬁl
 *
evï
;

310 
fd
, 
evíts
, 
›
;

311 
√edwrôedñëe
 = 1, 
√edªaddñëe
 = 1;

313 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

314  (
	`evsig«l_dñ
(
ev
));

316 
fd
 = 
ev
->
ev_fd
;

317 i‡(
fd
 >
ïﬁl›
->
nfds
)

319 
evï
 = &
ïﬁl›
->
fds
[
fd
];

321 
›
 = 
EPOLL_CTL_DEL
;

322 
evíts
 = 0;

324 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

325 
evíts
 |
EPOLLIN
;

326 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

327 
evíts
 |
EPOLLOUT
;

329 i‡((
evíts
 & (
EPOLLIN
|
EPOLLOUT
)) != (EPOLLIN|EPOLLOUT)) {

330 i‡((
evíts
 & 
EPOLLIN
Ë&& 
evï
->
evwrôe
 !
NULL
) {

331 
√edwrôedñëe
 = 0;

332 
evíts
 = 
EPOLLOUT
;

333 
›
 = 
EPOLL_CTL_MOD
;

334 } i‡((
evíts
 & 
EPOLLOUT
Ë&& 
evï
->
evªad
 !
NULL
) {

335 
√edªaddñëe
 = 0;

336 
evíts
 = 
EPOLLIN
;

337 
›
 = 
EPOLL_CTL_MOD
;

341 
ïev
.
evíts
 =Évents;

342 
ïev
.
d©a
.
±r
 = 
evï
;

344 i‡(
√edªaddñëe
)

345 
evï
->
evªad
 = 
NULL
;

346 i‡(
√edwrôedñëe
)

347 
evï
->
evwrôe
 = 
NULL
;

349 i‡(
	`ïﬁl_˘l
(
ïﬁl›
->
ïfd
, 
›
, 
fd
, &
ïev
) == -1)

353 
	}
}

356 
	$ïﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

358 
ïﬁl›
 *ïﬁl› = 
¨g
;

360 
	`evsig«l_dóŒoc
(
ba£
);

361 i‡(
ïﬁl›
->
fds
)

362 
	`‰ì
(
ïﬁl›
->
fds
);

363 i‡(
ïﬁl›
->
evíts
)

364 
	`‰ì
(
ïﬁl›
->
evíts
);

365 i‡(
ïﬁl›
->
ïfd
 >= 0)

366 
	`˛o£
(
ïﬁl›
->
ïfd
);

368 
	`mem£t
(
ïﬁl›
, 0, (epollop));

369 
	`‰ì
(
ïﬁl›
);

370 
	}
}

	@epoll_sub.c

27 
	~<°döt.h
>

29 
	~<sys/∑øm.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/sysˇŒ.h
>

32 
	~<sys/ïﬁl.h
>

33 
	~<uni°d.h
>

36 
	$ïﬁl_¸óã
(
size
)

38  (
	`sysˇŒ
(
__NR_ïﬁl_¸óã
, 
size
));

39 
	}
}

42 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

45  (
	`sysˇŒ
(
__NR_ïﬁl_˘l
, 
ïfd
, 
›
, 
fd
, 
evít
));

46 
	}
}

49 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
maxevíts
, 
timeout
)

51  (
	`sysˇŒ
(
__NR_ïﬁl_waô
, 
ïfd
, 
evíts
, 
maxevíts
, 
timeout
));

52 
	}
}

	@evbuffer.c

28 
	~<sys/ty≥s.h
>

30 #ifde‡
HAVE_CONFIG_H


31 
	~"c⁄fig.h
"

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

38 
	~<î∫o.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 #ifde‡
HAVE_STDARG_H


43 
	~<°d¨g.h
>

46 #ifde‡
WIN32


47 
	~<wösock2.h
>

50 
	~"evutû.h
"

51 
	~"evít.h
"

55 
buf„ªvít_ªad_¥essuª_cb
(
evbuf„r
 *, 
size_t
, size_t, *);

58 
	$buf„ªvít_add
(
evít
 *
ev
, 
timeout
)

60 
timevÆ
 
tv
, *
±v
 = 
NULL
;

62 i‡(
timeout
) {

63 
	`evutû_timî˛ór
(&
tv
);

64 
tv
.
tv_£c
 = 
timeout
;

65 
±v
 = &
tv
;

68  (
	`evít_add
(
ev
, 
±v
));

69 
	}
}

77 
	$buf„ªvít_ªad_¥essuª_cb
(
evbuf„r
 *
buf
, 
size_t
 
ﬁd
, size_à
now
,

78 *
¨g
) {

79 
buf„ªvít
 *
bu„v
 = 
¨g
;

84 i‡(
bu„v
->
wm_ªad
.
high
 =0 || 
now
 < bufev->wm_read.high) {

85 
	`evbuf„r_£tcb
(
buf
, 
NULL
, NULL);

87 i‡(
bu„v
->
íabÀd
 & 
EV_READ
)

88 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

90 
	}
}

93 
	$buf„ªvít_ªadcb
(
fd
, 
evít
, *
¨g
)

95 
buf„ªvít
 *
bu„v
 = 
¨g
;

96 
ªs
 = 0;

97 
wh©
 = 
EVBUFFER_READ
;

98 
size_t
 
Àn
;

99 
howmuch
 = -1;

101 i‡(
evít
 =
EV_TIMEOUT
) {

102 
wh©
 |
EVBUFFER_TIMEOUT
;

103 
îr‹
;

110 i‡(
bu„v
->
wm_ªad
.
high
 != 0) {

111 
howmuch
 = 
bu„v
->
wm_ªad
.
high
 - 
	`EVBUFFER_LENGTH
(bu„v->
öput
);

113 i‡(
howmuch
 <= 0) {

114 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

115 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

116 
	`evbuf„r_£tcb
(
buf
,

117 
buf„ªvít_ªad_¥essuª_cb
, 
bu„v
);

122 
ªs
 = 
	`evbuf„r_ªad
(
bu„v
->
öput
, 
fd
, 
howmuch
);

123 i‡(
ªs
 == -1) {

124 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

125 
ªscheduÀ
;

127 
wh©
 |
EVBUFFER_ERROR
;

128 } i‡(
ªs
 == 0) {

130 
wh©
 |
EVBUFFER_EOF
;

133 i‡(
ªs
 <= 0)

134 
îr‹
;

136 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

139 
Àn
 = 
	`EVBUFFER_LENGTH
(
bu„v
->
öput
);

140 i‡(
bu„v
->
wm_ªad
.
low
 !0 && 
Àn
 < bufev->wm_read.low)

142 i‡(
bu„v
->
wm_ªad
.
high
 !0 && 
Àn
 >= bufev->wm_read.high) {

143 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

144 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

147 
	`evbuf„r_£tcb
(
buf
, 
buf„ªvít_ªad_¥essuª_cb
, 
bu„v
);

151 i‡(
bu„v
->
ªadcb
 !
NULL
)

152 (*
bu„v
->
ªadcb
)(bu„v, bu„v->
cb¨g
);

155 
ªscheduÀ
:

156 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

159 
îr‹
:

160 (*
bu„v
->
îr‹cb
)(bu„v, 
wh©
, bu„v->
cb¨g
);

161 
	}
}

164 
	$buf„ªvít_wrôecb
(
fd
, 
evít
, *
¨g
)

166 
buf„ªvít
 *
bu„v
 = 
¨g
;

167 
ªs
 = 0;

168 
wh©
 = 
EVBUFFER_WRITE
;

170 i‡(
evít
 =
EV_TIMEOUT
) {

171 
wh©
 |
EVBUFFER_TIMEOUT
;

172 
îr‹
;

175 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
)) {

176 
ªs
 = 
	`evbuf„r_wrôe
(
bu„v
->
ouçut
, 
fd
);

177 i‡(
ªs
 == -1) {

178 #i‚de‡
WIN32


181 i‡(
î∫o
 =
EAGAIN
 ||

182 
î∫o
 =
EINTR
 ||

183 
î∫o
 =
EINPROGRESS
)

184 
ªscheduÀ
;

186 
wh©
 |
EVBUFFER_ERROR
;

189 
ªscheduÀ
;

192 } i‡(
ªs
 == 0) {

194 
wh©
 |
EVBUFFER_EOF
;

196 i‡(
ªs
 <= 0)

197 
îr‹
;

200 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
) != 0)

201 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

207 i‡(
bu„v
->
wrôecb
 !
NULL
 &&

208 
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
Ë<bu„v->
wm_wrôe
.
low
)

209 (*
bu„v
->
wrôecb
)(bu„v, bu„v->
cb¨g
);

213 
ªscheduÀ
:

214 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
) != 0)

215 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

218 
îr‹
:

219 (*
bu„v
->
îr‹cb
)(bu„v, 
wh©
, bu„v->
cb¨g
);

220 
	}
}

233 
buf„ªvít
 *

234 
	$buf„ªvít_√w
(
fd
, 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
,

235 
evîr‹cb
 
îr‹cb
, *
cb¨g
)

237 
buf„ªvít
 *
bu„v
;

239 i‡((
bu„v
 = 
	`ˇŒoc
(1, (
buf„ªvít
))Ë=
NULL
)

240  (
NULL
);

242 i‡((
bu„v
->
öput
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

243 
	`‰ì
(
bu„v
);

244  (
NULL
);

247 i‡((
bu„v
->
ouçut
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

248 
	`evbuf„r_‰ì
(
bu„v
->
öput
);

249 
	`‰ì
(
bu„v
);

250  (
NULL
);

253 
	`evít_£t
(&
bu„v
->
ev_ªad
, 
fd
, 
EV_READ
, 
buf„ªvít_ªadcb
, bufev);

254 
	`evít_£t
(&
bu„v
->
ev_wrôe
, 
fd
, 
EV_WRITE
, 
buf„ªvít_wrôecb
, bufev);

256 
	`buf„ªvít_£tcb
(
bu„v
, 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
cb¨g
);

263 
bu„v
->
íabÀd
 = 
EV_WRITE
;

265  (
bu„v
);

266 
	}
}

269 
	$buf„ªvít_£tcb
(
buf„ªvít
 *
bu„v
,

270 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
)

272 
bu„v
->
ªadcb
 =Ñeadcb;

273 
bu„v
->
wrôecb
 = writecb;

274 
bu„v
->
îr‹cb
 =Érrorcb;

276 
bu„v
->
cb¨g
 = cbarg;

277 
	}
}

280 
	$buf„ªvít_£tfd
(
buf„ªvít
 *
bu„v
, 
fd
)

282 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

283 
	`evít_dñ
(&
bu„v
->
ev_wrôe
);

285 
	`evít_£t
(&
bu„v
->
ev_ªad
, 
fd
, 
EV_READ
, 
buf„ªvít_ªadcb
, bufev);

286 
	`evít_£t
(&
bu„v
->
ev_wrôe
, 
fd
, 
EV_WRITE
, 
buf„ªvít_wrôecb
, bufev);

287 i‡(
bu„v
->
ev_ba£
 !
NULL
) {

288 
	`evít_ba£_£t
(
bu„v
->
ev_ba£
, &bu„v->
ev_ªad
);

289 
	`evít_ba£_£t
(
bu„v
->
ev_ba£
, &bu„v->
ev_wrôe
);

293 
	}
}

296 
	$buf„ªvít_¥i‹ôy_£t
(
buf„ªvít
 *
bu„v
, 
¥i‹ôy
)

298 i‡(
	`evít_¥i‹ôy_£t
(&
bu„v
->
ev_ªad
, 
¥i‹ôy
) == -1)

300 i‡(
	`evít_¥i‹ôy_£t
(&
bu„v
->
ev_wrôe
, 
¥i‹ôy
) == -1)

304 
	}
}

309 
	$buf„ªvít_‰ì
(
buf„ªvít
 *
bu„v
)

311 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

312 
	`evít_dñ
(&
bu„v
->
ev_wrôe
);

314 
	`evbuf„r_‰ì
(
bu„v
->
öput
);

315 
	`evbuf„r_‰ì
(
bu„v
->
ouçut
);

317 
	`‰ì
(
bu„v
);

318 
	}
}

326 
	$buf„ªvít_wrôe
(
buf„ªvít
 *
bu„v
, c⁄° *
d©a
, 
size_t
 
size
)

328 
ªs
;

330 
ªs
 = 
	`evbuf„r_add
(
bu„v
->
ouçut
, 
d©a
, 
size
);

332 i‡(
ªs
 == -1)

333  (
ªs
);

336 i‡(
size
 > 0 && (
bu„v
->
íabÀd
 & 
EV_WRITE
))

337 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

339  (
ªs
);

340 
	}
}

343 
	$buf„ªvít_wrôe_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
)

345 
ªs
;

347 
ªs
 = 
	`buf„ªvít_wrôe
(
bu„v
, 
buf
->
buf„r
, buf->
off
);

348 i‡(
ªs
 != -1)

349 
	`evbuf„r_døö
(
buf
, buf->
off
);

351  (
ªs
);

352 
	}
}

354 
size_t


355 
	$buf„ªvít_ªad
(
buf„ªvít
 *
bu„v
, *
d©a
, 
size_t
 
size
)

357 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

359 i‡(
buf
->
off
 < 
size
)

360 
size
 = 
buf
->
off
;

363 
	`mem˝y
(
d©a
, 
buf
->
buf„r
, 
size
);

365 i‡(
size
)

366 
	`evbuf„r_døö
(
buf
, 
size
);

368  (
size
);

369 
	}
}

372 
	$buf„ªvít_íabÀ
(
buf„ªvít
 *
bu„v
, 
evít
)

374 i‡(
evít
 & 
EV_READ
) {

375 i‡(
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
) == -1)

378 i‡(
evít
 & 
EV_WRITE
) {

379 i‡(
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
) == -1)

383 
bu„v
->
íabÀd
 |
evít
;

385 
	}
}

388 
	$buf„ªvít_dißbÀ
(
buf„ªvít
 *
bu„v
, 
evít
)

390 i‡(
evít
 & 
EV_READ
) {

391 i‡(
	`evít_dñ
(&
bu„v
->
ev_ªad
) == -1)

394 i‡(
evít
 & 
EV_WRITE
) {

395 i‡(
	`evít_dñ
(&
bu„v
->
ev_wrôe
) == -1)

399 
bu„v
->
íabÀd
 &~
evít
;

401 
	}
}

408 
	$buf„ªvít_£âimeout
(
buf„ªvít
 *
bu„v
,

409 
timeout_ªad
, 
timeout_wrôe
) {

410 
bu„v
->
timeout_ªad
 =Åimeout_read;

411 
bu„v
->
timeout_wrôe
 =Åimeout_write;

413 i‡(
	`evít_≥ndög
(&
bu„v
->
ev_ªad
, 
EV_READ
, 
NULL
))

414 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, 
timeout_ªad
);

415 i‡(
	`evít_≥ndög
(&
bu„v
->
ev_wrôe
, 
EV_WRITE
, 
NULL
))

416 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, 
timeout_wrôe
);

417 
	}
}

424 
	$buf„ªvít_£tw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

425 
size_t
 
lowm¨k
, size_à
highm¨k
)

427 i‡(
evíts
 & 
EV_READ
) {

428 
bu„v
->
wm_ªad
.
low
 = 
lowm¨k
;

429 
bu„v
->
wm_ªad
.
high
 = 
highm¨k
;

432 i‡(
evíts
 & 
EV_WRITE
) {

433 
bu„v
->
wm_wrôe
.
low
 = 
lowm¨k
;

434 
bu„v
->
wm_wrôe
.
high
 = 
highm¨k
;

438 
	`buf„ªvít_ªad_¥essuª_cb
(
bu„v
->
öput
,

439 0, 
	`EVBUFFER_LENGTH
(
bu„v
->
öput
), bufev);

440 
	}
}

443 
	$buf„ªvít_ba£_£t
(
evít_ba£
 *
ba£
, 
buf„ªvít
 *
bu„v
)

445 
ªs
;

447 
bu„v
->
ev_ba£
 = 
ba£
;

449 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
bu„v
->
ev_ªad
);

450 i‡(
ªs
 == -1)

451  (
ªs
);

453 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
bu„v
->
ev_wrôe
);

454  (
ªs
);

455 
	}
}

	@evdns.c

37 
	~<sys/ty≥s.h
>

38 #ifde‡
HAVE_CONFIG_H


39 
	~"c⁄fig.h
"

42 #ifde‡
DNS_USE_FTIME_FOR_ID


43 
	~<sys/timeb.h
>

46 #i‚de‡
DNS_USE_CPU_CLOCK_FOR_ID


47 #i‚de‡
DNS_USE_GETTIMEOFDAY_FOR_ID


48 #i‚de‡
DNS_USE_OPENSSL_FOR_ID


49 #i‚de‡
DNS_USE_FTIME_FOR_ID


50 #îr‹ 
Mu°
 
c⁄figuª
 
©
 
Àa°
 
⁄e
 
id
 
gíî©i⁄
 
mëhod
.

51 #îr‹ 
PÀa£
 
£e
 
the
 
documíèti⁄
.

58 
	#_GNU_SOURCE


	)

60 #ifde‡
DNS_USE_CPU_CLOCK_FOR_ID


61 #ifde‡
DNS_USE_OPENSSL_FOR_ID


62 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


64 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


65 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


67 
	~<time.h
>

70 #ifde‡
DNS_USE_OPENSSL_FOR_ID


71 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


72 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


74 
	~<›ís¶/ønd.h
>

77 
	#_FORTIFY_SOURCE
 3

	)

79 
	~<°rög.h
>

80 
	~<f˙é.h
>

81 #ifde‡
HAVE_SYS_TIME_H


82 
	~<sys/time.h
>

84 #ifde‡
HAVE_STDINT_H


85 
	~<°döt.h
>

87 
	~<°dlib.h
>

88 
	~<°rög.h
>

89 
	~<î∫o.h
>

90 
	~<as£π.h
>

91 #ifde‡
HAVE_UNISTD_H


92 
	~<uni°d.h
>

94 
	~<limôs.h
>

95 
	~<sys/°©.h
>

96 
	~<˘y≥.h
>

97 
	~<°dio.h
>

98 
	~<°d¨g.h
>

100 
	~"evdns.h
"

101 
	~"evutû.h
"

102 
	~"log.h
"

103 #ifde‡
WIN32


104 
	~<wösock2.h
>

105 
	~<wödows.h
>

106 
	~<ùhÕ≠i.h
>

107 
	~<io.h
>

109 
	~<sys/sockë.h
>

110 
	~<√töë/ö.h
>

111 
	~<¨∑/öë.h
>

114 #ifde‡
HAVE_NETINET_IN6_H


115 
	~<√töë/ö6.h
>

118 
	#EVDNS_LOG_DEBUG
 0

	)

119 
	#EVDNS_LOG_WARN
 1

	)

121 #i‚de‡
HOST_NAME_MAX


122 
	#HOST_NAME_MAX
 255

	)

125 
	~<°dio.h
>

127 #unde‡
MIN


128 
	#MIN
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

130 #ifde‡
__USE_ISOC99B


132 
ev_uöt8_t
 
	tu_ch¨
;

133 
	tuöt
;

135 
	~<evít.h
>

137 
	#u64
 
ev_uöt64_t


	)

138 
	#u32
 
ev_uöt32_t


	)

139 
	#u16
 
ev_uöt16_t


	)

140 
	#u8
 
ev_uöt8_t


	)

142 #ifde‡
WIN32


143 
	#›í
 
_›í


	)

144 
	#ªad
 
_ªad


	)

145 
	#˛o£
 
_˛o£


	)

146 
	#°rdup
 
_°rdup


	)

149 
	#MAX_ADDRS
 32

	)

152 
	#TYPE_A
 
EVDNS_TYPE_A


	)

153 
	#TYPE_CNAME
 5

	)

154 
	#TYPE_PTR
 
EVDNS_TYPE_PTR


	)

155 
	#TYPE_AAAA
 
EVDNS_TYPE_AAAA


	)

157 
	#CLASS_INET
 
EVDNS_CLASS_INET


	)

159 
	sªque°
 {

160 
u8
 *
	mªque°
;

161 
	mªque°_Àn
;

162 
	mªissue_cou¡
;

163 
	mtx_cou¡
;

164 
	mªque°_ty≥
;

165 *
	mu£r_poöãr
;

166 
evdns_ˇŒback_ty≥
 
	mu£r_ˇŒback
;

167 
«me£rvî
 *
	mns
;

170 
	m£¨ch_ödex
;

171 
£¨ch_°©e
 *
	m£¨ch_°©e
;

172 *
	m£¨ch_‹ig«me
;

173 
	m£¨ch_Êags
;

176 
ªque°
 *
	m√xt
, *
	m¥ev
;

178 
evít
 
	mtimeout_evít
;

180 
u16
 
	må™s_id
;

181 
	mªque°_≠≥nded
;

182 
	må™smô_me
;

185 #i‚de‡
HAVE_STRUCT_IN6_ADDR


186 
	sö6_addr
 {

187 
u8
 
	ms6_addr
[16];

191 
	sª∂y
 {

192 
	mty≥
;

193 
	mhave_™swî
;

196 
u32
 
	maddrcou¡
;

197 
u32
 
	maddªs£s
[
MAX_ADDRS
];

198 } 
	ma
;

200 
u32
 
	maddrcou¡
;

201 
ö6_addr
 
	maddªs£s
[
MAX_ADDRS
];

202 } 
	mØØ
;

204 
	m«me
[
HOST_NAME_MAX
];

205 } 
	m±r
;

206 } 
	md©a
;

209 
	s«me£rvî
 {

210 
	msockë
;

211 
u32
 
	maddªss
;

212 
	mÁûed_times
;

213 
	mtimedout
;

214 
evít
 
	mevít
;

216 
«me£rvî
 *
	m√xt
, *
	m¥ev
;

217 
evít
 
	mtimeout_evít
;

220 
	m°©e
;

221 
	mchoked
;

222 
	mwrôe_waôög
;

225 
ªque°
 *
	gªq_hód
 = 
NULL
, *
	gªq_waôög_hód
 = NULL;

226 
«me£rvî
 *
	g£rvî_hód
 = 
NULL
;

230 
	sevdns_£rvî_p‹t
 {

231 
	msockë
;

232 
	mªf˙t
;

233 
	mchoked
;

234 
	m˛osög
;

235 
evdns_ªque°_ˇŒback_‚_ty≥
 
	mu£r_ˇŒback
;

236 *
	mu£r_d©a
;

237 
evít
 
	mevít
;

239 
£rvî_ªque°
 *
	m≥ndög_ª∂õs
;

243 
	s£rvî_ª∂y_ôem
 {

244 
£rvî_ª∂y_ôem
 *
	m√xt
;

245 *
	m«me
;

246 
u16
 
	mty≥
 : 16;

247 
u16
 
	m˛ass
 : 16;

248 
u32
 
	mâl
;

249 
	mis_«me
;

250 
u16
 
	md©Æí
;

251 *
	md©a
;

256 
	s£rvî_ªque°
 {

260 
£rvî_ªque°
 *
	m√xt_≥ndög
;

261 
£rvî_ªque°
 *
	m¥ev_≥ndög
;

263 
u16
 
	må™s_id
;

264 
evdns_£rvî_p‹t
 *
	mp‹t
;

265 
sockaddr_°‹age
 
	maddr
;

266 
sockÀn_t
 
	maddæí
;

268 
	mn_™swî
;

269 
	mn_auth‹ôy
;

270 
	mn_addôi⁄Æ
;

272 
£rvî_ª∂y_ôem
 *
	m™swî
;

273 
£rvî_ª∂y_ôem
 *
	mauth‹ôy
;

274 
£rvî_ª∂y_ôem
 *
	maddôi⁄Æ
;

278 *
	mª•⁄£
;

279 
size_t
 
	mª•⁄£_Àn
;

282 
evdns_£rvî_ªque°
 
	mba£
;

286 
	#OFFSET_OF
(
°
, 
membî
Ë((
off_t
Ë(((*)&((°*)0)->membî)-(*)0))

	)

290 
	#TO_SERVER_REQUEST
(
ba£_±r
) \

291 ((
£rvî_ªque°
*) \

292 (((*)(
ba£_±r
Ë- 
	`OFFSET_OF
(
£rvî_ªque°
, 
ba£
))))

	)

295 
	gglobÆ_good_«me£rvîs
 = 0;

299 
	gglobÆ_ªque°s_öÊight
 = 0;

302 
	gglobÆ_ªque°s_waôög
 = 0;

304 
	gglobÆ_max_ªque°s_öÊight
 = 64;

306 
timevÆ
 
	gglobÆ_timeout
 = {5, 0};

307 
	gglobÆ_max_ªissues
 = 1;

308 
	gglobÆ_max_ªå™smôs
 = 3;

310 
	gglobÆ_max_«me£rvî_timeout
 = 3;

314 c⁄° 
timevÆ
 
	gglobÆ_«me£rvî_timeouts
[] = {{10, 0}, {60, 0}, {300, 0}, {900, 0}, {3600, 0}};

315 c⁄° 
	gglobÆ_«me£rvî_timeouts_Àngth
 = (
globÆ_«me£rvî_timeouts
)/(
timevÆ
);

317 
«me£rvî
 *
«me£rvî_pick
();

318 
evdns_ªque°_ö£π
(
ªque°
 *
ªq
, ªque° **
hód
);

319 
«me£rvî_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
);

320 
evdns_å™smô
();

321 
evdns_ªque°_å™smô
(
ªque°
 *
ªq
);

322 
«me£rvî_£nd_¥obe
(
«me£rvî
 *c⁄° 
ns
);

323 
£¨ch_ªque°_föished
(
ªque°
 *const);

324 
£¨ch_åy_√xt
(
ªque°
 *c⁄° 
ªq
);

325 
£¨ch_ªque°_√w
(
ty≥
, c⁄° *c⁄° 
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
u£r_ˇŒback
, *
u£r_¨g
);

326 
evdns_ªque°s_pump_waôög_queue
();

327 
u16
 
å™ß˘i⁄_id_pick
();

328 
ªque°
 *
ªque°_√w
(
ty≥
, c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

329 
ªque°_submô
(
ªque°
 *c⁄° 
ªq
);

331 
£rvî_ªque°_‰ì
(
£rvî_ªque°
 *
ªq
);

332 
£rvî_ªque°_‰ì_™swîs
(
£rvî_ªque°
 *
ªq
);

333 
£rvî_p‹t_‰ì
(
evdns_£rvî_p‹t
 *
p‹t
);

334 
£rvî_p‹t_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
);

336 
°πoöt
(c⁄° *c⁄° 
°r
);

338 #ifde‡
WIN32


340 
	$œ°_îr‹
(
sock
)

342 
›tvÆ
, 
›tvÆÀn
=(optval);

343 
îr
 = 
	`WSAGëLa°Eº‹
();

344 i‡(
îr
 =
WSAEWOULDBLOCK
 && 
sock
 >= 0) {

345 i‡(
	`gësock›t
(
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
›tvÆ
,

346 &
›tvÆÀn
))

347  
îr
;

348 i‡(
›tvÆ
)

349  
›tvÆ
;

351  
îr
;

353 
	}
}

355 
	$îr‹_is_ógaö
(
îr
)

357  
îr
 =
EAGAIN
 ||Éº =
WSAEWOULDBLOCK
;

358 
	}
}

360 
	$öë_©⁄
(c⁄° *
c
, 
ö_addr
 *
addr
)

362 
ev_uöt32_t
 
r
;

363 i‡(
	`°rcmp
(
c
, "255.255.255.255") == 0) {

364 
addr
->
s_addr
 = 0xffffffffu;

366 
r
 = 
	`öë_addr
(
c
);

367 i‡(
r
 =
INADDR_NONE
)

369 
addr
->
s_addr
 = 
r
;

372 
	}
}

374 
	#œ°_îr‹
(
sock
Ë(
î∫o
)

	)

375 
	#îr‹_is_ógaö
(
îr
Ë(”ºË=
EAGAIN
)

	)

377 
	#CLOSE_SOCKET
(
s
Ë
	`EVUTIL_CLOSESOCKET
(s)

	)

379 
	#ISSPACE
(
c
Ë
	`is•a˚
(()()(c))

	)

380 
	#ISDIGIT
(
c
Ë
	`isdigô
(()()(c))

	)

383 
	$debug_¡ﬂ
(
u32
 
addªss
)

385 
buf
[32];

386 
u32
 
a
 = 
	`¡ohl
(
addªss
);

387 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d",

388 ()(
u8
)((
a
>>24)&0xff),

389 ()(
u8
)((
a
>>16)&0xff),

390 ()(
u8
)((
a
>>8 )&0xff),

391 ()(
u8
)((
a
 )&0xff));

392  
buf
;

393 
	}
}

395 
evdns_debug_log_‚_ty≥
 
	gevdns_log_‚
 = 
NULL
;

398 
	$evdns_£t_log_‚
(
evdns_debug_log_‚_ty≥
 
‚
)

400 
evdns_log_‚
 = 
‚
;

401 
	}
}

403 #ifde‡
__GNUC__


404 
	#EVDNS_LOG_CHECK
 
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)))

	)

406 
	#EVDNS_LOG_CHECK


	)

409 
	$_evdns_log
(
w¨n
, c⁄° *
fmt
, ...Ë
EVDNS_LOG_CHECK
;

411 
	$_evdns_log
(
w¨n
, c⁄° *
fmt
, ...)

413 
va_li°
 
¨gs
;

414 
buf
[512];

415 i‡(!
evdns_log_‚
)

417 
	`va_°¨t
(
¨gs
,
fmt
);

418 
	`evutû_v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

419 
buf
[(buf)-1] = '\0';

420 
	`evdns_log_‚
(
w¨n
, 
buf
);

421 
	`va_íd
(
¨gs
);

422 
	}
}

424 
	#log
 
_evdns_log


	)

429 
ªque°
 *

430 
	$ªque°_föd_‰om_å™s_id
(
u16
 
å™s_id
) {

431 
ªque°
 *
ªq
 = 
ªq_hód
, *c⁄° 
°¨ãd_©
 =Ñeq_head;

433 i‡(
ªq
) {

435 i‡(
ªq
->
å™s_id
 ==Årans_id) Ñeq;

436 
ªq
 =Ñeq->
√xt
;

437 } 
ªq
 !
°¨ãd_©
);

440  
NULL
;

441 
	}
}

446 
	$«me£rvî_¥od_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

447 
«me£rvî
 *c⁄° 
ns
 = («me£rvî *Ë
¨g
;

448 ()
fd
;

449 ()
evíts
;

451 
	`«me£rvî_£nd_¥obe
(
ns
);

452 
	}
}

458 
	$«me£rvî_¥obe_Áûed
(
«me£rvî
 *c⁄° 
ns
) {

459 c⁄° 
timevÆ
 * 
timeout
;

460 (Ë
	`evtimî_dñ
(&
ns
->
timeout_evít
);

461 i‡(
ns
->
°©e
 == 1) {

467 
timeout
 =

468 &
globÆ_«me£rvî_timeouts
[
	`MIN
(
ns
->
Áûed_times
,

469 
globÆ_«me£rvî_timeouts_Àngth
 - 1)];

470 
ns
->
Áûed_times
++;

472 
	`evtimî_£t
(&
ns
->
timeout_evít
, 
«me£rvî_¥od_ˇŒback
,Çs);

473 i‡(
	`evtimî_add
(&
ns
->
timeout_evít
, (
timevÆ
 *Ë
timeout
) < 0) {

474 
	`log
(
EVDNS_LOG_WARN
,

476 
	`debug_¡ﬂ
(
ns
->
addªss
));

479 
	}
}

484 
	$«me£rvî_Áûed
(
«me£rvî
 *c⁄° 
ns
, c⁄° *
msg
) {

485 
ªque°
 *
ªq
, *
°¨ãd_©
;

488 i‡(!
ns
->
°©e
) ;

490 
	`log
(
EVDNS_LOG_WARN
, "Nameserver %s has failed: %s",

491 
	`debug_¡ﬂ
(
ns
->
addªss
), 
msg
);

492 
globÆ_good_«me£rvîs
--;

493 
	`as£π
(
globÆ_good_«me£rvîs
 >= 0);

494 i‡(
globÆ_good_«me£rvîs
 == 0) {

495 
	`log
(
EVDNS_LOG_WARN
, "AllÇameservers have failed");

498 
ns
->
°©e
 = 0;

499 
ns
->
Áûed_times
 = 1;

501 
	`evtimî_£t
(&
ns
->
timeout_evít
, 
«me£rvî_¥od_ˇŒback
,Çs);

502 i‡(
	`evtimî_add
(&
ns
->
timeout_evít
, (
timevÆ
 *Ë&
globÆ_«me£rvî_timeouts
[0]) < 0) {

503 
	`log
(
EVDNS_LOG_WARN
,

505 
	`debug_¡ﬂ
(
ns
->
addªss
));

515 i‡(!
globÆ_good_«me£rvîs
) ;

517 
ªq
 = 
ªq_hód
;

518 
°¨ãd_©
 = 
ªq_hód
;

519 i‡(
ªq
) {

521 i‡(
ªq
->
tx_cou¡
 =0 &&Ñeq->
ns
 ==Çs) {

524 
ªq
->
ns
 = 
	`«me£rvî_pick
();

526 
ªq
 =Ñeq->
√xt
;

527 } 
ªq
 !
°¨ãd_©
);

529 
	}
}

532 
	$«me£rvî_up
(
«me£rvî
 *c⁄° 
ns
) {

533 i‡(
ns
->
°©e
) ;

534 
	`log
(
EVDNS_LOG_WARN
, "Nameserver %s is back up",

535 
	`debug_¡ﬂ
(
ns
->
addªss
));

536 
	`evtimî_dñ
(&
ns
->
timeout_evít
);

537 
ns
->
°©e
 = 1;

538 
ns
->
Áûed_times
 = 0;

539 
ns
->
timedout
 = 0;

540 
globÆ_good_«me£rvîs
++;

541 
	}
}

544 
	$ªque°_å™s_id_£t
(
ªque°
 *c⁄° 
ªq
, c⁄° 
u16
 
å™s_id
) {

545 
ªq
->
å™s_id
 =Årans_id;

546 *((
u16
 *Ë
ªq
->
ªque°
Ë
	`ht⁄s
(
å™s_id
);

547 
	}
}

553 
	$ªque°_föished
(
ªque°
 *c⁄° 
ªq
, ªque° **
hód
) {

554 i‡(
hód
) {

555 i‡(
ªq
->
√xt
 ==Ñeq) {

557 *
hód
 = 
NULL
;

559 
ªq
->
√xt
->
¥ev
 =Ñeq->prev;

560 
ªq
->
¥ev
->
√xt
 =Ñeq->next;

561 i‡(*
hód
 =
ªq
Ë*hód =Ñeq->
√xt
;

565 
	`log
(
EVDNS_LOG_DEBUG
, "RemovingÅimeout forÑequest %lx",

566 (Ë
ªq
);

567 
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

569 
	`£¨ch_ªque°_föished
(
ªq
);

570 
globÆ_ªque°s_öÊight
--;

572 i‡(!
ªq
->
ªque°_≠≥nded
) {

574 
	`‰ì
(
ªq
->
ªque°
);

580 
	`‰ì
(
ªq
);

582 
	`evdns_ªque°s_pump_waôög_queue
();

583 
	}
}

592 
	$ªque°_ªissue
(
ªque°
 *
ªq
) {

593 c⁄° 
«me£rvî
 *c⁄° 
œ°_ns
 = 
ªq
->
ns
;

597 
ªq
->
ns
 = 
	`«me£rvî_pick
();

598 i‡(
ªq
->
ns
 =
œ°_ns
) {

605 
ªq
->
ªissue_cou¡
++;

606 
ªq
->
tx_cou¡
 = 0;

607 
ªq
->
å™smô_me
 = 1;

610 
	}
}

615 
	$evdns_ªque°s_pump_waôög_queue
() {

616 
globÆ_ªque°s_öÊight
 < 
globÆ_max_ªque°s_öÊight
 &&

617 
globÆ_ªque°s_waôög
) {

618 
ªque°
 *
ªq
;

620 
	`as£π
(
ªq_waôög_hód
);

621 i‡(
ªq_waôög_hód
->
√xt
 ==Ñeq_waiting_head) {

623 
ªq
 = 
ªq_waôög_hód
;

624 
ªq_waôög_hód
 = 
NULL
;

626 
ªq
 = 
ªq_waôög_hód
;

627 
ªq
->
√xt
->
¥ev
 =Ñeq->prev;

628 
ªq
->
¥ev
->
√xt
 =Ñeq->next;

629 
ªq_waôög_hód
 = 
ªq
->
√xt
;

632 
globÆ_ªque°s_waôög
--;

633 
globÆ_ªque°s_öÊight
++;

635 
ªq
->
ns
 = 
	`«me£rvî_pick
();

636 
	`ªque°_å™s_id_£t
(
ªq
, 
	`å™ß˘i⁄_id_pick
());

638 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_hód
);

639 
	`evdns_ªque°_å™smô
(
ªq
);

640 
	`evdns_å™smô
();

642 
	}
}

645 
	$ª∂y_ˇŒback
(
ªque°
 *c⁄° 
ªq
, 
u32
 
âl
, u32 
îr
, 
ª∂y
 *reply) {

646 
ªq
->
ªque°_ty≥
) {

647 
TYPE_A
:

648 i‡(
ª∂y
)

649 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_IPv4_A
,

650 
ª∂y
->
d©a
.
a
.
addrcou¡
, 
âl
,

651 
ª∂y
->
d©a
.
a
.
addªs£s
,

652 
ªq
->
u£r_poöãr
);

654 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,Ñeq->
u£r_poöãr
);

656 
TYPE_PTR
:

657 i‡(
ª∂y
) {

658 *
«me
 = 
ª∂y
->
d©a
.
±r
.name;

659 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_PTR
, 1, 
âl
,

660 &
«me
, 
ªq
->
u£r_poöãr
);

662 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,

663 
ªq
->
u£r_poöãr
);

666 
TYPE_AAAA
:

667 i‡(
ª∂y
)

668 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_IPv6_AAAA
,

669 
ª∂y
->
d©a
.
ØØ
.
addrcou¡
, 
âl
,

670 
ª∂y
->
d©a
.
ØØ
.
addªs£s
,

671 
ªq
->
u£r_poöãr
);

673 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,Ñeq->
u£r_poöãr
);

676 
	`as£π
(0);

677 
	}
}

681 
	$ª∂y_h™dÀ
(
ªque°
 *c⁄° 
ªq
, 
u16
 
Êags
, 
u32
 
âl
, 
ª∂y
 *reply) {

682 
îr‹
;

683 c⁄° 
îr‹_codes
[] = {

684 
DNS_ERR_FORMAT
, 
DNS_ERR_SERVERFAILED
, 
DNS_ERR_NOTEXIST
,

685 
DNS_ERR_NOTIMPL
, 
DNS_ERR_REFUSED


688 i‡(
Êags
 & 0x020‡|| !
ª∂y
 || !ª∂y->
have_™swî
) {

690 i‡(
Êags
 & 0x0200) {

691 
îr‹
 = 
DNS_ERR_TRUNCATED
;

693 
u16
 
îr‹_code
 = (
Êags
 & 0x000f) - 1;

694 i‡(
îr‹_code
 > 4) {

695 
îr‹
 = 
DNS_ERR_UNKNOWN
;

697 
îr‹
 = 
îr‹_codes
[
îr‹_code
];

701 
îr‹
) {

702 
DNS_ERR_NOTIMPL
:

703 
DNS_ERR_REFUSED
:

705 i‡(
ªq
->
ªissue_cou¡
 < 
globÆ_max_ªissues
) {

706 
msg
[64];

707 
	`evutû_¢¥ötf
(
msg
, (msg),

709 
îr‹
, 
	`evdns_îr_to_°rög
(error));

710 
	`«me£rvî_Áûed
(
ªq
->
ns
, 
msg
);

711 i‡(!
	`ªque°_ªissue
(
ªq
)) ;

714 
DNS_ERR_SERVERFAILED
:

720 
	`log
(
EVDNS_LOG_DEBUG
, "Gotá SERVERFAILED fromÇameserver %s; "

722 
	`debug_¡ﬂ
(
ªq
->
ns
->
addªss
));

726 
	`«me£rvî_up
(
ªq
->
ns
);

729 i‡(
ªq
->
£¨ch_°©e
 &&Ñeq->
ªque°_ty≥
 !
TYPE_PTR
) {

732 i‡(!
	`£¨ch_åy_√xt
(
ªq
)) {

738 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

744 
	`ª∂y_ˇŒback
(
ªq
, 0, 
îr‹
, 
NULL
);

745 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

748 
	`ª∂y_ˇŒback
(
ªq
, 
âl
, 0, 
ª∂y
);

749 
	`«me£rvî_up
(
ªq
->
ns
);

750 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

752 
	}
}

755 
	$«me_∑r£
(
u8
 *
∑ckë
, 
Àngth
, *
idx
, *
«me_out
, 
«me_out_Àn
) {

756 
«me_íd
 = -1;

757 
j
 = *
idx
;

758 
±r_cou¡
 = 0;

759 
	#GET32
(
x
Ëdÿ{ i‡(
j
 + 4 > 
Àngth
Ë
îr
; 
	`mem˝y
(&
_t32
, 
∑ckë
 + j, 4); j +4; x = 
	`¡ohl
(_t32); } 0)

	)

760 
	#GET16
(
x
Ëdÿ{ i‡(
j
 + 2 > 
Àngth
Ë
îr
; 
	`mem˝y
(&
_t
, 
∑ckë
 + j, 2); j +2; x = 
	`¡ohs
(_t); } 0)

	)

761 
	#GET8
(
x
Ëdÿ{ i‡(
j
 >
Àngth
Ë
îr
; x = 
∑ckë
[j++]; } 0)

	)

763 *
˝
 = 
«me_out
;

764 c⁄° *c⁄° 
íd
 = 
«me_out
 + 
«me_out_Àn
;

773 
u8
 
œbñ_Àn
;

774 i‡(
j
 >
Àngth
)  -1;

775 
	`GET8
(
œbñ_Àn
);

776 i‡(!
œbñ_Àn
) ;

777 i‡(
œbñ_Àn
 & 0xc0) {

778 
u8
 
±r_low
;

779 
	`GET8
(
±r_low
);

780 i‡(
«me_íd
 < 0Ë«me_íd = 
j
;

781 
j
 = ((()
œbñ_Àn
 & 0x3fË<< 8Ë+ 
±r_low
;

783 i‡(
j
 < 0 || j >
Àngth
)  -1;

786 i‡(++
±r_cou¡
 > 
Àngth
)  -1;

789 i‡(
œbñ_Àn
 > 63)  -1;

790 i‡(
˝
 !
«me_out
) {

791 i‡(
˝
 + 1 >
íd
)  -1;

792 *
˝
++ = '.';

794 i‡(
˝
 + 
œbñ_Àn
 >
íd
)  -1;

795 
	`mem˝y
(
˝
, 
∑ckë
 + 
j
, 
œbñ_Àn
);

796 
˝
 +
œbñ_Àn
;

797 
j
 +
œbñ_Àn
;

799 i‡(
˝
 >
íd
)  -1;

800 *
˝
 = '\0';

801 i‡(
«me_íd
 < 0)

802 *
idx
 = 
j
;

804 *
idx
 = 
«me_íd
;

806 
îr
:

808 
	}
}

812 
	$ª∂y_∑r£
(
u8
 *
∑ckë
, 
Àngth
) {

813 
j
 = 0, 
k
 = 0;

814 
u16
 
_t
;

815 
u32
 
_t32
;

816 
tmp_«me
[256], 
cmp_«me
[256];

818 
u16
 
å™s_id
, 
que°i⁄s
, 
™swîs
, 
auth‹ôy
, 
addôi⁄Æ
, 
d©Æígth
;

819 
u16
 
Êags
 = 0;

820 
u32
 
âl
, 
âl_r
 = 0xffffffff;

821 
ª∂y
Ñeply;

822 
ªque°
 *
ªq
 = 
NULL
;

823 
i
;

825 
	`GET16
(
å™s_id
);

826 
	`GET16
(
Êags
);

827 
	`GET16
(
que°i⁄s
);

828 
	`GET16
(
™swîs
);

829 
	`GET16
(
auth‹ôy
);

830 
	`GET16
(
addôi⁄Æ
);

831 (Ë
auth‹ôy
;

832 (Ë
addôi⁄Æ
;

834 
ªq
 = 
	`ªque°_föd_‰om_å™s_id
(
å™s_id
);

835 i‡(!
ªq
)  -1;

837 
	`mem£t
(&
ª∂y
, 0, (reply));

840 i‡(!(
Êags
 & 0x8000))  -1;

841 i‡(
Êags
 & 0x020f) {

843 
îr
;

848 
	#SKIP_NAME
 \

849 dÿ{ 
tmp_«me
[0] = '\0'; \

850 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)\

851 
îr
; \

852 } 0)

	)

853 
	#TEST_NAME
 \

854 dÿ{ 
tmp_«me
[0] = '\0'; \

855 
cmp_«me
[0] = '\0'; \

856 
k
 = 
j
; \

857 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)\

858 
îr
; \

859 i‡(
	`«me_∑r£
(
ªq
->
ªque°
,Ñeq->
ªque°_Àn
, &
k
, 
cmp_«me
, (cmp_name))<0) \

860 
îr
; \

861 i‡(
	`memcmp
(
tmp_«me
, 
cmp_«me
, 
	`°æí
 (tmp_name)) != 0) \

863 } 0)

	)

865 
ª∂y
.
ty≥
 = 
ªq
->
ªque°_ty≥
;

868 
i
 = 0; i < 
que°i⁄s
; ++i) {

872 
TEST_NAME
;

873 
j
 += 4;

874 i‡(
j
 > 
Àngth
Ë
îr
;

881 
i
 = 0; i < 
™swîs
; ++i) {

882 
u16
 
ty≥
, 
˛ass
;

884 
SKIP_NAME
;

885 
	`GET16
(
ty≥
);

886 
	`GET16
(
˛ass
);

887 
	`GET32
(
âl
);

888 
	`GET16
(
d©Æígth
);

890 i‡(
ty≥
 =
TYPE_A
 && 
˛ass
 =
CLASS_INET
) {

891 
addrcou¡
, 
addπoc›y
;

892 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_A
) {

893 
j
 +
d©Æígth
; ;

895 i‡((
d©Æígth
 & 3) != 0)

896 
îr
;

897 
addrcou¡
 = 
d©Æígth
 >> 2;

898 
addπoc›y
 = 
	`MIN
(
MAX_ADDRS
 - 
ª∂y
.
d©a
.
a
.
addrcou¡
, ()addrcount);

900 
âl_r
 = 
	`MIN
—é_r, 
âl
);

902 i‡(
j
 + 4*
addπoc›y
 > 
Àngth
Ë
îr
;

903 
	`mem˝y
(&
ª∂y
.
d©a
.
a
.
addªs£s
[ª∂y.d©a.a.
addrcou¡
],

904 
∑ckë
 + 
j
, 4*
addπoc›y
);

905 
j
 +4*
addπoc›y
;

906 
ª∂y
.
d©a
.
a
.
addrcou¡
 +
addπoc›y
;

907 
ª∂y
.
have_™swî
 = 1;

908 i‡(
ª∂y
.
d©a
.
a
.
addrcou¡
 =
MAX_ADDRS
) ;

909 } i‡(
ty≥
 =
TYPE_PTR
 && 
˛ass
 =
CLASS_INET
) {

910 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_PTR
) {

911 
j
 +
d©Æígth
; ;

913 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
ª∂y
.
d©a
.
±r
.
«me
,

914 (
ª∂y
.
d©a
.
±r
.
«me
))<0)

915 
îr
;

916 
âl_r
 = 
	`MIN
—é_r, 
âl
);

917 
ª∂y
.
have_™swî
 = 1;

919 } i‡(
ty≥
 =
TYPE_AAAA
 && 
˛ass
 =
CLASS_INET
) {

920 
addrcou¡
, 
addπoc›y
;

921 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_AAAA
) {

922 
j
 +
d©Æígth
; ;

924 i‡((
d©Æígth
 & 15) != 0)

925 
îr
;

926 
addrcou¡
 = 
d©Æígth
 >> 4;

927 
addπoc›y
 = 
	`MIN
(
MAX_ADDRS
 - 
ª∂y
.
d©a
.
ØØ
.
addrcou¡
, ()addrcount);

928 
âl_r
 = 
	`MIN
—é_r, 
âl
);

931 i‡(
j
 + 16*
addπoc›y
 > 
Àngth
Ë
îr
;

932 
	`mem˝y
(&
ª∂y
.
d©a
.
ØØ
.
addªs£s
[ª∂y.d©a.ØØ.
addrcou¡
],

933 
∑ckë
 + 
j
, 16*
addπoc›y
);

934 
ª∂y
.
d©a
.
ØØ
.
addrcou¡
 +
addπoc›y
;

935 
j
 +16*
addπoc›y
;

936 
ª∂y
.
have_™swî
 = 1;

937 i‡(
ª∂y
.
d©a
.
ØØ
.
addrcou¡
 =
MAX_ADDRS
) ;

940 
j
 +
d©Æígth
;

944 
	`ª∂y_h™dÀ
(
ªq
, 
Êags
, 
âl_r
, &
ª∂y
);

946 
îr
:

947 i‡(
ªq
)

948 
	`ª∂y_h™dÀ
(
ªq
, 
Êags
, 0, 
NULL
);

950 
	}
}

956 
	$ªque°_∑r£
(
u8
 *
∑ckë
, 
Àngth
, 
evdns_£rvî_p‹t
 *
p‹t
, 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
)

958 
j
 = 0;

959 
u16
 
_t
;

960 
tmp_«me
[256];

962 
i
;

963 
u16
 
å™s_id
, 
Êags
, 
que°i⁄s
, 
™swîs
, 
auth‹ôy
, 
addôi⁄Æ
;

964 
£rvî_ªque°
 *
£rvî_ªq
 = 
NULL
;

967 
	`GET16
(
å™s_id
);

968 
	`GET16
(
Êags
);

969 
	`GET16
(
que°i⁄s
);

970 
	`GET16
(
™swîs
);

971 
	`GET16
(
auth‹ôy
);

972 
	`GET16
(
addôi⁄Æ
);

974 i‡(
Êags
 & 0x8000)  -1;

975 
Êags
 &= 0x0110;

977 
£rvî_ªq
 = 
	`mÆloc
((
£rvî_ªque°
));

978 i‡(
£rvî_ªq
 =
NULL
)  -1;

979 
	`mem£t
(
£rvî_ªq
, 0, (
£rvî_ªque°
));

981 
£rvî_ªq
->
å™s_id
 =Årans_id;

982 
	`mem˝y
(&
£rvî_ªq
->
addr
,áddr, 
addæí
);

983 
£rvî_ªq
->
addæí
 =áddrlen;

985 
£rvî_ªq
->
ba£
.
Êags
 = flags;

986 
£rvî_ªq
->
ba£
.
nque°i⁄s
 = 0;

987 
£rvî_ªq
->
ba£
.
que°i⁄s
 = 
	`mÆloc
((
evdns_£rvî_que°i⁄
 *) * questions);

988 i‡(
£rvî_ªq
->
ba£
.
que°i⁄s
 =
NULL
)

989 
îr
;

991 
i
 = 0; i < 
que°i⁄s
; ++i) {

992 
u16
 
ty≥
, 
˛ass
;

993 
evdns_£rvî_que°i⁄
 *
q
;

994 
«mñí
;

995 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)

996 
îr
;

997 
	`GET16
(
ty≥
);

998 
	`GET16
(
˛ass
);

999 
«mñí
 = 
	`°æí
(
tmp_«me
);

1000 
q
 = 
	`mÆloc
((
evdns_£rvî_que°i⁄
Ë+ 
«mñí
);

1001 i‡(!
q
)

1002 
îr
;

1003 
q
->
ty≥
 =Åype;

1004 
q
->
dns_que°i⁄_˛ass
 = 
˛ass
;

1005 
	`mem˝y
(
q
->
«me
, 
tmp_«me
, 
«mñí
+1);

1006 
£rvî_ªq
->
ba£
.
que°i⁄s
[£rvî_ªq->ba£.
nque°i⁄s
++] = 
q
;

1011 
£rvî_ªq
->
p‹t
 =Öort;

1012 
p‹t
->
ªf˙t
++;

1015 i‡(
Êags
 & 0x7800) {

1016 
	`evdns_£rvî_ªque°_ª•⁄d
(&(
£rvî_ªq
->
ba£
), 
DNS_ERR_NOTIMPL
);

1020 
p‹t
->
	`u£r_ˇŒback
(&(
£rvî_ªq
->
ba£
),Ö‹t->
u£r_d©a
);

1023 
îr
:

1024 i‡(
£rvî_ªq
) {

1025 i‡(
£rvî_ªq
->
ba£
.
que°i⁄s
) {

1026 
i
 = 0; i < 
£rvî_ªq
->
ba£
.
nque°i⁄s
; ++i)

1027 
	`‰ì
(
£rvî_ªq
->
ba£
.
que°i⁄s
[
i
]);

1028 
	`‰ì
(
£rvî_ªq
->
ba£
.
que°i⁄s
);

1030 
	`‰ì
(
£rvî_ªq
);

1034 #unde‡
SKIP_NAME


1035 #unde‡
GET32


1036 #unde‡
GET16


1037 #unde‡
GET8


1038 
	}
}

1040 
u16


1041 
	$deÁu…_å™ß˘i⁄_id_‚
()

1043 
u16
 
å™s_id
;

1044 #ifde‡
DNS_USE_CPU_CLOCK_FOR_ID


1045 
time•ec
 
ts
;

1046 
˛kid
 = -1;

1047 i‡(
˛kid
 == -1) {

1048 
˛kid
 = 
CLOCK_REALTIME
;

1049 #ifde‡
CLOCK_MONOTONIC


1050 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) != -1)

1051 
˛kid
 = 
CLOCK_MONOTONIC
;

1054 i‡(
	`˛ock_gëtime
(
˛kid
, &
ts
) == -1)

1055 
	`evít_îr
(1, "clock_gettime");

1056 
å™s_id
 = 
ts
.
tv_n£c
 & 0xffff;

1059 #ifde‡
DNS_USE_FTIME_FOR_ID


1060 
_timeb
 
tb
;

1061 
	`_·ime
(&
tb
);

1062 
å™s_id
 = 
tb
.
mûlôm
 & 0xffff;

1065 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


1066 
timevÆ
 
tv
;

1067 
	`evutû_gëtimeofday
(&
tv
, 
NULL
);

1068 
å™s_id
 = 
tv
.
tv_u£c
 & 0xffff;

1071 #ifde‡
DNS_USE_OPENSSL_FOR_ID


1072 i‡(
	`RAND_p£udo_byãs
((
u8
 *Ë&
å™s_id
, 2) == -1) {

1080 
	`ab‹t
();

1083  
å™s_id
;

1084 
	}
}

1086 
	$ev_uöt16_t
 (*
å™s_id_fun˘i⁄
)(Ë
deÁu…_å™ß˘i⁄_id_‚
;

1089 
	`evdns_£t_å™ß˘i⁄_id_‚
(
	$ev_uöt16_t
 (*
‚
)())

1091 i‡(
‚
)

1092 
å™s_id_fun˘i⁄
 = 
‚
;

1094 
å™s_id_fun˘i⁄
 = 
deÁu…_å™ß˘i⁄_id_‚
;

1095 
	}
}

1098 
u16


1099 
	$å™ß˘i⁄_id_pick
() {

1101 c⁄° 
ªque°
 *
ªq
 = 
ªq_hód
, *
°¨ãd_©
;

1102 
u16
 
å™s_id
 = 
	`å™s_id_fun˘i⁄
();

1104 i‡(
å™s_id
 == 0xffff) ;

1106 
ªq
 = 
°¨ãd_©
 = 
ªq_hód
;

1107 i‡(
ªq
) {

1109 i‡(
ªq
->
å™s_id
 ==Årans_id) ;

1110 
ªq
 =Ñeq->
√xt
;

1111 } 
ªq
 !
°¨ãd_©
);

1114 i‡(
ªq
 =
°¨ãd_©
Ë 
å™s_id
;

1116 
	}
}

1121 
«me£rvî
 *

1122 
	$«me£rvî_pick
() {

1123 
«me£rvî
 *
°¨ãd_©
 = 
£rvî_hód
, *
picked
;

1124 i‡(!
£rvî_hód
Ë 
NULL
;

1128 i‡(!
globÆ_good_«me£rvîs
) {

1129 
£rvî_hód
 = sîvî_hód->
√xt
;

1130  
£rvî_hód
;

1135 i‡(
£rvî_hód
->
°©e
) {

1137 
picked
 = 
£rvî_hód
;

1138 
£rvî_hód
 = sîvî_hód->
√xt
;

1139  
picked
;

1142 
£rvî_hód
 = sîvî_hód->
√xt
;

1143 i‡(
£rvî_hód
 =
°¨ãd_©
) {

1147 
	`as£π
(
globÆ_good_«me£rvîs
 == 0);

1148 
picked
 = 
£rvî_hód
;

1149 
£rvî_hód
 = sîvî_hód->
√xt
;

1150  
picked
;

1153 
	}
}

1157 
	$«me£rvî_ªad
(
«me£rvî
 *
ns
) {

1158 
u8
 
∑ckë
[1500];

1161 c⁄° 
r
 = 
	`ªcv
(
ns
->
sockë
, 
∑ckë
, (packet), 0);

1162 i‡(
r
 < 0) {

1163 
îr
 = 
	`œ°_îr‹
(
ns
->
sockë
);

1164 i‡(
	`îr‹_is_ógaö
(
îr
)) ;

1165 
	`«me£rvî_Áûed
(
ns
, 
	`°ªº‹
(
îr
));

1168 
ns
->
timedout
 = 0;

1169 
	`ª∂y_∑r£
(
∑ckë
, 
r
);

1171 
	}
}

1176 
	$£rvî_p‹t_ªad
(
evdns_£rvî_p‹t
 *
s
) {

1177 
u8
 
∑ckë
[1500];

1178 
sockaddr_°‹age
 
addr
;

1179 
sockÀn_t
 
addæí
;

1180 
r
;

1183 
addæí
 = (
sockaddr_°‹age
);

1184 
r
 = 
	`ªcv‰om
(
s
->
sockë
, 
∑ckë
, (packet), 0,

1185 (
sockaddr
*Ë&
addr
, &
addæí
);

1186 i‡(
r
 < 0) {

1187 
îr
 = 
	`œ°_îr‹
(
s
->
sockë
);

1188 i‡(
	`îr‹_is_ógaö
(
îr
)) ;

1189 
	`log
(
EVDNS_LOG_WARN
, "Error %s (%d) whileÑeadingÑequest.",

1190 
	`°ªº‹
(
îr
),Érr);

1193 
	`ªque°_∑r£
(
∑ckë
, 
r
, 
s
, (
sockaddr
*Ë&
addr
, 
addæí
);

1195 
	}
}

1199 
	$£rvî_p‹t_Êush
(
evdns_£rvî_p‹t
 *
p‹t
)

1201 
p‹t
->
≥ndög_ª∂õs
) {

1202 
£rvî_ªque°
 *
ªq
 = 
p‹t
->
≥ndög_ª∂õs
;

1203 
r
 = 
	`£ndto
(
p‹t
->
sockë
, 
ªq
->
ª•⁄£
,Ñeq->
ª•⁄£_Àn
, 0,

1204 (
sockaddr
*Ë&
ªq
->
addr
,Ñeq->
addæí
);

1205 i‡(
r
 < 0) {

1206 
îr
 = 
	`œ°_îr‹
(
p‹t
->
sockë
);

1207 i‡(
	`îr‹_is_ógaö
(
îr
))

1209 
	`log
(
EVDNS_LOG_WARN
, "Eº‹ %†(%dËwhûêwrôögÑe•⁄£Åÿp‹t; dr›pög", 
	`°ªº‹
(
îr
),Érr);

1211 i‡(
	`£rvî_ªque°_‰ì
(
ªq
)) {

1218 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1219 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, 
EV_READ
 | 
EV_PERSIST
,

1220 
£rvî_p‹t_ªady_ˇŒback
, 
p‹t
);

1221 i‡(
	`evít_add
(&
p‹t
->
evít
, 
NULL
) < 0) {

1222 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for DNS server.");

1225 
	}
}

1231 
	$«me£rvî_wrôe_waôög
(
«me£rvî
 *
ns
, 
waôög
) {

1232 i‡(
ns
->
wrôe_waôög
 =
waôög
) ;

1234 
ns
->
wrôe_waôög
 = 
waôög
;

1235 (Ë
	`evít_dñ
(&
ns
->
evít
);

1236 
	`evít_£t
(&
ns
->
evít
,Çs->
sockë
, 
EV_READ
 | (
waôög
 ? 
EV_WRITE
 : 0Ë| 
EV_PERSIST
,

1237 
«me£rvî_ªady_ˇŒback
, 
ns
);

1238 i‡(
	`evít_add
(&
ns
->
evít
, 
NULL
) < 0) {

1239 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for %s",

1240 
	`debug_¡ﬂ
(
ns
->
addªss
));

1243 
	}
}

1248 
	$«me£rvî_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1249 
«me£rvî
 *
ns
 = («me£rvî *Ë
¨g
;

1250 ()
fd
;

1252 i‡(
evíts
 & 
EV_WRITE
) {

1253 
ns
->
choked
 = 0;

1254 i‡(!
	`evdns_å™smô
()) {

1255 
	`«me£rvî_wrôe_waôög
(
ns
, 0);

1258 i‡(
evíts
 & 
EV_READ
) {

1259 
	`«me£rvî_ªad
(
ns
);

1261 
	}
}

1266 
	$£rvî_p‹t_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1267 
evdns_£rvî_p‹t
 *
p‹t
 = (evdns_£rvî_p‹à*Ë
¨g
;

1268 (Ë
fd
;

1270 i‡(
evíts
 & 
EV_WRITE
) {

1271 
p‹t
->
choked
 = 0;

1272 
	`£rvî_p‹t_Êush
(
p‹t
);

1274 i‡(
evíts
 & 
EV_READ
) {

1275 
	`£rvî_p‹t_ªad
(
p‹t
);

1277 
	}
}

1281 
	#MAX_LABELS
 128

	)

1283 
	sdn¶abñ_íåy
 { *
	mv
; 
off_t
 
	mpos
; };

1284 
	sdn¶abñ_èbÀ
 {

1285 
	mn_œbñs
;

1287 
dn¶abñ_íåy
 
	mœbñs
[
MAX_LABELS
];

1292 
	$dn¶abñ_èbÀ_öô
(
dn¶abñ_èbÀ
 *
èbÀ
)

1294 
èbÀ
->
n_œbñs
 = 0;

1295 
	}
}

1299 
	$dn¶abñ_˛ór
(
dn¶abñ_èbÀ
 *
èbÀ
)

1301 
i
;

1302 
i
 = 0; i < 
èbÀ
->
n_œbñs
; ++i)

1303 
	`‰ì
(
èbÀ
->
œbñs
[
i
].
v
);

1304 
èbÀ
->
n_œbñs
 = 0;

1305 
	}
}

1310 
	$dn¶abñ_èbÀ_gë_pos
(c⁄° 
dn¶abñ_èbÀ
 *
èbÀ
, c⁄° *
œbñ
)

1312 
i
;

1313 
i
 = 0; i < 
èbÀ
->
n_œbñs
; ++i) {

1314 i‡(!
	`°rcmp
(
œbñ
, 
èbÀ
->
œbñs
[
i
].
v
))

1315  
èbÀ
->
œbñs
[
i
].
pos
;

1318 
	}
}

1322 
	$dn¶abñ_èbÀ_add
(
dn¶abñ_èbÀ
 *
èbÀ
, c⁄° *
œbñ
, 
off_t
 
pos
)

1324 *
v
;

1325 
p
;

1326 i‡(
èbÀ
->
n_œbñs
 =
MAX_LABELS
)

1328 
v
 = 
	`°rdup
(
œbñ
);

1329 i‡(
v
 =
NULL
)

1331 
p
 = 
èbÀ
->
n_œbñs
++;

1332 
èbÀ
->
œbñs
[
p
].
v
 = v;

1333 
èbÀ
->
œbñs
[
p
].
pos
 =Öos;

1336 
	}
}

1349 
off_t


1350 
	$dn¢ame_to_œbñs
(
u8
 *c⁄° 
buf
, 
size_t
 
buf_Àn
, 
off_t
 
j
,

1351 c⁄° *
«me
, c⁄° 
«me_Àn
,

1352 
dn¶abñ_èbÀ
 *
èbÀ
) {

1353 c⁄° *
íd
 = 
«me
 + 
«me_Àn
;

1354 
ªf
 = 0;

1355 
u16
 
_t
;

1357 
	#APPEND16
(
x
) do { \

1358 i‡(
j
 + 2 > (
off_t
)
buf_Àn
) \

1359 
ovîÊow
; \

1360 
_t
 = 
	`ht⁄s
(
x
); \

1361 
	`mem˝y
(
buf
 + 
j
, &
_t
, 2); \

1362 
j
 += 2; \

1363 } 0)

	)

1364 
	#APPEND32
(
x
) do { \

1365 i‡(
j
 + 4 > (
off_t
)
buf_Àn
) \

1366 
ovîÊow
; \

1367 
_t32
 = 
	`ht⁄l
(
x
); \

1368 
	`mem˝y
(
buf
 + 
j
, &
_t32
, 4); \

1369 
j
 += 4; \

1370 } 0)

	)

1372 i‡(
«me_Àn
 > 255)  -2;

1375 c⁄° *c⁄° 
°¨t
 = 
«me
;

1376 i‡(
èbÀ
 && (
ªf
 = 
	`dn¶abñ_èbÀ_gë_pos
—abÀ, 
«me
)) >= 0) {

1377 
	`APPEND16
(
ªf
 | 0xc000);

1378  
j
;

1380 
«me
 = 
	`°rchr
(name, '.');

1381 i‡(!
«me
) {

1382 c⁄° 
œbñ_Àn
 = 
íd
 - 
°¨t
;

1383 i‡(
œbñ_Àn
 > 63)  -1;

1384 i‡((
size_t
)(
j
+
œbñ_Àn
+1Ë> 
buf_Àn
)  -2;

1385 i‡(
èbÀ
Ë
	`dn¶abñ_èbÀ_add
—abÀ, 
°¨t
, 
j
);

1386 
buf
[
j
++] = 
œbñ_Àn
;

1388 
	`mem˝y
(
buf
 + 
j
, 
°¨t
, 
íd
 - start);

1389 
j
 +
íd
 - 
°¨t
;

1393 c⁄° 
œbñ_Àn
 = 
«me
 - 
°¨t
;

1394 i‡(
œbñ_Àn
 > 63)  -1;

1395 i‡((
size_t
)(
j
+
œbñ_Àn
+1Ë> 
buf_Àn
)  -2;

1396 i‡(
èbÀ
Ë
	`dn¶abñ_èbÀ_add
—abÀ, 
°¨t
, 
j
);

1397 
buf
[
j
++] = 
œbñ_Àn
;

1399 
	`mem˝y
(
buf
 + 
j
, 
°¨t
, 
«me
 - start);

1400 
j
 +
«me
 - 
°¨t
;

1402 
«me
++;

1409 i‡(!
j
 || 
buf
[j-1]) buf[j++] = 0;

1410  
j
;

1411 
ovîÊow
:

1413 
	}
}

1419 
	$evdns_ªque°_Àn
(c⁄° 
«me_Àn
) {

1421 
«me_Àn
 + 2 +

1423 
	}
}

1430 
	$evdns_ªque°_d©a_buûd
(c⁄° *c⁄° 
«me
, c⁄° 
«me_Àn
,

1431 c⁄° 
u16
 
å™s_id
, c⁄° u16 
ty≥
, c⁄° u16 
˛ass
,

1432 
u8
 *c⁄° 
buf
, 
size_t
 
buf_Àn
) {

1433 
off_t
 
j
 = 0;

1434 
u16
 
_t
;

1436 
	`APPEND16
(
å™s_id
);

1437 
	`APPEND16
(0x0100);

1438 
	`APPEND16
(1);

1439 
	`APPEND16
(0);

1440 
	`APPEND16
(0);

1441 
	`APPEND16
(0);

1443 
j
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, j, 
«me
, 
«me_Àn
, 
NULL
);

1444 i‡(
j
 < 0) {

1445  ()
j
;

1448 
	`APPEND16
(
ty≥
);

1449 
	`APPEND16
(
˛ass
);

1451  ()
j
;

1452 
ovîÊow
:

1454 
	}
}

1457 
evdns_£rvî_p‹t
 *

1458 
	$evdns_add_£rvî_p‹t
(
sockë
, 
is_t˝
, 
evdns_ªque°_ˇŒback_‚_ty≥
 
cb
, *
u£r_d©a
)

1460 
evdns_£rvî_p‹t
 *
p‹t
;

1461 i‡(!(
p‹t
 = 
	`mÆloc
((
evdns_£rvî_p‹t
))))

1462  
NULL
;

1463 
	`mem£t
(
p‹t
, 0, (
evdns_£rvî_p‹t
));

1465 
	`as£π
(!
is_t˝
);

1466 
p‹t
->
sockë
 = socket;

1467 
p‹t
->
ªf˙t
 = 1;

1468 
p‹t
->
choked
 = 0;

1469 
p‹t
->
˛osög
 = 0;

1470 
p‹t
->
u£r_ˇŒback
 = 
cb
;

1471 
p‹t
->
u£r_d©a
 = user_data;

1472 
p‹t
->
≥ndög_ª∂õs
 = 
NULL
;

1474 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, 
EV_READ
 | 
EV_PERSIST
,

1475 
£rvî_p‹t_ªady_ˇŒback
, 
p‹t
);

1476 
	`evít_add
(&
p‹t
->
evít
, 
NULL
);

1477  
p‹t
;

1478 
	}
}

1482 
	$evdns_˛o£_£rvî_p‹t
(
evdns_£rvî_p‹t
 *
p‹t
)

1484 i‡(--
p‹t
->
ªf˙t
 == 0)

1485 
	`£rvî_p‹t_‰ì
(
p‹t
);

1486 
p‹t
->
˛osög
 = 1;

1487 
	}
}

1491 
	$evdns_£rvî_ªque°_add_ª∂y
(
evdns_£rvî_ªque°
 *
_ªq
, 
£˘i⁄
, c⁄° *
«me
, 
ty≥
, 
˛ass
, 
âl
, 
d©Æí
, 
is_«me
, c⁄° *
d©a
)

1493 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1494 
£rvî_ª∂y_ôem
 **
ôemp
, *
ôem
;

1495 *
cou¡p
;

1497 i‡(
ªq
->
ª•⁄£
)

1500 
£˘i⁄
) {

1501 
EVDNS_ANSWER_SECTION
:

1502 
ôemp
 = &
ªq
->
™swî
;

1503 
cou¡p
 = &
ªq
->
n_™swî
;

1505 
EVDNS_AUTHORITY_SECTION
:

1506 
ôemp
 = &
ªq
->
auth‹ôy
;

1507 
cou¡p
 = &
ªq
->
n_auth‹ôy
;

1509 
EVDNS_ADDITIONAL_SECTION
:

1510 
ôemp
 = &
ªq
->
addôi⁄Æ
;

1511 
cou¡p
 = &
ªq
->
n_addôi⁄Æ
;

1516 *
ôemp
) {

1517 
ôemp
 = &((*ôemp)->
√xt
);

1519 
ôem
 = 
	`mÆloc
((
£rvî_ª∂y_ôem
));

1520 i‡(!
ôem
)

1522 
ôem
->
√xt
 = 
NULL
;

1523 i‡(!(
ôem
->
«me
 = 
	`°rdup
(name))) {

1524 
	`‰ì
(
ôem
);

1527 
ôem
->
ty≥
 =Åype;

1528 
ôem
->
dns_que°i⁄_˛ass
 = 
˛ass
;

1529 
ôem
->
âl
 =Åtl;

1530 
ôem
->
is_«me
 = is_name != 0;

1531 
ôem
->
d©Æí
 = 0;

1532 
ôem
->
d©a
 = 
NULL
;

1533 i‡(
d©a
) {

1534 i‡(
ôem
->
is_«me
) {

1535 i‡(!(
ôem
->
d©a
 = 
	`°rdup
(data))) {

1536 
	`‰ì
(
ôem
->
«me
);

1537 
	`‰ì
(
ôem
);

1540 
ôem
->
d©Æí
 = (
u16
)-1;

1542 i‡(!(
ôem
->
d©a
 = 
	`mÆloc
(
d©Æí
))) {

1543 
	`‰ì
(
ôem
->
«me
);

1544 
	`‰ì
(
ôem
);

1547 
ôem
->
d©Æí
 = datalen;

1548 
	`mem˝y
(
ôem
->
d©a
, d©a, 
d©Æí
);

1552 *
ôemp
 = 
ôem
;

1553 ++(*
cou¡p
);

1555 
	}
}

1559 
	$evdns_£rvî_ªque°_add_a_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
)

1561  
	`evdns_£rvî_ªque°_add_ª∂y
(

1562 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_A
, 
CLASS_INET
,

1563 
âl
, 
n
*4, 0, 
addrs
);

1564 
	}
}

1568 
	$evdns_£rvî_ªque°_add_ØØ_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
)

1570  
	`evdns_£rvî_ªque°_add_ª∂y
(

1571 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_AAAA
, 
CLASS_INET
,

1572 
âl
, 
n
*16, 0, 
addrs
);

1573 
	}
}

1577 
	$evdns_£rvî_ªque°_add_±r_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
ö_addr
 *
ö
, c⁄° *
öaddr_«me
, c⁄° *
ho°«me
, 
âl
)

1579 
u32
 
a
;

1580 
buf
[32];

1581 
	`as£π
(
ö
 || 
öaddr_«me
);

1582 
	`as£π
(!(
ö
 && 
öaddr_«me
));

1583 i‡(
ö
) {

1584 
a
 = 
	`¡ohl
(
ö
->
s_addr
);

1585 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d.in-addr.arpa",

1586 ()(
u8
)((
a
 )&0xff),

1587 ()(
u8
)((
a
>>8 )&0xff),

1588 ()(
u8
)((
a
>>16)&0xff),

1589 ()(
u8
)((
a
>>24)&0xff));

1590 
öaddr_«me
 = 
buf
;

1592  
	`evdns_£rvî_ªque°_add_ª∂y
(

1593 
ªq
, 
EVDNS_ANSWER_SECTION
, 
öaddr_«me
, 
TYPE_PTR
, 
CLASS_INET
,

1594 
âl
, -1, 1, 
ho°«me
);

1595 
	}
}

1599 
	$evdns_£rvî_ªque°_add_˙ame_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, c⁄° *
˙ame
, 
âl
)

1601  
	`evdns_£rvî_ªque°_add_ª∂y
(

1602 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_CNAME
, 
CLASS_INET
,

1603 
âl
, -1, 1, 
˙ame
);

1604 
	}
}

1608 
	$evdns_£rvî_ªque°_f‹m©_ª•⁄£
(
£rvî_ªque°
 *
ªq
, 
îr
)

1610 
buf
[1500];

1611 
size_t
 
buf_Àn
 = (
buf
);

1612 
off_t
 
j
 = 0, 
r
;

1613 
u16
 
_t
;

1614 
u32
 
_t32
;

1615 
i
;

1616 
u16
 
Êags
;

1617 
dn¶abñ_èbÀ
 
èbÀ
;

1619 i‡(
îr
 < 0 ||Érr > 15)  -1;

1623 
Êags
 = 
ªq
->
ba£
.flags;

1624 
Êags
 |(0x8000 | 
îr
);

1626 
	`dn¶abñ_èbÀ_öô
(&
èbÀ
);

1627 
	`APPEND16
(
ªq
->
å™s_id
);

1628 
	`APPEND16
(
Êags
);

1629 
	`APPEND16
(
ªq
->
ba£
.
nque°i⁄s
);

1630 
	`APPEND16
(
ªq
->
n_™swî
);

1631 
	`APPEND16
(
ªq
->
n_auth‹ôy
);

1632 
	`APPEND16
(
ªq
->
n_addôi⁄Æ
);

1635 
i
=0; i < 
ªq
->
ba£
.
nque°i⁄s
; ++i) {

1636 c⁄° *
s
 = 
ªq
->
ba£
.
que°i⁄s
[
i
]->
«me
;

1637 
j
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, j, 
s
, 
	`°æí
(s), &
èbÀ
);

1638 i‡(
j
 < 0) {

1639 
	`dn¶abñ_˛ór
(&
èbÀ
);

1640  (Ë
j
;

1642 
	`APPEND16
(
ªq
->
ba£
.
que°i⁄s
[
i
]->
ty≥
);

1643 
	`APPEND16
(
ªq
->
ba£
.
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
);

1647 
i
=0; i<3; ++i) {

1648 
£rvî_ª∂y_ôem
 *
ôem
;

1649 i‡(
i
==0)

1650 
ôem
 = 
ªq
->
™swî
;

1651 i‡(
i
==1)

1652 
ôem
 = 
ªq
->
auth‹ôy
;

1654 
ôem
 = 
ªq
->
addôi⁄Æ
;

1655 
ôem
) {

1656 
r
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, 
j
, 
ôem
->
«me
, 
	`°æí
(ôem->«me), &
èbÀ
);

1657 i‡(
r
 < 0)

1658 
ovîÊow
;

1659 
j
 = 
r
;

1661 
	`APPEND16
(
ôem
->
ty≥
);

1662 
	`APPEND16
(
ôem
->
dns_que°i⁄_˛ass
);

1663 
	`APPEND32
(
ôem
->
âl
);

1664 i‡(
ôem
->
is_«me
) {

1665 
off_t
 
Àn_idx
 = 
j
, 
«me_°¨t
;

1666 
j
 += 2;

1667 
«me_°¨t
 = 
j
;

1668 
r
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, 
j
, 
ôem
->
d©a
, 
	`°æí
(ôem->d©a), &
èbÀ
);

1669 i‡(
r
 < 0)

1670 
ovîÊow
;

1671 
j
 = 
r
;

1672 
_t
 = 
	`ht⁄s
–(Ë(
j
-
«me_°¨t
) );

1673 
	`mem˝y
(
buf
+
Àn_idx
, &
_t
, 2);

1675 
	`APPEND16
(
ôem
->
d©Æí
);

1676 i‡(
j
+
ôem
->
d©Æí
 > (
off_t
)
buf_Àn
)

1677 
ovîÊow
;

1678 
	`mem˝y
(
buf
+
j
, 
ôem
->
d©a
, iãm->
d©Æí
);

1679 
j
 +
ôem
->
d©Æí
;

1681 
ôem
 = iãm->
√xt
;

1685 i‡(
j
 > 512) {

1686 
ovîÊow
:

1687 
j
 = 512;

1688 
buf
[3] |= 0x02;

1691 
ªq
->
ª•⁄£_Àn
 = 
j
;

1693 i‡(!(
ªq
->
ª•⁄£
 = 
	`mÆloc
‘eq->
ª•⁄£_Àn
))) {

1694 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1695 
	`dn¶abñ_˛ór
(&
èbÀ
);

1698 
	`mem˝y
(
ªq
->
ª•⁄£
, 
buf
,Ñeq->
ª•⁄£_Àn
);

1699 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1700 
	`dn¶abñ_˛ór
(&
èbÀ
);

1702 
	}
}

1706 
	$evdns_£rvî_ªque°_ª•⁄d
(
evdns_£rvî_ªque°
 *
_ªq
, 
îr
)

1708 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1709 
evdns_£rvî_p‹t
 *
p‹t
 = 
ªq
->port;

1710 
r
;

1711 i‡(!
ªq
->
ª•⁄£
) {

1712 i‡((
r
 = 
	`evdns_£rvî_ªque°_f‹m©_ª•⁄£
(
ªq
, 
îr
))<0)

1713  
r
;

1716 
r
 = 
	`£ndto
(
p‹t
->
sockë
, 
ªq
->
ª•⁄£
,Ñeq->
ª•⁄£_Àn
, 0,

1717 (
sockaddr
*Ë&
ªq
->
addr
,Ñeq->
addæí
);

1718 i‡(
r
<0) {

1719 
sock_îr
 = 
	`œ°_îr‹
(
p‹t
->
sockë
);

1720 i‡(! 
	`îr‹_is_ógaö
(
sock_îr
))

1723 i‡(
p‹t
->
≥ndög_ª∂õs
) {

1724 
ªq
->
¥ev_≥ndög
 = 
p‹t
->
≥ndög_ª∂õs
->prev_pending;

1725 
ªq
->
√xt_≥ndög
 = 
p‹t
->
≥ndög_ª∂õs
;

1726 
ªq
->
¥ev_≥ndög
->
√xt_≥ndög
 =

1727 
ªq
->
√xt_≥ndög
->
¥ev_≥ndög
 =Ñeq;

1729 
ªq
->
¥ev_≥ndög
 =Ñeq->
√xt_≥ndög
 =Ñeq;

1730 
p‹t
->
≥ndög_ª∂õs
 = 
ªq
;

1731 
p‹t
->
choked
 = 1;

1733 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1734 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, (p‹t->
˛osög
?0:
EV_READ
Ë| 
EV_WRITE
 | 
EV_PERSIST
, 
£rvî_p‹t_ªady_ˇŒback
,Öort);

1736 i‡(
	`evít_add
(&
p‹t
->
evít
, 
NULL
) < 0) {

1737 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for DNS server");

1744 i‡(
	`£rvî_ªque°_‰ì
(
ªq
))

1747 i‡(
p‹t
->
≥ndög_ª∂õs
)

1748 
	`£rvî_p‹t_Êush
(
p‹t
);

1751 
	}
}

1755 
	$£rvî_ªque°_‰ì_™swîs
(
£rvî_ªque°
 *
ªq
)

1757 
£rvî_ª∂y_ôem
 *
vi˘im
, *
√xt
, **
li°
;

1758 
i
;

1759 
i
 = 0; i < 3; ++i) {

1760 i‡(
i
==0)

1761 
li°
 = &
ªq
->
™swî
;

1762 i‡(
i
==1)

1763 
li°
 = &
ªq
->
auth‹ôy
;

1765 
li°
 = &
ªq
->
addôi⁄Æ
;

1767 
vi˘im
 = *
li°
;

1768 
vi˘im
) {

1769 
√xt
 = 
vi˘im
->next;

1770 
	`‰ì
(
vi˘im
->
«me
);

1771 i‡(
vi˘im
->
d©a
)

1772 
	`‰ì
(
vi˘im
->
d©a
);

1773 
	`‰ì
(
vi˘im
);

1774 
vi˘im
 = 
√xt
;

1776 *
li°
 = 
NULL
;

1778 
	}
}

1783 
	$£rvî_ªque°_‰ì
(
£rvî_ªque°
 *
ªq
)

1785 
i
, 
rc
=1;

1786 i‡(
ªq
->
ba£
.
que°i⁄s
) {

1787 
i
 = 0; i < 
ªq
->
ba£
.
nque°i⁄s
; ++i)

1788 
	`‰ì
(
ªq
->
ba£
.
que°i⁄s
[
i
]);

1789 
	`‰ì
(
ªq
->
ba£
.
que°i⁄s
);

1792 i‡(
ªq
->
p‹t
) {

1793 i‡(
ªq
->
p‹t
->
≥ndög_ª∂õs
 ==Ñeq) {

1794 i‡(
ªq
->
√xt_≥ndög
)

1795 
ªq
->
p‹t
->
≥ndög_ª∂õs
 =Ñeq->
√xt_≥ndög
;

1797 
ªq
->
p‹t
->
≥ndög_ª∂õs
 = 
NULL
;

1799 
rc
 = --
ªq
->
p‹t
->
ªf˙t
;

1802 i‡(
ªq
->
ª•⁄£
) {

1803 
	`‰ì
(
ªq
->
ª•⁄£
);

1806 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1808 i‡(
ªq
->
√xt_≥ndög
 &&Ñeq->next_pending !=Ñeq) {

1809 
ªq
->
√xt_≥ndög
->
¥ev_≥ndög
 =Ñeq->prev_pending;

1810 
ªq
->
¥ev_≥ndög
->
√xt_≥ndög
 =Ñeq->next_pending;

1813 i‡(
rc
 == 0) {

1814 
	`£rvî_p‹t_‰ì
(
ªq
->
p‹t
);

1815 
	`‰ì
(
ªq
);

1818 
	`‰ì
(
ªq
);

1820 
	}
}

1824 
	$£rvî_p‹t_‰ì
(
evdns_£rvî_p‹t
 *
p‹t
)

1826 
	`as£π
(
p‹t
);

1827 
	`as£π
(!
p‹t
->
ªf˙t
);

1828 
	`as£π
(!
p‹t
->
≥ndög_ª∂õs
);

1829 i‡(
p‹t
->
sockë
 > 0) {

1830 
	`CLOSE_SOCKET
(
p‹t
->
sockë
);

1831 
p‹t
->
sockë
 = -1;

1833 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1835 
	}
}

1839 
	$evdns_£rvî_ªque°_dr›
(
evdns_£rvî_ªque°
 *
_ªq
)

1841 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1842 
	`£rvî_ªque°_‰ì
(
ªq
);

1844 
	}
}

1848 
	$evdns_£rvî_ªque°_gë_ªque°ög_addr
(
evdns_£rvî_ªque°
 *
_ªq
, 
sockaddr
 *
ß
, 
addr_Àn
)

1850 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1851 i‡(
addr_Àn
 < ()
ªq
->
addæí
)

1853 
	`mem˝y
(
ß
, &(
ªq
->
addr
),Ñeq->
addæí
);

1854  
ªq
->
addæí
;

1855 
	}
}

1857 #unde‡
APPEND16


1858 #unde‡
APPEND32


1863 
	$evdns_ªque°_timeout_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1864 
ªque°
 *c⁄° 
ªq
 = (ªque° *Ë
¨g
;

1865 (Ë
fd
;

1866 (Ë
evíts
;

1868 
	`log
(
EVDNS_LOG_DEBUG
, "Reque° %lxÅimed out", (Ë
¨g
);

1870 
ªq
->
ns
->
timedout
++;

1871 i‡(
ªq
->
ns
->
timedout
 > 
globÆ_max_«me£rvî_timeout
) {

1872 
ªq
->
ns
->
timedout
 = 0;

1873 
	`«me£rvî_Áûed
(
ªq
->
ns
, "requestÅimed out.");

1876 (Ë
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

1877 i‡(
ªq
->
tx_cou¡
 >
globÆ_max_ªå™smôs
) {

1879 
	`ª∂y_ˇŒback
(
ªq
, 0, 
DNS_ERR_TIMEOUT
, 
NULL
);

1880 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

1883 
	`evdns_ªque°_å™smô
(
ªq
);

1885 
	}
}

1894 
	$evdns_ªque°_å™smô_to
(
ªque°
 *
ªq
, 
«me£rvî
 *
£rvî
) {

1895 c⁄° 
r
 = 
	`£nd
(
£rvî
->
sockë
, 
ªq
->
ªque°
,Ñeq->
ªque°_Àn
, 0);

1896 i‡(
r
 < 0) {

1897 
îr
 = 
	`œ°_îr‹
(
£rvî
->
sockë
);

1898 i‡(
	`îr‹_is_ógaö
(
îr
))  1;

1899 
	`«me£rvî_Áûed
(
ªq
->
ns
, 
	`°ªº‹
(
îr
));

1901 } i‡(
r
 !()
ªq
->
ªque°_Àn
) {

1906 
	}
}

1915 
	$evdns_ªque°_å™smô
(
ªque°
 *
ªq
) {

1916 
ªtcode
 = 0, 
r
;

1920 
ªq
->
å™smô_me
 = 1;

1921 i‡(
ªq
->
å™s_id
 =0xffffË
	`ab‹t
();

1923 i‡(
ªq
->
ns
->
choked
) {

1929 
r
 = 
	`evdns_ªque°_å™smô_to
(
ªq
,Ñeq->
ns
);

1930 
r
) {

1933 
ªq
->
ns
->
choked
 = 1;

1934 
	`«me£rvî_wrôe_waôög
(
ªq
->
ns
, 1);

1938 
ªtcode
 = 1;

1942 
	`log
(
EVDNS_LOG_DEBUG
,

1943 "SëtögÅimeouàf‹Ñeque° %lx", (Ë
ªq
);

1944 
	`evtimî_£t
(&
ªq
->
timeout_evít
, 
evdns_ªque°_timeout_ˇŒback
,Ñeq);

1945 i‡(
	`evtimî_add
(&
ªq
->
timeout_evít
, &
globÆ_timeout
) < 0) {

1946 
	`log
(
EVDNS_LOG_WARN
,

1948 (Ë
ªq
);

1951 
ªq
->
tx_cou¡
++;

1952 
ªq
->
å™smô_me
 = 0;

1953  
ªtcode
;

1955 
	}
}

1958 
	$«me£rvî_¥obe_ˇŒback
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
, *
addªs£s
, *
¨g
) {

1959 
«me£rvî
 *c⁄° 
ns
 = («me£rvî *Ë
¨g
;

1960 (Ë
ty≥
;

1961 (Ë
cou¡
;

1962 (Ë
âl
;

1963 (Ë
addªs£s
;

1965 i‡(
ªsu…
 =
DNS_ERR_NONE
 ||Ñesu… =
DNS_ERR_NOTEXIST
) {

1967 
	`«me£rvî_up
(
ns
);

1968 } 
	`«me£rvî_¥obe_Áûed
(
ns
);

1969 
	}
}

1972 
	$«me£rvî_£nd_¥obe
(
«me£rvî
 *c⁄° 
ns
) {

1973 
ªque°
 *
ªq
;

1977 
	`log
(
EVDNS_LOG_DEBUG
, "SídögÖrobêtÿ%s", 
	`debug_¡ﬂ
(
ns
->
addªss
));

1979 
ªq
 = 
	`ªque°_√w
(
TYPE_A
, "www.googÀ.com", 
DNS_QUERY_NO_SEARCH
, 
«me£rvî_¥obe_ˇŒback
, 
ns
);

1980 i‡(!
ªq
) ;

1982 
	`ªque°_å™s_id_£t
(
ªq
, 
	`å™ß˘i⁄_id_pick
());

1983 
ªq
->
ns
 =Çs;

1984 
	`ªque°_submô
(
ªq
);

1985 
	}
}

1991 
	$evdns_å™smô
() {

1992 
did_åy_to_å™smô
 = 0;

1994 i‡(
ªq_hód
) {

1995 
ªque°
 *c⁄° 
°¨ãd_©
 = 
ªq_hód
, *
ªq
 =Ñeq_head;

1998 i‡(
ªq
->
å™smô_me
) {

1999 
did_åy_to_å™smô
 = 1;

2000 
	`evdns_ªque°_å™smô
(
ªq
);

2003 
ªq
 =Ñeq->
√xt
;

2004 } 
ªq
 !
°¨ãd_©
);

2007  
did_åy_to_å™smô
;

2008 
	}
}

2012 
	$evdns_cou¡_«me£rvîs
()

2014 c⁄° 
«me£rvî
 *
£rvî
 = 
£rvî_hód
;

2015 
n
 = 0;

2016 i‡(!
£rvî
)

2019 ++
n
;

2020 
£rvî
 = sîvî->
√xt
;

2021 } 
£rvî
 !
£rvî_hód
);

2022  
n
;

2023 
	}
}

2027 
	$evdns_˛ór_«me£rvîs_™d_su•íd
()

2029 
«me£rvî
 *
£rvî
 = 
£rvî_hód
, *
°¨ãd_©
 = server_head;

2030 
ªque°
 *
ªq
 = 
ªq_hód
, *
ªq_°¨ãd_©
 =Ñeq_head;

2032 i‡(!
£rvî
)

2035 
«me£rvî
 *
√xt
 = 
£rvî
->next;

2036 (Ë
	`evít_dñ
(&
£rvî
->
evít
);

2037 i‡(
	`evtimî_öôülized
(&
£rvî
->
timeout_evít
))

2038 (Ë
	`evtimî_dñ
(&
£rvî
->
timeout_evít
);

2039 i‡(
£rvî
->
sockë
 >= 0)

2040 
	`CLOSE_SOCKET
(
£rvî
->
sockë
);

2041 
	`‰ì
(
£rvî
);

2042 i‡(
√xt
 =
°¨ãd_©
)

2044 
£rvî
 = 
√xt
;

2046 
£rvî_hód
 = 
NULL
;

2047 
globÆ_good_«me£rvîs
 = 0;

2049 
ªq
) {

2050 
ªque°
 *
√xt
 = 
ªq
->next;

2051 
ªq
->
tx_cou¡
 =Ñeq->
ªissue_cou¡
 = 0;

2052 
ªq
->
ns
 = 
NULL
;

2054 (Ë
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

2055 
ªq
->
å™s_id
 = 0;

2056 
ªq
->
å™smô_me
 = 0;

2058 
globÆ_ªque°s_waôög
++;

2059 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_waôög_hód
);

2064 
ªq_waôög_hód
 =Ñeq_waôög_hód->
¥ev
;

2066 i‡(
√xt
 =
ªq_°¨ãd_©
)

2068 
ªq
 = 
√xt
;

2070 
ªq_hód
 = 
NULL
;

2071 
globÆ_ªque°s_öÊight
 = 0;

2074 
	}
}

2079 
	$evdns_ªsume
()

2081 
	`evdns_ªque°s_pump_waôög_queue
();

2083 
	}
}

2086 
	$_evdns_«me£rvî_add_im∂
(
addªss
, 
p‹t
) {

2089 c⁄° 
«me£rvî
 *
£rvî
 = 
£rvî_hód
, *c⁄° 
°¨ãd_©
 = server_head;

2090 
«me£rvî
 *
ns
;

2091 
sockaddr_ö
 
sö
;

2092 
îr
 = 0;

2093 i‡(
£rvî
) {

2095 i‡(
£rvî
->
addªss
 ==áddress)  3;

2096 
£rvî
 = sîvî->
√xt
;

2097 } 
£rvî
 !
°¨ãd_©
);

2100 
ns
 = (
«me£rvî
 *Ë
	`mÆloc
((nameserver));

2101 i‡(!
ns
)  -1;

2103 
	`mem£t
(
ns
, 0, (
«me£rvî
));

2105 
ns
->
sockë
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

2106 i‡(
ns
->
sockë
 < 0Ë{ 
îr
 = 1; 
out1
; }

2107 
	`evutû_make_sockë_n⁄blockög
(
ns
->
sockë
);

2108 
sö
.
sö_addr
.
s_addr
 = 
addªss
;

2109 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

2110 
sö
.
sö_Ámûy
 = 
AF_INET
;

2111 i‡(
	`c⁄√˘
(
ns
->
sockë
, (
sockaddr
 *Ë&
sö
, (sin)) != 0) {

2112 
îr
 = 2;

2113 
out2
;

2116 
ns
->
addªss
 =áddress;

2117 
ns
->
°©e
 = 1;

2118 
	`evít_£t
(&
ns
->
evít
,Çs->
sockë
, 
EV_READ
 | 
EV_PERSIST
, 
«me£rvî_ªady_ˇŒback
,Çs);

2119 i‡(
	`evít_add
(&
ns
->
evít
, 
NULL
) < 0) {

2120 
îr
 = 2;

2121 
out2
;

2124 
	`log
(
EVDNS_LOG_DEBUG
, "AddedÇame£rvî %s", 
	`debug_¡ﬂ
(
addªss
));

2127 i‡(!
£rvî_hód
) {

2128 
ns
->
√xt
 =Çs->
¥ev
 =Çs;

2129 
£rvî_hód
 = 
ns
;

2131 
ns
->
√xt
 = 
£rvî_hód
->next;

2132 
ns
->
¥ev
 = 
£rvî_hód
;

2133 
£rvî_hód
->
√xt
 = 
ns
;

2134 i‡(
£rvî_hód
->
¥ev
 == server_head) {

2135 
£rvî_hód
->
¥ev
 = 
ns
;

2139 
globÆ_good_«me£rvîs
++;

2143 
out2
:

2144 
	`CLOSE_SOCKET
(
ns
->
sockë
);

2145 
out1
:

2146 
	`‰ì
(
ns
);

2147 
	`log
(
EVDNS_LOG_WARN
, "U«bÀÅÿaddÇame£rvî %s:Éº‹ %d", 
	`debug_¡ﬂ
(
addªss
), 
îr
);

2148  
îr
;

2149 
	}
}

2153 
	$evdns_«me£rvî_add
(
addªss
) {

2154  
	`_evdns_«me£rvî_add_im∂
(
addªss
, 53);

2155 
	}
}

2159 
	$evdns_«me£rvî_ù_add
(c⁄° *
ù_as_°rög
) {

2160 
ö_addr
 
öa
;

2161 
p‹t
;

2162 
buf
[20];

2163 c⁄° *
˝
;

2164 
˝
 = 
	`°rchr
(
ù_as_°rög
, ':');

2165 i‡(! 
˝
) {

2166 
˝
 = 
ù_as_°rög
;

2167 
p‹t
 = 53;

2169 
p‹t
 = 
	`°πoöt
(
˝
+1);

2170 i‡(
p‹t
 < 0 ||Öort > 65535) {

2173 i‡((
˝
-
ù_as_°rög
Ë>()(
buf
)) {

2176 
	`mem˝y
(
buf
, 
ù_as_°rög
, 
˝
-ip_as_string);

2177 
buf
[
˝
-
ù_as_°rög
] = '\0';

2178 
˝
 = 
buf
;

2180 i‡(!
	`öë_©⁄
(
˝
, &
öa
)) {

2183  
	`_evdns_«me£rvî_add_im∂
(
öa
.
s_addr
, 
p‹t
);

2184 
	}
}

2188 
	$evdns_ªque°_ö£π
(
ªque°
 *
ªq
, ªque° **
hód
) {

2189 i‡(!*
hód
) {

2190 *
hód
 = 
ªq
;

2191 
ªq
->
√xt
 =Ñeq->
¥ev
 =Ñeq;

2195 
ªq
->
¥ev
 = (*
hód
)->prev;

2196 
ªq
->
¥ev
->
√xt
 =Ñeq;

2197 
ªq
->
√xt
 = *
hód
;

2198 (*
hód
)->
¥ev
 = 
ªq
;

2199 
	}
}

2202 
	$°rög_num_dŸs
(c⁄° *
s
) {

2203 
cou¡
 = 0;

2204 (
s
 = 
	`°rchr
(s, '.'))) {

2205 
s
++;

2206 
cou¡
++;

2208  
cou¡
;

2209 
	}
}

2211 
ªque°
 *

2212 
	$ªque°_√w
(
ty≥
, c⁄° *
«me
, 
Êags
,

2213 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
u£r_±r
) {

2214 c⁄° 
issuög_now
 =

2215 (
globÆ_ªque°s_öÊight
 < 
globÆ_max_ªque°s_öÊight
) ? 1 : 0;

2217 c⁄° 
«me_Àn
 = 
	`°æí
(
«me
);

2218 c⁄° 
ªque°_max_Àn
 = 
	`evdns_ªque°_Àn
(
«me_Àn
);

2219 c⁄° 
u16
 
å™s_id
 = 
issuög_now
 ? 
	`å™ß˘i⁄_id_pick
() : 0xffff;

2221 
ªque°
 *c⁄° 
ªq
 =

2222 (
ªque°
 *Ë
	`mÆloc
((ªque°Ë+ 
ªque°_max_Àn
);

2223 
æí
;

2224 (Ë
Êags
;

2226 i‡(!
ªq
Ë 
NULL
;

2227 
	`mem£t
(
ªq
, 0, (
ªque°
));

2230 
ªq
->
ªque°
 = ((
u8
 *)Ñeq) + (request);

2232 
ªq
->
ªque°_≠≥nded
 = 1;

2233 
æí
 = 
	`evdns_ªque°_d©a_buûd
(
«me
, 
«me_Àn
, 
å™s_id
,

2234 
ty≥
, 
CLASS_INET
, 
ªq
->
ªque°
, 
ªque°_max_Àn
);

2235 i‡(
æí
 < 0)

2236 
îr1
;

2237 
ªq
->
ªque°_Àn
 = 
æí
;

2238 
ªq
->
å™s_id
 =Årans_id;

2239 
ªq
->
tx_cou¡
 = 0;

2240 
ªq
->
ªque°_ty≥
 = 
ty≥
;

2241 
ªq
->
u£r_poöãr
 = 
u£r_±r
;

2242 
ªq
->
u£r_ˇŒback
 = 
ˇŒback
;

2243 
ªq
->
ns
 = 
issuög_now
 ? 
	`«me£rvî_pick
(Ë: 
NULL
;

2244 
ªq
->
√xt
 =Ñeq->
¥ev
 = 
NULL
;

2246  
ªq
;

2247 
îr1
:

2248 
	`‰ì
(
ªq
);

2249  
NULL
;

2250 
	}
}

2253 
	$ªque°_submô
(
ªque°
 *c⁄° 
ªq
) {

2254 i‡(
ªq
->
ns
) {

2257 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_hód
);

2258 
globÆ_ªque°s_öÊight
++;

2259 
	`evdns_ªque°_å™smô
(
ªq
);

2261 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_waôög_hód
);

2262 
globÆ_ªque°s_waôög
++;

2264 
	}
}

2267 
	$evdns_ªsﬁve_ùv4
(c⁄° *
«me
, 
Êags
,

2268 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2269 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %s", 
«me
);

2270 i‡(
Êags
 & 
DNS_QUERY_NO_SEARCH
) {

2271 
ªque°
 *c⁄° 
ªq
 =

2272 
	`ªque°_√w
(
TYPE_A
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
);

2273 i‡(
ªq
 =
NULL
)

2275 
	`ªque°_submô
(
ªq
);

2278  (
	`£¨ch_ªque°_√w
(
TYPE_A
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
));

2280 
	}
}

2283 
	$evdns_ªsﬁve_ùv6
(c⁄° *
«me
, 
Êags
,

2284 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2285 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %s", 
«me
);

2286 i‡(
Êags
 & 
DNS_QUERY_NO_SEARCH
) {

2287 
ªque°
 *c⁄° 
ªq
 =

2288 
	`ªque°_√w
(
TYPE_AAAA
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
);

2289 i‡(
ªq
 =
NULL
)

2291 
	`ªque°_submô
(
ªq
);

2294  (
	`£¨ch_ªque°_√w
(
TYPE_AAAA
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
));

2296 
	}
}

2298 
	$evdns_ªsﬁve_ªvî£
(
ö_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2299 
buf
[32];

2300 
ªque°
 *
ªq
;

2301 
u32
 
a
;

2302 
	`as£π
(
ö
);

2303 
a
 = 
	`¡ohl
(
ö
->
s_addr
);

2304 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d.in-addr.arpa",

2305 ()(
u8
)((
a
 )&0xff),

2306 ()(
u8
)((
a
>>8 )&0xff),

2307 ()(
u8
)((
a
>>16)&0xff),

2308 ()(
u8
)((
a
>>24)&0xff));

2309 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %†‘evî£)", 
buf
);

2310 
ªq
 = 
	`ªque°_√w
(
TYPE_PTR
, 
buf
, 
Êags
, 
ˇŒback
, 
±r
);

2311 i‡(!
ªq
)  1;

2312 
	`ªque°_submô
(
ªq
);

2314 
	}
}

2316 
	$evdns_ªsﬁve_ªvî£_ùv6
(
ö6_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2318 
buf
[73];

2319 *
˝
;

2320 
ªque°
 *
ªq
;

2321 
i
;

2322 
	`as£π
(
ö
);

2323 
˝
 = 
buf
;

2324 
i
=15; i >= 0; --i) {

2325 
u8
 
byã
 = 
ö
->
s6_addr
[
i
];

2326 *
˝
++ = "0123456789abcdef"[
byã
 & 0x0f];

2327 *
˝
++ = '.';

2328 *
˝
++ = "0123456789abcdef"[
byã
 >> 4];

2329 *
˝
++ = '.';

2331 
	`as£π
(
˝
 + 
	`°æí
("ù6.¨∑"Ë< 
buf
+(buf));

2332 
	`mem˝y
(
˝
, "ù6.¨∑", 
	`°æí
("ip6.arpa")+1);

2333 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %†‘evî£)", 
buf
);

2334 
ªq
 = 
	`ªque°_√w
(
TYPE_PTR
, 
buf
, 
Êags
, 
ˇŒback
, 
±r
);

2335 i‡(!
ªq
)  1;

2336 
	`ªque°_submô
(
ªq
);

2338 
	}
}

2353 
	s£¨ch_domaö
 {

2354 
	mÀn
;

2355 
£¨ch_domaö
 *
	m√xt
;

2359 
	s£¨ch_°©e
 {

2360 
	mªfcou¡
;

2361 
	mndŸs
;

2362 
	mnum_domaös
;

2363 
£¨ch_domaö
 *
	mhód
;

2366 
£¨ch_°©e
 *
	gglobÆ_£¨ch_°©e
 = 
NULL
;

2369 
	$£¨ch_°©e_de¸ef
(
£¨ch_°©e
 *c⁄° 
°©e
) {

2370 i‡(!
°©e
) ;

2371 
°©e
->
ªfcou¡
--;

2372 i‡(!
°©e
->
ªfcou¡
) {

2373 
£¨ch_domaö
 *
√xt
, *
dom
;

2374 
dom
 = 
°©e
->
hód
; dom; dom = 
√xt
) {

2375 
√xt
 = 
dom
->next;

2376 
	`‰ì
(
dom
);

2378 
	`‰ì
(
°©e
);

2380 
	}
}

2382 
£¨ch_°©e
 *

2383 
	$£¨ch_°©e_√w
() {

2384 
£¨ch_°©e
 *
°©e
 = (£¨ch_°©ê*Ë
	`mÆloc
((search_state));

2385 i‡(!
°©e
Ë 
NULL
;

2386 
	`mem£t
(
°©e
, 0, (
£¨ch_°©e
));

2387 
°©e
->
ªfcou¡
 = 1;

2388 
°©e
->
ndŸs
 = 1;

2390  
°©e
;

2391 
	}
}

2394 
	$£¨ch_po°fix_˛ór
() {

2395 
	`£¨ch_°©e_de¸ef
(
globÆ_£¨ch_°©e
);

2397 
globÆ_£¨ch_°©e
 = 
	`£¨ch_°©e_√w
();

2398 
	}
}

2402 
	$evdns_£¨ch_˛ór
() {

2403 
	`£¨ch_po°fix_˛ór
();

2404 
	}
}

2407 
	$£¨ch_po°fix_add
(c⁄° *
domaö
) {

2408 
domaö_Àn
;

2409 
£¨ch_domaö
 *
sdomaö
;

2410 
domaö
[0] == '.') domain++;

2411 
domaö_Àn
 = 
	`°æí
(
domaö
);

2413 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2414 i‡(!
globÆ_£¨ch_°©e
) ;

2415 
globÆ_£¨ch_°©e
->
num_domaös
++;

2417 
sdomaö
 = (
£¨ch_domaö
 *Ë
	`mÆloc
((£¨ch_domaöË+ 
domaö_Àn
);

2418 i‡(!
sdomaö
) ;

2419 
	`mem˝y
–((
u8
 *Ë
sdomaö
Ë+ (
£¨ch_domaö
), 
domaö
, 
domaö_Àn
);

2420 
sdomaö
->
√xt
 = 
globÆ_£¨ch_°©e
->
hód
;

2421 
sdomaö
->
Àn
 = 
domaö_Àn
;

2423 
globÆ_£¨ch_°©e
->
hód
 = 
sdomaö
;

2424 
	}
}

2429 
	$£¨ch_ªvî£
() {

2430 
£¨ch_domaö
 *
cur
, *
¥ev
 = 
NULL
, *
√xt
;

2431 
cur
 = 
globÆ_£¨ch_°©e
->
hód
;

2432 
cur
) {

2433 
√xt
 = 
cur
->next;

2434 
cur
->
√xt
 = 
¥ev
;

2435 
¥ev
 = 
cur
;

2436 
cur
 = 
√xt
;

2439 
globÆ_£¨ch_°©e
->
hód
 = 
¥ev
;

2440 
	}
}

2444 
	$evdns_£¨ch_add
(c⁄° *
domaö
) {

2445 
	`£¨ch_po°fix_add
(
domaö
);

2446 
	}
}

2450 
	$evdns_£¨ch_ndŸs_£t
(c⁄° 
ndŸs
) {

2451 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2452 i‡(!
globÆ_£¨ch_°©e
) ;

2453 
globÆ_£¨ch_°©e
->
ndŸs
 =Çdots;

2454 
	}
}

2457 
	$£¨ch_£t_‰om_ho°«me
() {

2458 
ho°«me
[
HOST_NAME_MAX
 + 1], *
domaö«me
;

2460 
	`£¨ch_po°fix_˛ór
();

2461 i‡(
	`gëho°«me
(
ho°«me
, (hostname))) ;

2462 
domaö«me
 = 
	`°rchr
(
ho°«me
, '.');

2463 i‡(!
domaö«me
) ;

2464 
	`£¨ch_po°fix_add
(
domaö«me
);

2465 
	}
}

2469 
	$£¨ch_make_√w
(c⁄° 
£¨ch_°©e
 *c⁄° 
°©e
, 
n
, c⁄° *c⁄° 
ba£_«me
) {

2470 c⁄° 
ba£_Àn
 = 
	`°æí
(
ba£_«me
);

2471 c⁄° 
√ed_to_≠≥nd_dŸ
 = 
ba£_«me
[
ba£_Àn
 - 1] == '.' ? 0 : 1;

2472 
£¨ch_domaö
 *
dom
;

2474 
dom
 = 
°©e
->
hód
; dom; dom = dom->
√xt
) {

2475 i‡(!
n
--) {

2478 c⁄° 
u8
 *c⁄° 
po°fix
 = ((u8 *Ë
dom
Ë+ (
£¨ch_domaö
);

2479 c⁄° 
po°fix_Àn
 = 
dom
->
Àn
;

2480 *c⁄° 
√w«me
 = (*Ë
	`mÆloc
(
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
 + 
po°fix_Àn
 + 1);

2481 i‡(!
√w«me
Ë 
NULL
;

2482 
	`mem˝y
(
√w«me
, 
ba£_«me
, 
ba£_Àn
);

2483 i‡(
√ed_to_≠≥nd_dŸ
Ë
√w«me
[
ba£_Àn
] = '.';

2484 
	`mem˝y
(
√w«me
 + 
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
, 
po°fix
, 
po°fix_Àn
);

2485 
√w«me
[
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
 + 
po°fix_Àn
] = 0;

2486  
√w«me
;

2491 
	`ab‹t
();

2492  
NULL
;

2493 
	}
}

2496 
	$£¨ch_ªque°_√w
(
ty≥
, c⁄° *c⁄° 
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
u£r_ˇŒback
, *
u£r_¨g
) {

2497 
	`as£π
(
ty≥
 =
TYPE_A
 ||Åy≥ =
TYPE_AAAA
);

2498 i‡–((
Êags
 & 
DNS_QUERY_NO_SEARCH
) == 0) &&

2499 
globÆ_£¨ch_°©e
 &&

2500 
globÆ_£¨ch_°©e
->
num_domaös
) {

2502 
ªque°
 *
ªq
;

2503 i‡(
	`°rög_num_dŸs
(
«me
Ë>
globÆ_£¨ch_°©e
->
ndŸs
) {

2504 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2505 i‡(!
ªq
)  1;

2506 
ªq
->
£¨ch_ödex
 = -1;

2508 *c⁄° 
√w_«me
 = 
	`£¨ch_make_√w
(
globÆ_£¨ch_°©e
, 0, 
«me
);

2509 i‡(!
√w_«me
)  1;

2510 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
√w_«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2511 
	`‰ì
(
√w_«me
);

2512 i‡(!
ªq
)  1;

2513 
ªq
->
£¨ch_ödex
 = 0;

2515 
ªq
->
£¨ch_‹ig«me
 = 
	`°rdup
(
«me
);

2516 
ªq
->
£¨ch_°©e
 = 
globÆ_£¨ch_°©e
;

2517 
ªq
->
£¨ch_Êags
 = 
Êags
;

2518 
globÆ_£¨ch_°©e
->
ªfcou¡
++;

2519 
	`ªque°_submô
(
ªq
);

2522 
ªque°
 *c⁄° 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2523 i‡(!
ªq
)  1;

2524 
	`ªque°_submô
(
ªq
);

2527 
	}
}

2535 
	$£¨ch_åy_√xt
(
ªque°
 *c⁄° 
ªq
) {

2536 i‡(
ªq
->
£¨ch_°©e
) {

2538 *
√w_«me
;

2539 
ªque°
 *
√wªq
;

2540 
ªq
->
£¨ch_ödex
++;

2541 i‡(
ªq
->
£¨ch_ödex
 >ªq->
£¨ch_°©e
->
num_domaös
) {

2544 i‡(
	`°rög_num_dŸs
(
ªq
->
£¨ch_‹ig«me
Ë<Ñeq->
£¨ch_°©e
->
ndŸs
) {

2546 
√wªq
 = 
	`ªque°_√w
(
ªq
->
ªque°_ty≥
,Ñeq->
£¨ch_‹ig«me
,Ñeq->
£¨ch_Êags
,Ñeq->
u£r_ˇŒback
,Ñeq->
u£r_poöãr
);

2547 
	`log
(
EVDNS_LOG_DEBUG
, "Sórch:ÅryögÑaw quîy %s", 
ªq
->
£¨ch_‹ig«me
);

2548 i‡(
√wªq
) {

2549 
	`ªque°_submô
(
√wªq
);

2556 
√w_«me
 = 
	`£¨ch_make_√w
(
ªq
->
£¨ch_°©e
,Ñeq->
£¨ch_ödex
,Ñeq->
£¨ch_‹ig«me
);

2557 i‡(!
√w_«me
)  1;

2558 
	`log
(
EVDNS_LOG_DEBUG
, "Sórch:ÇowÅryög %†(%d)", 
√w_«me
, 
ªq
->
£¨ch_ödex
);

2559 
√wªq
 = 
	`ªque°_√w
(
ªq
->
ªque°_ty≥
, 
√w_«me
,Ñeq->
£¨ch_Êags
,Ñeq->
u£r_ˇŒback
,Ñeq->
u£r_poöãr
);

2560 
	`‰ì
(
√w_«me
);

2561 i‡(!
√wªq
)  1;

2562 
√wªq
->
£¨ch_‹ig«me
 = 
ªq
->search_origname;

2563 
ªq
->
£¨ch_‹ig«me
 = 
NULL
;

2564 
√wªq
->
£¨ch_°©e
 = 
ªq
->search_state;

2565 
√wªq
->
£¨ch_Êags
 = 
ªq
->search_flags;

2566 
√wªq
->
£¨ch_ödex
 = 
ªq
->search_index;

2567 
√wªq
->
£¨ch_°©e
->
ªfcou¡
++;

2568 
	`ªque°_submô
(
√wªq
);

2572 
	}
}

2575 
	$£¨ch_ªque°_föished
(
ªque°
 *c⁄° 
ªq
) {

2576 i‡(
ªq
->
£¨ch_°©e
) {

2577 
	`£¨ch_°©e_de¸ef
(
ªq
->
£¨ch_°©e
);

2578 
ªq
->
£¨ch_°©e
 = 
NULL
;

2580 i‡(
ªq
->
£¨ch_‹ig«me
) {

2581 
	`‰ì
(
ªq
->
£¨ch_‹ig«me
);

2582 
ªq
->
£¨ch_‹ig«me
 = 
NULL
;

2584 
	}
}

2590 
	$evdns_ªsﬁv_£t_deÁu…s
(
Êags
) {

2592 i‡(
Êags
 & 
DNS_OPTION_SEARCH
Ë
	`£¨ch_£t_‰om_ho°«me
();

2593 i‡(
Êags
 & 
DNS_OPTION_NAMESERVERS
Ë
	`evdns_«me£rvî_ù_add
("127.0.0.1");

2594 
	}
}

2596 #i‚de‡
HAVE_STRTOK_R


2598 
	$°πok_r
(*
s
, c⁄° *
dñim
, **
°©e
) {

2599  
	`°πok
(
s
, 
dñim
);

2600 
	}
}

2605 
	$°πoöt
(c⁄° *c⁄° 
°r
) {

2606 *
íd±r
;

2607 c⁄° 
r
 = 
	`°πﬁ
(
°r
, &
íd±r
, 10);

2608 i‡(*
íd±r
)  -1;

2609  
r
;

2610 
	}
}

2614 
	$°πoöt_˛ù≥d
(c⁄° *c⁄° 
°r
, 
mö
, 
max
)

2616 
r
 = 
	`°πoöt
(
°r
);

2617 i‡(
r
 == -1)

2618  
r
;

2619 i‡(
r
<
mö
)

2620  
mö
;

2621 i‡(
r
>
max
)

2622  
max
;

2624  
r
;

2625 
	}
}

2629 
	$evdns_£t_›ti⁄
(c⁄° *
›ti⁄
, c⁄° *
vÆ
, 
Êags
)

2631 i‡(!
	`°∫cmp
(
›ti⁄
, "ndots:", 6)) {

2632 c⁄° 
ndŸs
 = 
	`°πoöt
(
vÆ
);

2633 i‡(
ndŸs
 == -1)  -1;

2634 i‡(!(
Êags
 & 
DNS_OPTION_SEARCH
))  0;

2635 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÇdŸ†tÿ%d", 
ndŸs
);

2636 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2637 i‡(!
globÆ_£¨ch_°©e
)  -1;

2638 
globÆ_£¨ch_°©e
->
ndŸs
 =Çdots;

2639 } i‡(!
	`°∫cmp
(
›ti⁄
, "timeout:", 8)) {

2640 c⁄° 
timeout
 = 
	`°πoöt
(
vÆ
);

2641 i‡(
timeout
 == -1)  -1;

2642 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2643 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÅimeouàtÿ%d", 
timeout
);

2644 
globÆ_timeout
.
tv_£c
 = 
timeout
;

2645 } i‡(!
	`°∫cmp
(
›ti⁄
, "max-timeouts:", 12)) {

2646 c⁄° 
maxtimeout
 = 
	`°πoöt_˛ù≥d
(
vÆ
, 1, 255);

2647 i‡(
maxtimeout
 == -1)  -1;

2648 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2649 
	`log
(
EVDNS_LOG_DEBUG
, "Setting maximumállowedÅimeoutsÅo %d",

2650 
maxtimeout
);

2651 
globÆ_max_«me£rvî_timeout
 = 
maxtimeout
;

2652 } i‡(!
	`°∫cmp
(
›ti⁄
, "max-inflight:", 13)) {

2653 c⁄° 
maxöÊight
 = 
	`°πoöt_˛ù≥d
(
vÆ
, 1, 65000);

2654 i‡(
maxöÊight
 == -1)  -1;

2655 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2656 
	`log
(
EVDNS_LOG_DEBUG
, "Setting maximum inflightÑequestsÅo %d",

2657 
maxöÊight
);

2658 
globÆ_max_ªque°s_öÊight
 = 
maxöÊight
;

2659 } i‡(!
	`°∫cmp
(
›ti⁄
, "attempts:", 9)) {

2660 
ªåõs
 = 
	`°πoöt
(
vÆ
);

2661 i‡(
ªåõs
 == -1)  -1;

2662 i‡(
ªåõs
 > 255)Ñetries = 255;

2663 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2664 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÑërõ†tÿ%d", 
ªåõs
);

2665 
globÆ_max_ªå™smôs
 = 
ªåõs
;

2668 
	}
}

2671 
	$ªsﬁv_c⁄f_∑r£_löe
(*c⁄° 
°¨t
, 
Êags
) {

2672 *
°πok_°©e
;

2673 c⁄° *c⁄° 
dñims
 = " \t";

2674 
	#NEXT_TOKEN
 
	`°πok_r
(
NULL
, 
dñims
, &
°πok_°©e
)

	)

2676 *c⁄° 
fú°_tokí
 = 
	`°πok_r
(
°¨t
, 
dñims
, &
°πok_°©e
);

2677 i‡(!
fú°_tokí
) ;

2679 i‡(!
	`°rcmp
(
fú°_tokí
, "«me£rvî"Ë&& (
Êags
 & 
DNS_OPTION_NAMESERVERS
)) {

2680 c⁄° *c⁄° 
«me£rvî
 = 
NEXT_TOKEN
;

2681 
ö_addr
 
öa
;

2683 i‡(
	`öë_©⁄
(
«me£rvî
, &
öa
)) {

2685 
	`evdns_«me£rvî_add
(
öa
.
s_addr
);

2687 } i‡(!
	`°rcmp
(
fú°_tokí
, "domaö"Ë&& (
Êags
 & 
DNS_OPTION_SEARCH
)) {

2688 c⁄° *c⁄° 
domaö
 = 
NEXT_TOKEN
;

2689 i‡(
domaö
) {

2690 
	`£¨ch_po°fix_˛ór
();

2691 
	`£¨ch_po°fix_add
(
domaö
);

2693 } i‡(!
	`°rcmp
(
fú°_tokí
, "£¨ch"Ë&& (
Êags
 & 
DNS_OPTION_SEARCH
)) {

2694 c⁄° *
domaö
;

2695 
	`£¨ch_po°fix_˛ór
();

2697 (
domaö
 = 
NEXT_TOKEN
)) {

2698 
	`£¨ch_po°fix_add
(
domaö
);

2700 
	`£¨ch_ªvî£
();

2701 } i‡(!
	`°rcmp
(
fú°_tokí
, "options")) {

2702 c⁄° *
›ti⁄
;

2703 (
›ti⁄
 = 
NEXT_TOKEN
)) {

2704 c⁄° *
vÆ
 = 
	`°rchr
(
›ti⁄
, ':');

2705 
	`evdns_£t_›ti⁄
(
›ti⁄
, 
vÆ
 ? vÆ+1 : "", 
Êags
);

2708 #unde‡
NEXT_TOKEN


2709 
	}
}

2720 
	$evdns_ªsﬁv_c⁄f_∑r£
(
Êags
, c⁄° *c⁄° 
fûíame
) {

2721 
°©
 
°
;

2722 
fd
, 
n
, 
r
;

2723 
u8
 *
ªsﬁv
;

2724 *
°¨t
;

2725 
îr
 = 0;

2727 
	`log
(
EVDNS_LOG_DEBUG
, "P¨sögÑesﬁv.c⁄‡fûê%s", 
fûíame
);

2729 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

2730 i‡(
fd
 < 0) {

2731 
	`evdns_ªsﬁv_£t_deÁu…s
(
Êags
);

2735 i‡(
	`f°©
(
fd
, &
°
)Ë{ 
îr
 = 2; 
out1
; }

2736 i‡(!
°
.
°_size
) {

2737 
	`evdns_ªsﬁv_£t_deÁu…s
(
Êags
);

2738 
îr
 = (
Êags
 & 
DNS_OPTION_NAMESERVERS
) ? 6 : 0;

2739 
out1
;

2741 i‡(
°
.
°_size
 > 65535Ë{ 
îr
 = 3; 
out1
; }

2743 
ªsﬁv
 = (
u8
 *Ë
	`mÆloc
((
size_t
)
°
.
°_size
 + 1);

2744 i‡(!
ªsﬁv
Ë{ 
îr
 = 4; 
out1
; }

2746 
n
 = 0;

2747 (
r
 = 
	`ªad
(
fd
, 
ªsﬁv
+
n
, (
size_t
)
°
.
°_size
-n)) > 0) {

2748 
n
 +
r
;

2749 i‡(
n
 =
°
.
°_size
)

2751 
	`as£π
(
n
 < 
°
.
°_size
);

2753 i‡(
r
 < 0Ë{ 
îr
 = 5; 
out2
; }

2754 
ªsﬁv
[
n
] = 0;

2756 
°¨t
 = (*Ë
ªsﬁv
;

2758 *c⁄° 
√wlöe
 = 
	`°rchr
(
°¨t
, '\n');

2759 i‡(!
√wlöe
) {

2760 
	`ªsﬁv_c⁄f_∑r£_löe
(
°¨t
, 
Êags
);

2763 *
√wlöe
 = 0;

2764 
	`ªsﬁv_c⁄f_∑r£_löe
(
°¨t
, 
Êags
);

2765 
°¨t
 = 
√wlöe
 + 1;

2769 i‡(!
£rvî_hód
 && (
Êags
 & 
DNS_OPTION_NAMESERVERS
)) {

2771 
	`evdns_«me£rvî_ù_add
("127.0.0.1");

2772 
îr
 = 6;

2774 i‡(
Êags
 & 
DNS_OPTION_SEARCH
 && (!
globÆ_£¨ch_°©e
 || globÆ_£¨ch_°©e->
num_domaös
 == 0)) {

2775 
	`£¨ch_£t_‰om_ho°«me
();

2778 
out2
:

2779 
	`‰ì
(
ªsﬁv
);

2780 
out1
:

2781 
	`˛o£
(
fd
);

2782  
îr
;

2783 
	}
}

2785 #ifde‡
WIN32


2788 
	$evdns_«me£rvî_ù_add_löe
(c⁄° *
ùs
) {

2789 c⁄° *
addr
;

2790 *
buf
;

2791 
r
;

2792 *
ùs
) {

2793 
	`ISSPACE
(*
ùs
) || *ips == ',' || *ips == '\t')

2794 ++
ùs
;

2795 
addr
 = 
ùs
;

2796 
	`ISDIGIT
(*
ùs
) || *ips == '.' || *ips == ':')

2797 ++
ùs
;

2798 
buf
 = 
	`mÆloc
(
ùs
-
addr
+1);

2799 i‡(!
buf
)  4;

2800 
	`mem˝y
(
buf
, 
addr
, 
ùs
-addr);

2801 
buf
[
ùs
-
addr
] = '\0';

2802 
r
 = 
	`evdns_«me£rvî_ù_add
(
buf
);

2803 
	`‰ì
(
buf
);

2804 i‡(
r
) Ñ;

2807 
	}
}

2809 
	$DWORD
(
	tWINAPI
 *
	tGëNëw‹kP¨ams_‚_t
)(
	tFIXED_INFO
 *, 
	tDWORD
*);

2814 
	$lﬂd_«me£rvîs_wôh_gë√tw‹k∑øms
()

2817 
FIXED_INFO
 *
fixed
;

2818 
HMODULE
 
h™dÀ
 = 0;

2819 
ULONG
 
size
 = (
FIXED_INFO
);

2820 *
buf
 = 
NULL
;

2821 
°©us
 = 0, 
r
, 
added_™y
;

2822 
IP_ADDR_STRING
 *
ns
;

2823 
GëNëw‹kP¨ams_‚_t
 
‚
;

2825 i‡(!(
h™dÀ
 = 
	`LﬂdLibøry
("iphlpapi.dll"))) {

2826 
	`log
(
EVDNS_LOG_WARN
, "CouldÇot open iphlpapi.dll");

2827 
°©us
 = -1;

2828 
d⁄e
;

2830 i‡(!(
‚
 = (
GëNëw‹kP¨ams_‚_t
Ë
	`GëProcAddªss
(
h™dÀ
, "GetNetworkParams"))) {

2831 
	`log
(
EVDNS_LOG_WARN
, "CouldÇot getáddress of function.");

2832 
°©us
 = -1;

2833 
d⁄e
;

2836 
buf
 = 
	`mÆloc
(
size
);

2837 i‡(!
buf
Ë{ 
°©us
 = 4; 
d⁄e
; }

2838 
fixed
 = 
buf
;

2839 
r
 = 
	`‚
(
fixed
, &
size
);

2840 i‡(
r
 !
ERROR_SUCCESS
 &&Ñ !
ERROR_BUFFER_OVERFLOW
) {

2841 
°©us
 = -1;

2842 
d⁄e
;

2844 i‡(
r
 !
ERROR_SUCCESS
) {

2845 
	`‰ì
(
buf
);

2846 
buf
 = 
	`mÆloc
(
size
);

2847 i‡(!
buf
Ë{ 
°©us
 = 4; 
d⁄e
; }

2848 
fixed
 = 
buf
;

2849 
r
 = 
	`‚
(
fixed
, &
size
);

2850 i‡(
r
 !
ERROR_SUCCESS
) {

2851 
	`log
(
EVDNS_LOG_DEBUG
, "fn() failed.");

2852 
°©us
 = -1;

2853 
d⁄e
;

2857 
	`as£π
(
fixed
);

2858 
added_™y
 = 0;

2859 
ns
 = &(
fixed
->
DnsSîvîLi°
);

2860 
ns
) {

2861 
r
 = 
	`evdns_«me£rvî_ù_add_löe
(
ns
->
IpAddªss
.
Såög
);

2862 i‡(
r
) {

2863 
	`log
(
EVDNS_LOG_DEBUG
,"CouldÇotáddÇameserver %sÅoÜist,error: %d",

2864 (
ns
->
IpAddªss
.
Såög
),()
	`GëLa°Eº‹
());

2865 
°©us
 = 
r
;

2866 
d⁄e
;

2868 
	`log
(
EVDNS_LOG_DEBUG
,"Suc˚sfuŒyádded %†a†«me£rvî",
ns
->
IpAddªss
.
Såög
);

2871 
added_™y
++;

2872 
ns
 =Çs->
Next
;

2875 i‡(!
added_™y
) {

2876 
	`log
(
EVDNS_LOG_DEBUG
, "NoÇameserversádded.");

2877 
°©us
 = -1;

2880 
d⁄e
:

2881 i‡(
buf
)

2882 
	`‰ì
(
buf
);

2883 i‡(
h™dÀ
)

2884 
	`FªeLibøry
(
h™dÀ
);

2885  
°©us
;

2886 
	}
}

2889 
	$c⁄fig_«me£rvî_‰om_ªg_key
(
HKEY
 
key
, c⁄° *
subkey
)

2891 *
buf
;

2892 
DWORD
 
bufsz
 = 0, 
ty≥
 = 0;

2893 
°©us
 = 0;

2895 i‡(
	`RegQuîyVÆueEx
(
key
, 
subkey
, 0, &
ty≥
, 
NULL
, &
bufsz
)

2896 !
ERROR_MORE_DATA
)

2898 i‡(!(
buf
 = 
	`mÆloc
(
bufsz
)))

2901 i‡(
	`RegQuîyVÆueEx
(
key
, 
subkey
, 0, &
ty≥
, (
LPBYTE
)
buf
, &
bufsz
)

2902 =
ERROR_SUCCESS
 && 
bufsz
 > 1) {

2903 
°©us
 = 
	`evdns_«me£rvî_ù_add_löe
(
buf
);

2906 
	`‰ì
(
buf
);

2907  
°©us
;

2908 
	}
}

2910 
	#SERVICES_KEY
 "Sy°em\\CuºítC⁄åﬁSë\\Sîvi˚s\\"

	)

2911 
	#WIN_NS_9X_KEY
 
SERVICES_KEY
 "VxD\\MSTCP"

	)

2912 
	#WIN_NS_NT_KEY
 
SERVICES_KEY
 "T˝ù\\P¨amëîs"

	)

2915 
	$lﬂd_«me£rvîs_‰om_ªgi°ry
()

2917 
found
 = 0;

2918 
r
;

2919 
	#TRY
(
k
, 
«me
) \

2920 i‡(!
found
 && 
	`c⁄fig_«me£rvî_‰om_ªg_key
(
k
,
«me
) == 0) { \

2921 
	`log
(
EVDNS_LOG_DEBUG
,"FoundÇame£rvî†ö %s/%s",#k,
«me
); \

2922 
found
 = 1; \

2923 } i‡(!
found
) { \

2924 
	`log
(
EVDNS_LOG_DEBUG
,"Didn't findÇameservers in %s/%s", \

2926 }

	)

2928 i‡((()
	`GëVîsi⁄
()) > 0) {

2929 
HKEY
 
¡_key
 = 0, 
öãrÁ˚s_key
 = 0;

2931 i‡(
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, 
WIN_NS_NT_KEY
, 0,

2932 
KEY_READ
, &
¡_key
Ë!
ERROR_SUCCESS
) {

2933 
	`log
(
EVDNS_LOG_DEBUG
,"Couldn'à›íÇàkey, %d",()
	`GëLa°Eº‹
());

2936 
r
 = 
	`RegO≥nKeyEx
(
¡_key
, "Interfaces", 0,

2937 
KEY_QUERY_VALUE
|
KEY_ENUMERATE_SUB_KEYS
,

2938 &
öãrÁ˚s_key
);

2939 i‡(
r
 !
ERROR_SUCCESS
) {

2940 
	`log
(
EVDNS_LOG_DEBUG
,"Couldn'à›í i¡îÁ˚†key, %d",()
	`GëLa°Eº‹
());

2943 
	`TRY
(
¡_key
, "NameServer");

2944 
	`TRY
(
¡_key
, "DhcpNameServer");

2945 
	`TRY
(
öãrÁ˚s_key
, "NameServer");

2946 
	`TRY
(
öãrÁ˚s_key
, "DhcpNameServer");

2947 
	`RegClo£Key
(
öãrÁ˚s_key
);

2948 
	`RegClo£Key
(
¡_key
);

2950 
HKEY
 
wö_key
 = 0;

2951 i‡(
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, 
WIN_NS_9X_KEY
, 0,

2952 
KEY_READ
, &
wö_key
Ë!
ERROR_SUCCESS
) {

2953 
	`log
(
EVDNS_LOG_DEBUG
, "Couldn'à›íÑegi°ry key, %d", ()
	`GëLa°Eº‹
());

2956 
	`TRY
(
wö_key
, "NameServer");

2957 
	`RegClo£Key
(
wö_key
);

2960 i‡(
found
 == 0) {

2961 
	`log
(
EVDNS_LOG_WARN
,"Didn't findányÇameservers.");

2964  
found
 ? 0 : -1;

2965 #unde‡
TRY


2966 
	}
}

2969 
	$evdns_c⁄fig_wödows_«me£rvîs
()

2971 i‡(
	`lﬂd_«me£rvîs_wôh_gë√tw‹k∑øms
() == 0)

2973  
	`lﬂd_«me£rvîs_‰om_ªgi°ry
();

2974 
	}
}

2978 
	$evdns_öô
()

2980 
ªs
 = 0;

2981 #ifde‡
WIN32


2982 
ªs
 = 
	`evdns_c⁄fig_wödows_«me£rvîs
();

2984 
ªs
 = 
	`evdns_ªsﬁv_c⁄f_∑r£
(
DNS_OPTIONS_ALL
, "/etc/resolv.conf");

2987  (
ªs
);

2988 
	}
}

2991 
	$evdns_îr_to_°rög
(
îr
)

2993 
îr
) {

2994 
DNS_ERR_NONE
:  "noÉrror";

2995 
DNS_ERR_FORMAT
:  "misformatted query";

2996 
DNS_ERR_SERVERFAILED
:  "server failed";

2997 
DNS_ERR_NOTEXIST
:  "name doesÇotÉxist";

2998 
DNS_ERR_NOTIMPL
:  "queryÇot implemented";

2999 
DNS_ERR_REFUSED
:  "refused";

3001 
DNS_ERR_TRUNCATED
:  "replyÅruncated or ill-formed";

3002 
DNS_ERR_UNKNOWN
:  "unknown";

3003 
DNS_ERR_TIMEOUT
:  "requestÅimed out";

3004 
DNS_ERR_SHUTDOWN
:  "dns subsystem shut down";

3007 
	}
}

3010 
	$evdns_shutdown
(
Áû_ªque°s
)

3012 
«me£rvî
 *
£rvî
, *
£rvî_√xt
;

3013 
£¨ch_domaö
 *
dom
, *
dom_√xt
;

3015 
ªq_hód
) {

3016 i‡(
Áû_ªque°s
)

3017 
	`ª∂y_ˇŒback
(
ªq_hód
, 0, 
DNS_ERR_SHUTDOWN
, 
NULL
);

3018 
	`ªque°_föished
(
ªq_hód
, &req_head);

3020 
ªq_waôög_hód
) {

3021 i‡(
Áû_ªque°s
)

3022 
	`ª∂y_ˇŒback
(
ªq_waôög_hód
, 0, 
DNS_ERR_SHUTDOWN
, 
NULL
);

3023 
	`ªque°_föished
(
ªq_waôög_hód
, &req_waiting_head);

3025 
globÆ_ªque°s_öÊight
 = 
globÆ_ªque°s_waôög
 = 0;

3027 
£rvî
 = 
£rvî_hód
; sîvî; sîvî = 
£rvî_√xt
) {

3028 
£rvî_√xt
 = 
£rvî
->
√xt
;

3029 i‡(
£rvî
->
sockë
 >= 0)

3030 
	`CLOSE_SOCKET
(
£rvî
->
sockë
);

3031 (Ë
	`evít_dñ
(&
£rvî
->
evít
);

3032 i‡(
£rvî
->
°©e
 == 0)

3033 (Ë
	`evít_dñ
(&
£rvî
->
timeout_evít
);

3034 
	`‰ì
(
£rvî
);

3035 i‡(
£rvî_√xt
 =
£rvî_hód
)

3038 
£rvî_hód
 = 
NULL
;

3039 
globÆ_good_«me£rvîs
 = 0;

3041 i‡(
globÆ_£¨ch_°©e
) {

3042 
dom
 = 
globÆ_£¨ch_°©e
->
hód
; dom; dom = 
dom_√xt
) {

3043 
dom_√xt
 = 
dom
->
√xt
;

3044 
	`‰ì
(
dom
);

3046 
	`‰ì
(
globÆ_£¨ch_°©e
);

3047 
globÆ_£¨ch_°©e
 = 
NULL
;

3049 
evdns_log_‚
 = 
NULL
;

3050 
	}
}

3052 #ifde‡
EVDNS_MAIN


3054 
	$maö_ˇŒback
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

3055 *
addrs
, *
‹ig
) {

3056 *
n
 = (*)
‹ig
;

3057 
i
;

3058 
i
 = 0; i < 
cou¡
; ++i) {

3059 i‡(
ty≥
 =
DNS_IPv4_A
) {

3060 
	`¥ötf
("%s: %s\n", 
n
, 
	`debug_¡ﬂ
(((
u32
*)
addrs
)[
i
]));

3061 } i‡(
ty≥
 =
DNS_PTR
) {

3062 
	`¥ötf
("%s: %s\n", 
n
, ((**)
addrs
)[
i
]);

3065 i‡(!
cou¡
) {

3066 
	`¥ötf
("%s: Nÿ™swî (%d)\n", 
n
, 
ªsu…
);

3068 
	`fÊush
(
°dout
);

3069 
	}
}

3071 
	$evdns_£rvî_ˇŒback
(
evdns_£rvî_ªque°
 *
ªq
, *
d©a
)

3073 
i
, 
r
;

3074 ()
d©a
;

3077 
i
 = 0; i < 
ªq
->
nque°i⁄s
; ++i) {

3078 
u32
 
™s
 = 
	`ht⁄l
(0xc0a80b0bUL);

3079 i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_A
 &&

3080 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
) {

3081 
	`¥ötf
(" --Ñïlyög f‹ %†(A)\n", 
ªq
->
que°i⁄s
[
i
]->
«me
);

3082 
r
 = 
	`evdns_£rvî_ªque°_add_a_ª∂y
(
ªq
,Ñeq->
que°i⁄s
[
i
]->
«me
,

3083 1, &
™s
, 10);

3084 i‡(
r
<0)

3085 
	`¥ötf
("eeep, didn't work.\n");

3086 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_PTR
 &&

3087 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
) {

3088 
	`¥ötf
(" --Ñïlyög f‹ %†(PTR)\n", 
ªq
->
que°i⁄s
[
i
]->
«me
);

3089 
r
 = 
	`evdns_£rvî_ªque°_add_±r_ª∂y
(
ªq
, 
NULL
,Ñeq->
que°i⁄s
[
i
]->
«me
,

3092 
	`¥ötf
(" -- skùpög %†[%d %d]\n", 
ªq
->
que°i⁄s
[
i
]->
«me
,

3093 
ªq
->
que°i⁄s
[
i
]->
ty≥
,Ñeq->que°i⁄s[i]->
dns_que°i⁄_˛ass
);

3097 
r
 = 
	`evdns_ªque°_ª•⁄d
(
ªq
, 0);

3098 i‡(
r
<0)

3099 
	`¥ötf
("eeek, couldn't sendÑeply.\n");

3100 
	}
}

3103 
	$log‚
(
is_w¨n
, c⁄° *
msg
) {

3104 (Ë
is_w¨n
;

3105 
	`Ârötf
(
°dîr
, "%s\n", 
msg
);

3106 
	}
}

3108 
	$maö
(
c
, **
v
) {

3109 
idx
;

3110 
ªvî£
 = 0, 
vîbo£
 = 1, 
£rvîã°
 = 0;

3111 i‡(
c
<2) {

3112 
	`Ârötf
(
°dîr
, "sy¡ax: %†[-x] [-v] ho°«me\n", 
v
[0]);

3113 
	`Ârötf
(
°dîr
, "sy¡ax: %†[-£rvîã°]\n", 
v
[0]);

3116 
idx
 = 1;

3117 
idx
 < 
c
 && 
v
[idx][0] == '-') {

3118 i‡(!
	`°rcmp
(
v
[
idx
], "-x"))

3119 
ªvî£
 = 1;

3120 i‡(!
	`°rcmp
(
v
[
idx
], "-v"))

3121 
vîbo£
 = 1;

3122 i‡(!
	`°rcmp
(
v
[
idx
], "-servertest"))

3123 
£rvîã°
 = 1;

3125 
	`Ârötf
(
°dîr
, "Unknow¿›ti⁄ %s\n", 
v
[
idx
]);

3126 ++
idx
;

3128 
	`evít_öô
();

3129 i‡(
vîbo£
)

3130 
	`evdns_£t_log_‚
(
log‚
);

3131 
	`evdns_ªsﬁv_c⁄f_∑r£
(
DNS_OPTION_NAMESERVERS
, "/etc/resolv.conf");

3132 i‡(
£rvîã°
) {

3133 
sock
;

3134 
sockaddr_ö
 
my_addr
;

3135 
sock
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

3136 
	`evutû_make_sockë_n⁄blockög
(
sock
);

3137 
my_addr
.
sö_Ámûy
 = 
AF_INET
;

3138 
my_addr
.
sö_p‹t
 = 
	`ht⁄s
(10053);

3139 
my_addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

3140 i‡(
	`böd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr))<0) {

3141 
	`≥º‹
("bind");

3142 
	`exô
(1);

3144 
	`evdns_add_£rvî_p‹t
(
sock
, 0, 
evdns_£rvî_ˇŒback
, 
NULL
);

3146 ; 
idx
 < 
c
; ++idx) {

3147 i‡(
ªvî£
) {

3148 
ö_addr
 
addr
;

3149 i‡(!
	`öë_©⁄
(
v
[
idx
], &
addr
)) {

3150 
	`Ârötf
(
°dîr
, "SkùpögÇ⁄-IP %s\n", 
v
[
idx
]);

3153 
	`Ârötf
(
°dîr
, "ªsﬁvög %s...\n",
v
[
idx
]);

3154 
	`evdns_ªsﬁve_ªvî£
(&
addr
, 0, 
maö_ˇŒback
, 
v
[
idx
]);

3156 
	`Ârötf
(
°dîr
, "ªsﬁvög (fwdË%s...\n",
v
[
idx
]);

3157 
	`evdns_ªsﬁve_ùv4
(
v
[
idx
], 0, 
maö_ˇŒback
, v[idx]);

3160 
	`fÊush
(
°dout
);

3161 
	`evít_di•©ch
();

3163 
	}
}

	@evdns.h

160 #i‚de‡
EVENTDNS_H


161 
	#EVENTDNS_H


	)

163 #ifde‡
__˝lu•lus


168 
	~<evutû.h
>

171 
	#DNS_ERR_NONE
 0

	)

173 
	#DNS_ERR_FORMAT
 1

	)

176 
	#DNS_ERR_SERVERFAILED
 2

	)

178 
	#DNS_ERR_NOTEXIST
 3

	)

180 
	#DNS_ERR_NOTIMPL
 4

	)

183 
	#DNS_ERR_REFUSED
 5

	)

185 
	#DNS_ERR_TRUNCATED
 65

	)

187 
	#DNS_ERR_UNKNOWN
 66

	)

189 
	#DNS_ERR_TIMEOUT
 67

	)

191 
	#DNS_ERR_SHUTDOWN
 68

	)

193 
	#DNS_IPv4_A
 1

	)

194 
	#DNS_PTR
 2

	)

195 
	#DNS_IPv6_AAAA
 3

	)

197 
	#DNS_QUERY_NO_SEARCH
 1

	)

199 
	#DNS_OPTION_SEARCH
 1

	)

200 
	#DNS_OPTION_NAMESERVERS
 2

	)

201 
	#DNS_OPTION_MISC
 4

	)

202 
	#DNS_OPTIONS_ALL
 7

	)

211 (*
evdns_ˇŒback_ty≥
Ë(
	tªsu…
, 
	tty≥
, 
	tcou¡
, 
	tâl
, *
	taddªs£s
, *
	t¨g
);

223 
evdns_öô
();

237 
evdns_shutdown
(
Áû_ªque°s
);

246 c⁄° *
evdns_îr_to_°rög
(
îr
);

259 
evdns_«me£rvî_add
(
addªss
);

273 
evdns_cou¡_«me£rvîs
();

284 
evdns_˛ór_«me£rvîs_™d_su•íd
();

296 
evdns_ªsume
();

308 
evdns_«me£rvî_ù_add
(c⁄° *
ù_as_°rög
);

321 
evdns_ªsﬁve_ùv4
(c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

334 
evdns_ªsﬁve_ùv6
(c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

336 
ö_addr
;

337 
ö6_addr
;

349 
evdns_ªsﬁve_ªvî£
(
ö_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

362 
evdns_ªsﬁve_ªvî£_ùv6
(
ö6_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

377 
evdns_£t_›ti⁄
(c⁄° *
›ti⁄
, c⁄° *
vÆ
, 
Êags
);

401 
evdns_ªsﬁv_c⁄f_∑r£
(
Êags
, c⁄° *c⁄° 
fûíame
);

414 #ifde‡
MS_WINDOWS


415 
evdns_c⁄fig_wödows_«me£rvîs
();

422 
evdns_£¨ch_˛ór
();

430 
evdns_£¨ch_add
(c⁄° *
domaö
);

441 
evdns_£¨ch_ndŸs_£t
(c⁄° 
ndŸs
);

449 (*
evdns_debug_log_‚_ty≥
)(
	tis_w¨nög
, c⁄° *
	tmsg
);

457 
evdns_£t_log_‚
(
evdns_debug_log_‚_ty≥
 
‚
);

465 
evdns_£t_å™ß˘i⁄_id_‚
(
ev_uöt16_t
 (*
‚
)());

467 
	#DNS_NO_SEARCH
 1

	)

473 
	sevdns_£rvî_ªque°
 {

474 
Êags
;

475 
nque°i⁄s
;

476 
evdns_£rvî_que°i⁄
 **
que°i⁄s
;

478 
	sevdns_£rvî_que°i⁄
 {

479 
ty≥
;

480 #ifde‡
__˝lu•lus


481 
dns_que°i⁄_˛ass
;

486 
˛ass
;

487 
	#dns_que°i⁄_˛ass
 
˛ass


	)

489 
«me
[1];

491 (*
evdns_ªque°_ˇŒback_‚_ty≥
)(
	tevdns_£rvî_ªque°
 *, *);

492 
	#EVDNS_ANSWER_SECTION
 0

	)

493 
	#EVDNS_AUTHORITY_SECTION
 1

	)

494 
	#EVDNS_ADDITIONAL_SECTION
 2

	)

496 
	#EVDNS_TYPE_A
 1

	)

497 
	#EVDNS_TYPE_NS
 2

	)

498 
	#EVDNS_TYPE_CNAME
 5

	)

499 
	#EVDNS_TYPE_SOA
 6

	)

500 
	#EVDNS_TYPE_PTR
 12

	)

501 
	#EVDNS_TYPE_MX
 15

	)

502 
	#EVDNS_TYPE_TXT
 16

	)

503 
	#EVDNS_TYPE_AAAA
 28

	)

505 
	#EVDNS_QTYPE_AXFR
 252

	)

506 
	#EVDNS_QTYPE_ALL
 255

	)

508 
	#EVDNS_CLASS_INET
 1

	)

510 
evdns_£rvî_p‹t
 *
evdns_add_£rvî_p‹t
(
sockë
, 
is_t˝
, 
evdns_ªque°_ˇŒback_‚_ty≥
 
ˇŒback
, *
u£r_d©a
);

511 
evdns_˛o£_£rvî_p‹t
(
evdns_£rvî_p‹t
 *
p‹t
);

513 
evdns_£rvî_ªque°_add_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
£˘i⁄
, c⁄° *
«me
, 
ty≥
, 
dns_˛ass
, 
âl
, 
d©Æí
, 
is_«me
, c⁄° *
d©a
);

514 
evdns_£rvî_ªque°_add_a_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
);

515 
evdns_£rvî_ªque°_add_ØØ_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
);

516 
evdns_£rvî_ªque°_add_±r_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
ö_addr
 *
ö
, c⁄° *
öaddr_«me
, c⁄° *
ho°«me
, 
âl
);

517 
evdns_£rvî_ªque°_add_˙ame_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, c⁄° *
˙ame
, 
âl
);

519 
evdns_£rvî_ªque°_ª•⁄d
(
evdns_£rvî_ªque°
 *
ªq
, 
îr
);

520 
evdns_£rvî_ªque°_dr›
(
evdns_£rvî_ªque°
 *
ªq
);

521 
sockaddr
;

522 
evdns_£rvî_ªque°_gë_ªque°ög_addr
(
evdns_£rvî_ªque°
 *
_ªq
, 
sockaddr
 *
ß
, 
addr_Àn
);

524 #ifde‡
__˝lu•lus


	@event-config.h

6 #i‚de‡
_EVENT_CONFIG_H_


7 
	#_EVENT_CONFIG_H_


	)

12 
	#_EVENT_DNS_USE_CPU_CLOCK_FOR_ID
 1

	)

18 
	#_EVENT_HAVE_CLOCK_GETTIME
 1

	)

24 
	#_EVENT_HAVE_DLFCN_H
 1

	)

27 
	#_EVENT_HAVE_EPOLL
 1

	)

30 
	#_EVENT_HAVE_EPOLL_CTL
 1

	)

36 
	#_EVENT_HAVE_FCNTL
 1

	)

39 
	#_EVENT_HAVE_FCNTL_H
 1

	)

42 
	#_EVENT_HAVE_GETADDRINFO
 1

	)

45 
	#_EVENT_HAVE_GETNAMEINFO
 1

	)

48 
	#_EVENT_HAVE_GETTIMEOFDAY
 1

	)

51 
	#_EVENT_HAVE_INET_NTOP
 1

	)

54 
	#_EVENT_HAVE_INTTYPES_H
 1

	)

60 
	#_EVENT_HAVE_LIBNSL
 1

	)

63 
	#_EVENT_HAVE_LIBRESOLV
 1

	)

66 
	#_EVENT_HAVE_LIBRT
 1

	)

72 
	#_EVENT_HAVE_MEMORY_H
 1

	)

78 
	#_EVENT_HAVE_POLL
 1

	)

81 
	#_EVENT_HAVE_POLL_H
 1

	)

90 
	#_EVENT_HAVE_SELECT
 1

	)

93 
	#_EVENT_HAVE_SETFD
 1

	)

96 
	#_EVENT_HAVE_SIGACTION
 1

	)

99 
	#_EVENT_HAVE_SIGNAL
 1

	)

102 
	#_EVENT_HAVE_SIGNAL_H
 1

	)

105 
	#_EVENT_HAVE_STDARG_H
 1

	)

108 
	#_EVENT_HAVE_STDINT_H
 1

	)

111 
	#_EVENT_HAVE_STDLIB_H
 1

	)

114 
	#_EVENT_HAVE_STRINGS_H
 1

	)

117 
	#_EVENT_HAVE_STRING_H
 1

	)

123 
	#_EVENT_HAVE_STRSEP
 1

	)

126 
	#_EVENT_HAVE_STRTOK_R
 1

	)

129 
	#_EVENT_HAVE_STRTOLL
 1

	)

132 
	#_EVENT_HAVE_STRUCT_IN6_ADDR
 1

	)

138 
	#_EVENT_HAVE_SYS_EPOLL_H
 1

	)

144 
	#_EVENT_HAVE_SYS_IOCTL_H
 1

	)

147 
	#_EVENT_HAVE_SYS_PARAM_H
 1

	)

150 
	#_EVENT_HAVE_SYS_QUEUE_H
 1

	)

153 
	#_EVENT_HAVE_SYS_SELECT_H
 1

	)

156 
	#_EVENT_HAVE_SYS_SOCKET_H
 1

	)

159 
	#_EVENT_HAVE_SYS_STAT_H
 1

	)

162 
	#_EVENT_HAVE_SYS_TIME_H
 1

	)

165 
	#_EVENT_HAVE_SYS_TYPES_H
 1

	)

168 
	#_EVENT_HAVE_TAILQFOREACH
 1

	)

171 
	#_EVENT_HAVE_TIMERADD
 1

	)

174 
	#_EVENT_HAVE_TIMERCLEAR
 1

	)

177 
	#_EVENT_HAVE_TIMERCMP
 1

	)

180 
	#_EVENT_HAVE_TIMERISSET
 1

	)

183 
	#_EVENT_HAVE_UINT16_T
 1

	)

186 
	#_EVENT_HAVE_UINT32_T
 1

	)

189 
	#_EVENT_HAVE_UINT64_T
 1

	)

192 
	#_EVENT_HAVE_UINT8_T
 1

	)

195 
	#_EVENT_HAVE_UNISTD_H
 1

	)

198 
	#_EVENT_HAVE_VASPRINTF
 1

	)

205 
	#_EVENT_LT_OBJDIR
 ".libs/"

	)

208 
	#_EVENT_PACKAGE
 "libevít"

	)

211 
	#_EVENT_PACKAGE_BUGREPORT
 ""

	)

214 
	#_EVENT_PACKAGE_NAME
 ""

	)

217 
	#_EVENT_PACKAGE_STRING
 ""

	)

220 
	#_EVENT_PACKAGE_TARNAME
 ""

	)

223 
	#_EVENT_PACKAGE_URL
 ""

	)

226 
	#_EVENT_PACKAGE_VERSION
 ""

	)

229 
	#_EVENT_SIZEOF_INT
 4

	)

232 
	#_EVENT_SIZEOF_LONG
 4

	)

235 
	#_EVENT_SIZEOF_LONG_LONG
 8

	)

238 
	#_EVENT_SIZEOF_SHORT
 2

	)

241 
	#_EVENT_STDC_HEADERS
 1

	)

244 
	#_EVENT_TIME_WITH_SYS_TIME
 1

	)

247 
	#_EVENT_VERSION
 "1.4.9-°abÀ"

	)

257 #i‚de‡
_EVENT___˝lu•lus


	@event-internal.h

27 #i‚de‡
_EVENT_INTERNAL_H_


28 
	#_EVENT_INTERNAL_H_


	)

30 #ifde‡
__˝lu•lus


34 
	~"c⁄fig.h
"

35 
	~"mö_hóp.h
"

36 
	~"evsig«l.h
"

38 
	sevít›
 {

39 c⁄° *
«me
;

40 *(*
öô
)(
evít_ba£
 *);

41 (*
add
)(*, 
evít
 *);

42 (*
dñ
)(*, 
evít
 *);

43 (*
di•©ch
)(
evít_ba£
 *, *, 
timevÆ
 *);

44 (*
dóŒoc
)(
evít_ba£
 *, *);

46 
√ed_ªöô
;

49 
	sevít_ba£
 {

50 c⁄° 
evít›
 *
ev£l
;

51 *
evba£
;

52 
evít_cou¡
;

53 
evít_cou¡_a˘ive
;

55 
evít_gŸãrm
;

56 
evít_bªak
;

59 
evít_li°
 **
a˘ivequeues
;

60 
«˘ivequeues
;

63 
evsig«l_öfo
 
sig
;

65 
evít_li°
 
evítqueue
;

66 
timevÆ
 
evít_tv
;

68 
mö_hóp
 
timehóp
;

70 
timevÆ
 
tv_ˇche
;

74 #i‚de‡
HAVE_TAILQFOREACH


75 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

76 
	#TAILQ_END
(
hód
Ë
NULL


	)

77 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

78 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

79 (
v¨
Ë
	`TAILQ_FIRST
(
hód
); \

80 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

81 (
v¨
Ë
	`TAILQ_NEXT
(v¨, 
fõld
))

	)

82 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

83 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

84 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

85 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

86 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

87 } 0)

	)

90 
_evsig«l_£t_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
,

91 (*
‚
)());

92 
_evsig«l_ª°‹e_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
);

94 #ifde‡
__˝lu•lus


	@event.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	#WIN32_LEAN_AND_MEAN


	)

33 
	~<wödows.h
>

34 #unde‡
WIN32_LEAN_AND_MEAN


36 
	~<sys/ty≥s.h
>

37 #ifde‡
HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/_time.h
>

42 
	~<sys/queue.h
>

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 #i‚de‡
WIN32


46 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 
	~<sig«l.h
>

50 
	~<°rög.h
>

51 
	~<as£π.h
>

52 
	~<time.h
>

54 
	~"evít.h
"

55 
	~"evít-öã∫Æ.h
"

56 
	~"evutû.h
"

57 
	~"log.h
"

59 #ifde‡
HAVE_EVENT_PORTS


60 c⁄° 
evít›
 
evp‹t›s
;

62 #ifde‡
HAVE_SELECT


63 c⁄° 
evít›
 
£À˘›s
;

65 #ifde‡
HAVE_POLL


66 c⁄° 
evít›
 
pﬁl›s
;

68 #ifde‡
HAVE_EPOLL


69 c⁄° 
evít›
 
ïﬁl›s
;

71 #ifde‡
HAVE_WORKING_KQUEUE


72 c⁄° 
evít›
 
kq›s
;

74 #ifde‡
HAVE_DEVPOLL


75 c⁄° 
evít›
 
devpﬁl›s
;

77 #ifde‡
WIN32


78 c⁄° 
evít›
 
wö32›s
;

82 c⁄° 
evít›
 *
	gevít›s
[] = {

83 #ifde‡
HAVE_EVENT_PORTS


84 &
evp‹t›s
,

86 #ifde‡
HAVE_WORKING_KQUEUE


87 &
kq›s
,

89 #ifde‡
HAVE_EPOLL


90 &
ïﬁl›s
,

92 #ifde‡
HAVE_DEVPOLL


93 &
devpﬁl›s
,

95 #ifde‡
HAVE_POLL


96 &
pﬁl›s
,

98 #ifde‡
HAVE_SELECT


99 &
£À˘›s
,

101 #ifde‡
WIN32


102 &
wö32›s
,

104 
NULL


108 
evít_ba£
 *
	gcuºít_ba£
 = 
NULL
;

109 
evít_ba£
 *
evsig«l_ba£
;

110 
	gu£_m⁄Ÿ⁄ic
;

113 (*
evít_sigcb
)();

114 vﬁ©ûê
sig_©omic_t
 
evít_gŸsig
;

117 
	`evít_queue_ö£π
(
evít_ba£
 *, 
evít
 *, );

118 
	`evít_queue_ªmove
(
evít_ba£
 *, 
evít
 *, );

119 
	`evít_havìvíts
(
evít_ba£
 *);

121 
	`evít_¥o˚ss_a˘ive
(
evít_ba£
 *);

123 
	`timeout_√xt
(
evít_ba£
 *, 
timevÆ
 **);

124 
	`timeout_¥o˚ss
(
evít_ba£
 *);

125 
	`timeout_c‹ª˘
(
evít_ba£
 *, 
timevÆ
 *);

128 
	$dëe˘_m⁄Ÿ⁄ic
()

130 #i‡
	`deföed
(
HAVE_CLOCK_GETTIME
Ë&& deföed(
CLOCK_MONOTONIC
)

131 
time•ec
 
ts
;

133 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) == 0)

134 
u£_m⁄Ÿ⁄ic
 = 1;

136 
	}
}

139 
	$gëtime
(
evít_ba£
 *
ba£
, 
timevÆ
 *
ç
)

141 i‡(
ba£
->
tv_ˇche
.
tv_£c
) {

142 *
ç
 = 
ba£
->
tv_ˇche
;

146 #i‡
	`deföed
(
HAVE_CLOCK_GETTIME
Ë&& deföed(
CLOCK_MONOTONIC
)

147 i‡(
u£_m⁄Ÿ⁄ic
) {

148 
time•ec
 
ts
;

150 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) == -1)

153 
ç
->
tv_£c
 = 
ts
.tv_sec;

154 
ç
->
tv_u£c
 = 
ts
.
tv_n£c
 / 1000;

159  (
	`evutû_gëtimeofday
(
ç
, 
NULL
));

160 
	}
}

162 
evít_ba£
 *

163 
	$evít_öô
()

165 
evít_ba£
 *
ba£
 = 
	`evít_ba£_√w
();

167 i‡(
ba£
 !
NULL
)

168 
cuºít_ba£
 = 
ba£
;

170  (
ba£
);

171 
	}
}

173 
evít_ba£
 *

174 
	$evít_ba£_√w
()

176 
i
;

177 
evít_ba£
 *
ba£
;

179 i‡((
ba£
 = 
	`ˇŒoc
(1, (
evít_ba£
))Ë=
NULL
)

180 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

182 
evít_sigcb
 = 
NULL
;

183 
evít_gŸsig
 = 0;

185 
	`dëe˘_m⁄Ÿ⁄ic
();

186 
	`gëtime
(
ba£
, &ba£->
evít_tv
);

188 
	`mö_hóp_˘‹
(&
ba£
->
timehóp
);

189 
	`TAILQ_INIT
(&
ba£
->
evítqueue
);

190 
ba£
->
sig
.
ev_sig«l_∑ú
[0] = -1;

191 
ba£
->
sig
.
ev_sig«l_∑ú
[1] = -1;

193 
ba£
->
evba£
 = 
NULL
;

194 
i
 = 0; 
evít›s
[i] && !
ba£
->
evba£
; i++) {

195 
ba£
->
ev£l
 = 
evít›s
[
i
];

197 
ba£
->
evba£
 = ba£->
ev£l
->
	`öô
(base);

200 i‡(
ba£
->
evba£
 =
NULL
)

201 
	`evít_îrx
(1, "%s:Çÿevíàmech™ismávaûabÀ", 
__func__
);

203 i‡(
	`gëív
("EVENT_SHOW_METHOD"))

204 
	`evít_msgx
("libevent using: %s\n",

205 
ba£
->
ev£l
->
«me
);

208 
	`evít_ba£_¥i‹ôy_öô
(
ba£
, 1);

210  (
ba£
);

211 
	}
}

214 
	$evít_ba£_‰ì
(
evít_ba£
 *
ba£
)

216 
i
, 
n_dñëed
=0;

217 
evít
 *
ev
;

219 i‡(
ba£
 =
NULL
 && 
cuºít_ba£
)

220 
ba£
 = 
cuºít_ba£
;

221 i‡(
ba£
 =
cuºít_ba£
)

222 
cuºít_ba£
 = 
NULL
;

225 
	`as£π
(
ba£
);

227 
ev
 = 
	`TAILQ_FIRST
(&
ba£
->
evítqueue
);Év; ) {

228 
evít
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
, 
ev_√xt
);

229 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)) {

230 
	`evít_dñ
(
ev
);

231 ++
n_dñëed
;

233 
ev
 = 
√xt
;

235 (
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
)Ë!
NULL
) {

236 
	`evít_dñ
(
ev
);

237 ++
n_dñëed
;

240 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

241 
ev
 = 
	`TAILQ_FIRST
(
ba£
->
a˘ivequeues
[
i
]);Év; ) {

242 
evít
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
, 
ev_a˘ive_√xt
);

243 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)) {

244 
	`evít_dñ
(
ev
);

245 ++
n_dñëed
;

247 
ev
 = 
√xt
;

251 i‡(
n_dñëed
)

252 
	`evít_debug
(("%s: %dÉvents were still set in base",

253 
__func__
, 
n_dñëed
));

255 i‡(
ba£
->
ev£l
->
dóŒoc
 !
NULL
)

256 
ba£
->
ev£l
->
	`dóŒoc
(ba£, ba£->
evba£
);

258 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i)

259 
	`as£π
(
	`TAILQ_EMPTY
(
ba£
->
a˘ivequeues
[
i
]));

261 
	`as£π
(
	`mö_hóp_em±y
(&
ba£
->
timehóp
));

262 
	`mö_hóp_dt‹
(&
ba£
->
timehóp
);

264 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i)

265 
	`‰ì
(
ba£
->
a˘ivequeues
[
i
]);

266 
	`‰ì
(
ba£
->
a˘ivequeues
);

268 
	`as£π
(
	`TAILQ_EMPTY
(&
ba£
->
evítqueue
));

270 
	`‰ì
(
ba£
);

271 
	}
}

275 
	$evít_ªöô
(
evít_ba£
 *
ba£
)

277 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

278 *
evba£
 = 
ba£
->evbase;

279 
ªs
 = 0;

280 
evít
 *
ev
;

283 i‡(!
ev£l
->
√ed_ªöô
)

287 i‡(
ba£
->
sig
.
ev_sig«l_added
) {

288 
	`evít_queue_ªmove
(
ba£
, &ba£->
sig
.
ev_sig«l
,

289 
EVLIST_INSERTED
);

290 
ba£
->
sig
.
ev_sig«l_added
 = 0;

293 i‡(
ba£
->
ev£l
->
dóŒoc
 !
NULL
)

294 
ba£
->
ev£l
->
	`dóŒoc
(ba£, ba£->
evba£
);

295 
evba£
 = 
ba£
->evba£ = 
ev£l
->
	`öô
(base);

296 i‡(
ba£
->
evba£
 =
NULL
)

297 
	`evít_îrx
(1, "%s: couldÇotÑeinitializeÉvent mechanism",

298 
__func__
);

300 
	`TAILQ_FOREACH
(
ev
, &
ba£
->
evítqueue
, 
ev_√xt
) {

301 i‡(
ev£l
->
	`add
(
evba£
, 
ev
) == -1)

302 
ªs
 = -1;

305  (
ªs
);

306 
	}
}

309 
	$evít_¥i‹ôy_öô
(
≈ri‹ôõs
)

311  
	`evít_ba£_¥i‹ôy_öô
(
cuºít_ba£
, 
≈ri‹ôõs
);

312 
	}
}

315 
	$evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *
ba£
, 
≈ri‹ôõs
)

317 
i
;

319 i‡(
ba£
->
evít_cou¡_a˘ive
)

322 i‡(
ba£
->
«˘ivequeues
 && 
≈ri‹ôõs
 != base->nactivequeues) {

323 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

324 
	`‰ì
(
ba£
->
a˘ivequeues
[
i
]);

326 
	`‰ì
(
ba£
->
a˘ivequeues
);

330 
ba£
->
«˘ivequeues
 = 
≈ri‹ôõs
;

331 
ba£
->
a˘ivequeues
 = (
evít_li°
 **)
	`ˇŒoc
(ba£->
«˘ivequeues
,

332 
≈ri‹ôõs
 * (
evít_li°
 *));

333 i‡(
ba£
->
a˘ivequeues
 =
NULL
)

334 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

336 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

337 
ba£
->
a˘ivequeues
[
i
] = 
	`mÆloc
((
evít_li°
));

338 i‡(
ba£
->
a˘ivequeues
[
i
] =
NULL
)

339 
	`evít_îr
(1, "%s: mÆloc", 
__func__
);

340 
	`TAILQ_INIT
(
ba£
->
a˘ivequeues
[
i
]);

344 
	}
}

347 
	$evít_havìvíts
(
evít_ba£
 *
ba£
)

349  (
ba£
->
evít_cou¡
 > 0);

350 
	}
}

359 
	$evít_¥o˚ss_a˘ive
(
evít_ba£
 *
ba£
)

361 
evít
 *
ev
;

362 
evít_li°
 *
a˘iveq
 = 
NULL
;

363 
i
;

364 
nˇŒs
;

366 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

367 i‡(
	`TAILQ_FIRST
(
ba£
->
a˘ivequeues
[
i
]Ë!
NULL
) {

368 
a˘iveq
 = 
ba£
->
a˘ivequeues
[
i
];

373 
	`as£π
(
a˘iveq
 !
NULL
);

375 
ev
 = 
	`TAILQ_FIRST
(
a˘iveq
);Év;Év = TAILQ_FIRST(activeq)) {

376 i‡(
ev
->
ev_evíts
 & 
EV_PERSIST
)

377 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

379 
	`evít_dñ
(
ev
);

382 
nˇŒs
 = 
ev
->
ev_nˇŒs
;

383 
ev
->
ev_≤ˇŒs
 = &
nˇŒs
;

384 
nˇŒs
) {

385 
nˇŒs
--;

386 
ev
->
ev_nˇŒs
 = 
nˇŒs
;

387 (*
ev
->
ev_ˇŒback
)((Îv->
ev_fd
,Év->
ev_ªs
,Év->
ev_¨g
);

388 i‡(
evít_gŸsig
 || 
ba£
->
evít_bªak
)

392 
	}
}

399 
	$evít_di•©ch
()

401  (
	`evít_lo›
(0));

402 
	}
}

405 
	$evít_ba£_di•©ch
(
evít_ba£
 *event_base)

407  (
	`evít_ba£_lo›
(
evít_ba£
, 0));

408 
	}
}

411 
	$evít_ba£_gë_mëhod
(
evít_ba£
 *
ba£
)

413 
	`as£π
(
ba£
);

414  (
ba£
->
ev£l
->
«me
);

415 
	}
}

418 
	$evít_lo›exô_cb
(
fd
, 
wh©
, *
¨g
)

420 
evít_ba£
 *
ba£
 = 
¨g
;

421 
ba£
->
evít_gŸãrm
 = 1;

422 
	}
}

426 
	$evít_lo›exô
(c⁄° 
timevÆ
 *
tv
)

428  (
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
evít_lo›exô_cb
,

429 
cuºít_ba£
, 
tv
));

430 
	}
}

433 
	$evít_ba£_lo›exô
(
evít_ba£
 *evít_ba£, c⁄° 
timevÆ
 *
tv
)

435  (
	`evít_ba£_⁄˚
(
evít_ba£
, -1, 
EV_TIMEOUT
, 
evít_lo›exô_cb
,

436 
evít_ba£
, 
tv
));

437 
	}
}

441 
	$evít_lo›bªak
()

443  (
	`evít_ba£_lo›bªak
(
cuºít_ba£
));

444 
	}
}

447 
	$evít_ba£_lo›bªak
(
evít_ba£
 *event_base)

449 i‡(
evít_ba£
 =
NULL
)

452 
evít_ba£
->
evít_bªak
 = 1;

454 
	}
}

461 
	$evít_lo›
(
Êags
)

463  
	`evít_ba£_lo›
(
cuºít_ba£
, 
Êags
);

464 
	}
}

467 
	$evít_ba£_lo›
(
evít_ba£
 *
ba£
, 
Êags
)

469 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

470 *
evba£
 = 
ba£
->evbase;

471 
timevÆ
 
tv
;

472 
timevÆ
 *
tv_p
;

473 
ªs
, 
d⁄e
;

476 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

478 i‡(
ba£
->
sig
.
ev_sig«l_added
)

479 
evsig«l_ba£
 = 
ba£
;

480 
d⁄e
 = 0;

481 !
d⁄e
) {

483 i‡(
ba£
->
evít_gŸãrm
) {

484 
ba£
->
evít_gŸãrm
 = 0;

488 i‡(
ba£
->
evít_bªak
) {

489 
ba£
->
evít_bªak
 = 0;

494 
evít_gŸsig
) {

495 
evít_gŸsig
 = 0;

496 i‡(
evít_sigcb
) {

497 
ªs
 = (*
evít_sigcb
)();

498 i‡(
ªs
 == -1) {

499 
î∫o
 = 
EINTR
;

505 
	`timeout_c‹ª˘
(
ba£
, &
tv
);

507 
tv_p
 = &
tv
;

508 i‡(!
ba£
->
evít_cou¡_a˘ive
 && !(
Êags
 & 
EVLOOP_NONBLOCK
)) {

509 
	`timeout_√xt
(
ba£
, &
tv_p
);

515 
	`evutû_timî˛ór
(&
tv
);

519 i‡(!
	`evít_havìvíts
(
ba£
)) {

520 
	`evít_debug
(("%s:Çÿevít†ªgi°îed.", 
__func__
));

525 
	`gëtime
(
ba£
, &ba£->
evít_tv
);

528 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

530 
ªs
 = 
ev£l
->
	`di•©ch
(
ba£
, 
evba£
, 
tv_p
);

532 i‡(
ªs
 == -1)

534 
	`gëtime
(
ba£
, &ba£->
tv_ˇche
);

536 
	`timeout_¥o˚ss
(
ba£
);

538 i‡(
ba£
->
evít_cou¡_a˘ive
) {

539 
	`evít_¥o˚ss_a˘ive
(
ba£
);

540 i‡(!
ba£
->
evít_cou¡_a˘ive
 && (
Êags
 & 
EVLOOP_ONCE
))

541 
d⁄e
 = 1;

542 } i‡(
Êags
 & 
EVLOOP_NONBLOCK
)

543 
d⁄e
 = 1;

547 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

549 
	`evít_debug
(("%s:áskedÅÿãrmö©êlo›.", 
__func__
));

551 
	}
}

555 
	sevít_⁄˚
 {

556 
evít
 
	mev
;

558 (*
	mcb
)(, , *);

559 *
	m¨g
;

565 
	$evít_⁄˚_cb
(
fd
, 
evíts
, *
¨g
)

567 
evít_⁄˚
 *
e⁄˚
 = 
¨g
;

569 (*
e⁄˚
->
cb
)(
fd
, 
evíts
,É⁄˚->
¨g
);

570 
	`‰ì
(
e⁄˚
);

571 
	}
}

575 
evít_⁄˚
(
fd
, 
evíts
,

576 (*
ˇŒback
)(, , *), *
¨g
, c⁄° 
timevÆ
 *
tv
)

578  
	`evít_ba£_⁄˚
(
cuºít_ba£
, 
fd
, 
evíts
, 
ˇŒback
, 
¨g
, 
tv
);

579 
	}
}

583 
evít_ba£_⁄˚
(
evít_ba£
 *
ba£
, 
fd
, 
evíts
,

584 (*
ˇŒback
)(, , *), *
¨g
, c⁄° 
timevÆ
 *
tv
)

586 
evít_⁄˚
 *
e⁄˚
;

587 
timevÆ
 
ëv
;

588 
ªs
;

591 i‡(
evíts
 & 
EV_SIGNAL
)

594 i‡((
e⁄˚
 = 
	`ˇŒoc
(1, (
evít_⁄˚
))Ë=
NULL
)

597 
e⁄˚
->
cb
 = 
ˇŒback
;

598 
e⁄˚
->
¨g
 =árg;

600 i‡(
evíts
 =
EV_TIMEOUT
) {

601 i‡(
tv
 =
NULL
) {

602 
	`evutû_timî˛ór
(&
ëv
);

603 
tv
 = &
ëv
;

606 
	`evtimî_£t
(&
e⁄˚
->
ev
, 
evít_⁄˚_cb
,Éonce);

607 } i‡(
evíts
 & (
EV_READ
|
EV_WRITE
)) {

608 
evíts
 &
EV_READ
|
EV_WRITE
;

610 
	`evít_£t
(&
e⁄˚
->
ev
, 
fd
, 
evíts
, 
evít_⁄˚_cb
,Éonce);

613 
	`‰ì
(
e⁄˚
);

617 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
e⁄˚
->
ev
);

618 i‡(
ªs
 == 0)

619 
ªs
 = 
	`evít_add
(&
e⁄˚
->
ev
, 
tv
);

620 i‡(
ªs
 != 0) {

621 
	`‰ì
(
e⁄˚
);

622  (
ªs
);

626 
	}
}

629 
evít_£t
(
evít
 *
ev
, 
fd
, 
evíts
,

630 (*
ˇŒback
)(, , *), *
¨g
)

633 
ev
->
ev_ba£
 = 
cuºít_ba£
;

635 
ev
->
ev_ˇŒback
 = 
ˇŒback
;

636 
ev
->
ev_¨g
 = 
¨g
;

637 
ev
->
ev_fd
 = 
fd
;

638 
ev
->
ev_evíts
 = 
evíts
;

639 
ev
->
ev_ªs
 = 0;

640 
ev
->
ev_Êags
 = 
EVLIST_INIT
;

641 
ev
->
ev_nˇŒs
 = 0;

642 
ev
->
ev_≤ˇŒs
 = 
NULL
;

644 
	`mö_hóp_ñem_öô
(
ev
);

647 if(
cuºít_ba£
)

648 
ev
->
ev_¥i
 = 
cuºít_ba£
->
«˘ivequeues
/2;

649 
	}
}

652 
	$evít_ba£_£t
(
evít_ba£
 *
ba£
, 
evít
 *
ev
)

655 i‡(
ev
->
ev_Êags
 !
EVLIST_INIT
)

658 
ev
->
ev_ba£
 = 
ba£
;

659 
ev
->
ev_¥i
 = 
ba£
->
«˘ivequeues
/2;

662 
	}
}

670 
	$evít_¥i‹ôy_£t
(
evít
 *
ev
, 
¥i
)

672 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

674 i‡(
¥i
 < 0 ||Örò>
ev
->
ev_ba£
->
«˘ivequeues
)

677 
ev
->
ev_¥i
 = 
¥i
;

680 
	}
}

687 
	$evít_≥ndög
(
evít
 *
ev
, evít, 
timevÆ
 *
tv
)

689 
timevÆ
 
now
, 
ªs
;

690 
Êags
 = 0;

692 i‡(
ev
->
ev_Êags
 & 
EVLIST_INSERTED
)

693 
Êags
 |(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
|
EV_SIGNAL
));

694 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

695 
Êags
 |
ev
->
ev_ªs
;

696 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

697 
Êags
 |
EV_TIMEOUT
;

699 
evít
 &(
EV_TIMEOUT
|
EV_READ
|
EV_WRITE
|
EV_SIGNAL
);

702 i‡(
tv
 !
NULL
 && (
Êags
 & 
evít
 & 
EV_TIMEOUT
)) {

703 
	`gëtime
(
ev
->
ev_ba£
, &
now
);

704 
	`evutû_timîsub
(&
ev
->
ev_timeout
, &
now
, &
ªs
);

706 
	`evutû_gëtimeofday
(&
now
, 
NULL
);

707 
	`evutû_timîadd
(&
now
, &
ªs
, 
tv
);

710  (
Êags
 & 
evít
);

711 
	}
}

714 
	$evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
tv
)

716 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

717 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

718 *
evba£
 = 
ba£
->evbase;

719 
ªs
 = 0;

721 
	`evít_debug
((

723 
ev
,

724 
ev
->
ev_evíts
 & 
EV_READ
 ? "EV_READ " : " ",

725 
ev
->
ev_evíts
 & 
EV_WRITE
 ? "EV_WRITE " : " ",

726 
tv
 ? "EV_TIMEOUT " : " ",

727 
ev
->
ev_ˇŒback
));

729 
	`as£π
(!(
ev
->
ev_Êags
 & ~
EVLIST_ALL
));

735 i‡(
tv
 !
NULL
 && !(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)) {

736 i‡(
	`mö_hóp_ª£rve
(&
ba£
->
timehóp
,

737 1 + 
	`mö_hóp_size
(&
ba£
->
timehóp
)) == -1)

741 i‡((
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
|
EV_SIGNAL
)) &&

742 !(
ev
->
ev_Êags
 & (
EVLIST_INSERTED
|
EVLIST_ACTIVE
))) {

743 
ªs
 = 
ev£l
->
	`add
(
evba£
, 
ev
);

744 i‡(
ªs
 != -1)

745 
	`evít_queue_ö£π
(
ba£
, 
ev
, 
EVLIST_INSERTED
);

752 i‡(
ªs
 !-1 && 
tv
 !
NULL
) {

753 
timevÆ
 
now
;

759 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

760 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

765 i‡((
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
) &&

766 (
ev
->
ev_ªs
 & 
EV_TIMEOUT
)) {

770 i‡(
ev
->
ev_nˇŒs
 &&Év->
ev_≤ˇŒs
) {

772 *
ev
->
ev_≤ˇŒs
 = 0;

775 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

778 
	`gëtime
(
ba£
, &
now
);

779 
	`evutû_timîadd
(&
now
, 
tv
, &
ev
->
ev_timeout
);

781 
	`evít_debug
((

783 
tv
->
tv_£c
, 
ev
->
ev_ˇŒback
));

785 
	`evít_queue_ö£π
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

788  (
ªs
);

789 
	}
}

792 
	$evít_dñ
(
evít
 *
ev
)

794 
evít_ba£
 *
ba£
;

795 c⁄° 
evít›
 *
ev£l
;

796 *
evba£
;

798 
	`evít_debug
(("event_del: %p, callback %p",

799 
ev
,Év->
ev_ˇŒback
));

802 i‡(
ev
->
ev_ba£
 =
NULL
)

805 
ba£
 = 
ev
->
ev_ba£
;

806 
ev£l
 = 
ba£
->evsel;

807 
evba£
 = 
ba£
->evbase;

809 
	`as£π
(!(
ev
->
ev_Êags
 & ~
EVLIST_ALL
));

812 i‡(
ev
->
ev_nˇŒs
 &&Év->
ev_≤ˇŒs
) {

814 *
ev
->
ev_≤ˇŒs
 = 0;

817 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

818 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

820 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

821 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

823 i‡(
ev
->
ev_Êags
 & 
EVLIST_INSERTED
) {

824 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_INSERTED
);

825  (
ev£l
->
	`dñ
(
evba£
, 
ev
));

829 
	}
}

832 
	$evít_a˘ive
(
evít
 *
ev
, 
ªs
, 
nˇŒs
)

835 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
) {

836 
ev
->
ev_ªs
 |
ªs
;

840 
ev
->
ev_ªs
 = 
ªs
;

841 
ev
->
ev_nˇŒs
 = 
nˇŒs
;

842 
ev
->
ev_≤ˇŒs
 = 
NULL
;

843 
	`evít_queue_ö£π
(
ev
->
ev_ba£
,Év, 
EVLIST_ACTIVE
);

844 
	}
}

847 
	$timeout_√xt
(
evít_ba£
 *
ba£
, 
timevÆ
 **
tv_p
)

849 
timevÆ
 
now
;

850 
evít
 *
ev
;

851 
timevÆ
 *
tv
 = *
tv_p
;

853 i‡((
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
)Ë=
NULL
) {

855 *
tv_p
 = 
NULL
;

859 i‡(
	`gëtime
(
ba£
, &
now
) == -1)

862 i‡(
	`evutû_timîcmp
(&
ev
->
ev_timeout
, &
now
, <=)) {

863 
	`evutû_timî˛ór
(
tv
);

867 
	`evutû_timîsub
(&
ev
->
ev_timeout
, &
now
, 
tv
);

869 
	`as£π
(
tv
->
tv_£c
 >= 0);

870 
	`as£π
(
tv
->
tv_u£c
 >= 0);

872 
	`evít_debug
(("timeout_√xt: i¿%ld sec⁄ds", 
tv
->
tv_£c
));

874 
	}
}

883 
	$timeout_c‹ª˘
(
evít_ba£
 *
ba£
, 
timevÆ
 *
tv
)

885 
evít
 **
≥v
;

886 
size
;

887 
timevÆ
 
off
;

889 i‡(
u£_m⁄Ÿ⁄ic
)

893 
	`gëtime
(
ba£
, 
tv
);

894 i‡(
	`evutû_timîcmp
(
tv
, &
ba£
->
evít_tv
, >=)) {

895 
ba£
->
evít_tv
 = *
tv
;

899 
	`evít_debug
(("%s:Åime isÑunning backwards, corrected",

900 
__func__
));

901 
	`evutû_timîsub
(&
ba£
->
evít_tv
, 
tv
, &
off
);

907 
≥v
 = 
ba£
->
timehóp
.
p
;

908 
size
 = 
ba£
->
timehóp
.
n
;

909 ; 
size
-- > 0; ++
≥v
) {

910 
timevÆ
 *
ev_tv
 = &(**
≥v
).
ev_timeout
;

911 
	`evutû_timîsub
(
ev_tv
, &
off
,Év_tv);

913 
	}
}

916 
	$timeout_¥o˚ss
(
evít_ba£
 *
ba£
)

918 
timevÆ
 
now
;

919 
evít
 *
ev
;

921 i‡(
	`mö_hóp_em±y
(&
ba£
->
timehóp
))

924 
	`gëtime
(
ba£
, &
now
);

926 (
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
))) {

927 i‡(
	`evutû_timîcmp
(&
ev
->
ev_timeout
, &
now
, >))

931 
	`evít_dñ
(
ev
);

933 
	`evít_debug
(("timeout_process: call %p",

934 
ev
->
ev_ˇŒback
));

935 
	`evít_a˘ive
(
ev
, 
EV_TIMEOUT
, 1);

937 
	}
}

940 
	$evít_queue_ªmove
(
evít_ba£
 *
ba£
, 
evít
 *
ev
, 
queue
)

942 i‡(!(
ev
->
ev_Êags
 & 
queue
))

943 
	`evít_îrx
(1, "%s: %p(fd %dËnŸ o¿queuê%x", 
__func__
,

944 
ev
,Év->
ev_fd
, 
queue
);

946 i‡(~
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)

947 
ba£
->
evít_cou¡
--;

949 
ev
->
ev_Êags
 &~
queue
;

950 
queue
) {

951 
EVLIST_INSERTED
:

952 
	`TAILQ_REMOVE
(&
ba£
->
evítqueue
, 
ev
, 
ev_√xt
);

954 
EVLIST_ACTIVE
:

955 
ba£
->
evít_cou¡_a˘ive
--;

956 
	`TAILQ_REMOVE
(
ba£
->
a˘ivequeues
[
ev
->
ev_¥i
],

957 
ev
, 
ev_a˘ive_√xt
);

959 
EVLIST_TIMEOUT
:

960 
	`mö_hóp_îa£
(&
ba£
->
timehóp
, 
ev
);

963 
	`evít_îrx
(1, "%s: unknow¿queuê%x", 
__func__
, 
queue
);

965 
	}
}

968 
	$evít_queue_ö£π
(
evít_ba£
 *
ba£
, 
evít
 *
ev
, 
queue
)

970 i‡(
ev
->
ev_Êags
 & 
queue
) {

972 i‡(
queue
 & 
EVLIST_ACTIVE
)

975 
	`evít_îrx
(1, "%s: %p(fd %dËÆªady o¿queuê%x", 
__func__
,

976 
ev
,Év->
ev_fd
, 
queue
);

979 i‡(~
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)

980 
ba£
->
evít_cou¡
++;

982 
ev
->
ev_Êags
 |
queue
;

983 
queue
) {

984 
EVLIST_INSERTED
:

985 
	`TAILQ_INSERT_TAIL
(&
ba£
->
evítqueue
, 
ev
, 
ev_√xt
);

987 
EVLIST_ACTIVE
:

988 
ba£
->
evít_cou¡_a˘ive
++;

989 
	`TAILQ_INSERT_TAIL
(
ba£
->
a˘ivequeues
[
ev
->
ev_¥i
],

990 
ev
,
ev_a˘ive_√xt
);

992 
EVLIST_TIMEOUT
: {

993 
	`mö_hóp_push
(&
ba£
->
timehóp
, 
ev
);

997 
	`evít_îrx
(1, "%s: unknow¿queuê%x", 
__func__
, 
queue
);

999 
	}
}

1004 
	$evít_gë_vîsi⁄
()

1006  (
VERSION
);

1007 
	}
}

1015 
	$evít_gë_mëhod
()

1017  (
cuºít_ba£
->
ev£l
->
«me
);

1018 
	}
}

	@event.h

27 #i‚de‡
_EVENT_H_


28 
	#_EVENT_H_


	)

158 #ifde‡
__˝lu•lus


162 
	~<evít-c⁄fig.h
>

163 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


164 
	~<sys/ty≥s.h
>

166 #ifde‡
_EVENT_HAVE_SYS_TIME_H


167 
	~<sys/time.h
>

169 #ifde‡
_EVENT_HAVE_STDINT_H


170 
	~<°döt.h
>

172 
	~<°d¨g.h
>

175 
	~<evutû.h
>

177 #ifde‡
WIN32


178 
	#WIN32_LEAN_AND_MEAN


	)

179 
	~<wödows.h
>

180 #unde‡
WIN32_LEAN_AND_MEAN


181 
	tu_ch¨
;

182 
	tu_sh‹t
;

185 
	#EVLIST_TIMEOUT
 0x01

	)

186 
	#EVLIST_INSERTED
 0x02

	)

187 
	#EVLIST_SIGNAL
 0x04

	)

188 
	#EVLIST_ACTIVE
 0x08

	)

189 
	#EVLIST_INTERNAL
 0x10

	)

190 
	#EVLIST_INIT
 0x80

	)

193 
	#EVLIST_ALL
 (0xf000 | 0x9f)

	)

195 
	#EV_TIMEOUT
 0x01

	)

196 
	#EV_READ
 0x02

	)

197 
	#EV_WRITE
 0x04

	)

198 
	#EV_SIGNAL
 0x08

	)

199 
	#EV_PERSIST
 0x10

	)

202 #i‚de‡
TAILQ_ENTRY


203 
	#_EVENT_DEFINED_TQENTRY


	)

204 
	#TAILQ_ENTRY
(
ty≥
) \

206 
ty≥
 *
tqe_√xt
; \

207 
ty≥
 **
tqe_¥ev
; \

208 }

	)

211 
evít_ba£
;

212 
	sevít
 {

213 
TAILQ_ENTRY
 (
evít
Ë
ev_√xt
;

214 
TAILQ_ENTRY
 (
evít
Ë
ev_a˘ive_√xt
;

215 
TAILQ_ENTRY
 (
evít
Ë
ev_sig«l_√xt
;

216 
mö_hóp_idx
;

218 
evít_ba£
 *
ev_ba£
;

220 
ev_fd
;

221 
ev_evíts
;

222 
ev_nˇŒs
;

223 *
ev_≤ˇŒs
;

225 
timevÆ
 
ev_timeout
;

227 
ev_¥i
;

229 (*
ev_ˇŒback
)(, , *
¨g
);

230 *
ev_¨g
;

232 
ev_ªs
;

233 
ev_Êags
;

236 
	#EVENT_SIGNAL
(
ev
Ë()”v)->
ev_fd


	)

237 
	#EVENT_FD
(
ev
Ë()”v)->
ev_fd


	)

243 
	sevkeyvÆ
 {

244 
TAILQ_ENTRY
(
evkeyvÆ
Ë
√xt
;

246 *
key
;

247 *
vÆue
;

250 #ifde‡
_EVENT_DEFINED_TQENTRY


251 #unde‡
TAILQ_ENTRY


252 
evít_li°
;

253 
evkeyvÆq
;

254 #unde‡
_EVENT_DEFINED_TQENTRY


256 
TAILQ_HEAD
 (
evít_li°
, 
evít
);

257 
TAILQ_HEAD
 (
evkeyvÆq
, 
evkeyvÆ
);

269 
evít_ba£
 *
evít_ba£_√w
();

280 
evít_ba£
 *
evít_öô
();

292 
evít_ªöô
(
evít_ba£
 *
ba£
);

303 
evít_di•©ch
();

312 
evít_ba£_di•©ch
(
evít_ba£
 *);

321 c⁄° *
evít_ba£_gë_mëhod
(
evít_ba£
 *);

332 
evít_ba£_‰ì
(
evít_ba£
 *);

335 
	#_EVENT_LOG_DEBUG
 0

	)

336 
	#_EVENT_LOG_MSG
 1

	)

337 
	#_EVENT_LOG_WARN
 2

	)

338 
	#_EVENT_LOG_ERR
 3

	)

339 (*
evít_log_cb
)(
	t£vîôy
, c⁄° *
	tmsg
);

347 
evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
);

355 
evít_ba£_£t
(
evít_ba£
 *, 
evít
 *);

361 
	#EVLOOP_ONCE
 0x01

	)

362 
	#EVLOOP_NONBLOCK
 0x02

	)

375 
evít_lo›
();

388 
evít_ba£_lo›
(
evít_ba£
 *, );

403 
evít_lo›exô
(c⁄° 
timevÆ
 *);

420 
evít_ba£_lo›exô
(
evít_ba£
 *, c⁄° 
timevÆ
 *);

434 
evít_lo›bªak
();

449 
evít_ba£_lo›bªak
(
evít_ba£
 *);

458 
	#evtimî_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

468 
	#evtimî_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
”v, -1, 0, cb,árg)

	)

476 
	#evtimî_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

477 
	#evtimî_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_TIMEOUT
,Åv)

	)

478 
	#evtimî_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

486 
	#timeout_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

496 
	#timeout_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
”v, -1, 0, cb,árg)

	)

504 
	#timeout_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

506 
	#timeout_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_TIMEOUT
,Åv)

	)

507 
	#timeout_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

509 
	#sig«l_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

510 
	#sig«l_£t
(
ev
, 
x
, 
cb
, 
¨g
) \

511 
	`evít_£t
(
ev
, 
x
, 
EV_SIGNAL
|
EV_PERSIST
, 
cb
, 
¨g
)

	)

512 
	#sig«l_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

513 
	#sig«l_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_SIGNAL
,Åv)

	)

514 
	#sig«l_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

542 
evít_£t
(
evít
 *, , , (*)(, , *), *);

562 
evít_⁄˚
(, , (*)(, , *), *,

563 c⁄° 
timevÆ
 *);

584 
evít_ba£_⁄˚
(
evít_ba£
 *
ba£
, 
fd
, 
evíts
,

585 (*
ˇŒback
)(, , *), *
¨g
,

586 c⁄° 
timevÆ
 *
timeout
);

607 
evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
timeout
);

621 
evít_dñ
(
evít
 *);

623 
evít_a˘ive
(
evít
 *, , );

637 
evít_≥ndög
(
evít
 *
ev
, evít, 
timevÆ
 *
tv
);

650 #ifde‡
WIN32


651 
	#evít_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
 && (ev)->
ev_fd
 !()
INVALID_HANDLE_VALUE
)

	)

653 
	#evít_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

662 c⁄° *
evít_gë_vîsi⁄
();

670 c⁄° *
evít_gë_mëhod
();

693 
evít_¥i‹ôy_öô
();

706 
evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *, );

717 
evít_¥i‹ôy_£t
(
evít
 *, );

722 
	sevbuf„r
 {

723 
u_ch¨
 *
buf„r
;

724 
u_ch¨
 *
‹ig_buf„r
;

726 
size_t
 
mißlign
;

727 
size_t
 
tŸÆÀn
;

728 
size_t
 
off
;

730 (*
cb
)(
evbuf„r
 *, 
size_t
, size_t, *);

731 *
cb¨g
;

735 
	#EVBUFFER_READ
 0x01

	)

736 
	#EVBUFFER_WRITE
 0x02

	)

737 
	#EVBUFFER_EOF
 0x10

	)

738 
	#EVBUFFER_ERROR
 0x20

	)

739 
	#EVBUFFER_TIMEOUT
 0x40

	)

741 
buf„ªvít
;

742 (*
evbuf„rcb
)(
	tbuf„ªvít
 *, *);

743 (*
evîr‹cb
)(
	tbuf„ªvít
 *, 
	twh©
, *);

745 
	sevít_w©îm¨k
 {

746 
size_t
 
low
;

747 
size_t
 
high
;

750 
	sbuf„ªvít
 {

751 
evít_ba£
 *
ev_ba£
;

753 
evít
 
ev_ªad
;

754 
evít
 
ev_wrôe
;

756 
evbuf„r
 *
öput
;

757 
evbuf„r
 *
ouçut
;

759 
evít_w©îm¨k
 
wm_ªad
;

760 
evít_w©îm¨k
 
wm_wrôe
;

762 
evbuf„rcb
 
ªadcb
;

763 
evbuf„rcb
 
wrôecb
;

764 
evîr‹cb
 
îr‹cb
;

765 *
cb¨g
;

767 
timeout_ªad
;

768 
timeout_wrôe
;

770 
íabÀd
;

808 
buf„ªvít
 *
buf„ªvít_√w
(
fd
,

809 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
);

820 
buf„ªvít_ba£_£t
(
evít_ba£
 *
ba£
, 
buf„ªvít
 *
bu„v
);

830 
buf„ªvít_¥i‹ôy_£t
(
buf„ªvít
 *
bu„v
, 
¥i
);

838 
buf„ªvít_‰ì
(
buf„ªvít
 *
bu„v
);

855 
buf„ªvít_£tcb
(
buf„ªvít
 *
bu„v
,

856 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
);

864 
buf„ªvít_£tfd
(
buf„ªvít
 *
bu„v
, 
fd
);

879 
buf„ªvít_wrôe
(
buf„ªvít
 *
bu„v
,

880 c⁄° *
d©a
, 
size_t
 
size
);

892 
buf„ªvít_wrôe_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
);

905 
size_t
 
buf„ªvít_ªad
(
buf„ªvít
 *
bu„v
, *
d©a
, size_à
size
);

915 
buf„ªvít_íabÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

926 
buf„ªvít_dißbÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

936 
buf„ªvít_£âimeout
(
buf„ªvít
 *
bu„v
,

937 
timeout_ªad
, 
timeout_wrôe
);

956 
buf„ªvít_£tw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

957 
size_t
 
lowm¨k
, size_à
highm¨k
);

959 
	#EVBUFFER_LENGTH
(
x
Ë(x)->
off


	)

960 
	#EVBUFFER_DATA
(
x
Ë(x)->
buf„r


	)

961 
	#EVBUFFER_INPUT
(
x
Ë(x)->
öput


	)

962 
	#EVBUFFER_OUTPUT
(
x
Ë(x)->
ouçut


	)

971 
evbuf„r
 *
evbuf„r_√w
();

979 
evbuf„r_‰ì
(
evbuf„r
 *);

991 
evbuf„r_ex∑nd
(
evbuf„r
 *, 
size_t
);

1001 
evbuf„r_add
(
evbuf„r
 *, c⁄° *, 
size_t
);

1013 
evbuf„r_ªmove
(
evbuf„r
 *, *, 
size_t
);

1025 *
evbuf„r_ªadlöe
(
evbuf„r
 *);

1038 
evbuf„r_add_buf„r
(
evbuf„r
 *, evbuffer *);

1049 
evbuf„r_add_¥ötf
(
evbuf„r
 *, c⁄° *
fmt
, ...)

1050 #ifde‡
__GNUC__


1051 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

1064 
evbuf„r_add_v¥ötf
(
evbuf„r
 *, c⁄° *
fmt
, 
va_li°
 
≠
);

1074 
evbuf„r_døö
(
evbuf„r
 *, 
size_t
);

1087 
evbuf„r_wrôe
(
evbuf„r
 *, );

1099 
evbuf„r_ªad
(
evbuf„r
 *, , );

1110 
u_ch¨
 *
evbuf„r_föd
(
evbuf„r
 *, c⁄° u_ch¨ *, 
size_t
);

1119 
evbuf„r_£tcb
(
evbuf„r
 *, (*)(evbuf„∏*, 
size_t
, size_t, *), *);

1127 
evèg_öô
();

1129 
evèg_m¨shÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° *
d©a
,

1130 
ev_uöt32_t
 
Àn
);

1142 
ícode_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
numbî
);

1144 
evèg_m¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

1145 
ev_uöt32_t
 
öãgî
);

1147 
evèg_m¨shÆ_°rög
(
evbuf„r
 *
buf
, 
ev_uöt32_t
 
èg
,

1148 c⁄° *
°rög
);

1150 
evèg_m¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

1151 
timevÆ
 *
tv
);

1153 
evèg_unm¨shÆ
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 *
±ag
,

1154 
evbuf„r
 *
d°
);

1155 
evèg_≥ek
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
);

1156 
evèg_≥ek_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

1157 
evèg_∑ylﬂd_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

1158 
evèg_c⁄sume
(
evbuf„r
 *
evbuf
);

1160 
evèg_unm¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1161 
ev_uöt32_t
 *
pöãgî
);

1163 
evèg_unm¨shÆ_fixed
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 
√ed_èg
,

1164 *
d©a
, 
size_t
 
Àn
);

1166 
evèg_unm¨shÆ_°rög
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1167 **
p°rög
);

1169 
evèg_unm¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1170 
timevÆ
 *
±v
);

1172 #ifde‡
__˝lu•lus


	@event_tagging.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
HAVE_SYS_TYPES_H


33 
	~<sys/ty≥s.h
>

35 #ifde‡
HAVE_SYS_PARAM_H


36 
	~<sys/∑øm.h
>

39 #ifde‡
WIN32


40 
	#WIN32_LEAN_AND_MEAN


	)

41 
	~<wösock2.h
>

42 
	~<wödows.h
>

43 #unde‡
WIN32_LEAN_AND_MEAN


45 
	~<sys/io˘l.h
>

48 
	~<sys/queue.h
>

49 #ifde‡
HAVE_SYS_TIME_H


50 
	~<sys/time.h
>

53 
	~<î∫o.h
>

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 #i‚de‡
WIN32


58 
	~<sy¶og.h
>

60 #ifde‡
HAVE_UNISTD_H


61 
	~<uni°d.h
>

64 
	~"evít.h
"

65 
	~"evutû.h
"

66 
	~"log.h
"

68 
evèg_decode_öt
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

69 
evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
);

70 
evèg_decode_èg
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
);

72 
evbuf„r
 *
	g_buf
;

75 
	$evèg_öô
()

77 i‡(
_buf
 !
NULL
)

80 i‡((
_buf
 = 
	`evbuf„r_√w
()Ë=
NULL
)

81 
	`evít_îr
(1, "%s: mÆloc", 
__func__
);

82 
	}
}

91 
	$ícode_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
numbî
)

93 
off
 = 1, 
nibbÀs
 = 0;

94 
ev_uöt8_t
 
d©a
[5];

96 
	`mem£t
(
d©a
, 0, (
ev_uöt32_t
)+1);

97 
numbî
) {

98 i‡(
off
 & 0x1)

99 
d©a
[
off
/2] = (d©a[off/2] & 0xf0Ë| (
numbî
 & 0x0f);

101 
d©a
[
off
/2] = (data[off/2] & 0x0f) |

102 ((
numbî
 & 0x0f) << 4);

103 
numbî
 >>= 4;

104 
off
++;

107 i‡(
off
 > 2)

108 
nibbÀs
 = 
off
 - 2;

111 
d©a
[0] = (d©a[0] & 0x0fË| ((
nibbÀs
 & 0x0f) << 4);

113 
	`evbuf„r_add
(
evbuf
, 
d©a
, (
off
 + 1) / 2);

114 
	}
}

122 
	$evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
)

124 
byãs
 = 0;

125 
ev_uöt8_t
 
d©a
[5];

127 
	`mem£t
(
d©a
, 0, (data));

129 
ev_uöt8_t
 
lowî
 = 
èg
 & 0x7f;

130 
èg
 >>= 7;

132 i‡(
èg
)

133 
lowî
 |= 0x80;

135 
d©a
[
byãs
++] = 
lowî
;

136 } 
èg
);

138 i‡(
evbuf
 !
NULL
)

139 
	`evbuf„r_add
(
evbuf
, 
d©a
, 
byãs
);

141  (
byãs
);

142 
	}
}

145 
	$decode_èg_öã∫Æ
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
, 
dodøö
)

147 
ev_uöt32_t
 
numbî
 = 0;

148 
ev_uöt8_t
 *
d©a
 = 
	`EVBUFFER_DATA
(
evbuf
);

149 
Àn
 = 
	`EVBUFFER_LENGTH
(
evbuf
);

150 
cou¡
 = 0, 
shi·
 = 0, 
d⁄e
 = 0;

152 
cou¡
++ < 
Àn
) {

153 
ev_uöt8_t
 
lowî
 = *
d©a
++;

154 
numbî
 |(
lowî
 & 0x7fË<< 
shi·
;

155 
shi·
 += 7;

157 i‡(!(
lowî
 & 0x80)) {

158 
d⁄e
 = 1;

163 i‡(!
d⁄e
)

166 i‡(
dodøö
)

167 
	`evbuf„r_døö
(
evbuf
, 
cou¡
);

169 i‡(
±ag
 !
NULL
)

170 *
±ag
 = 
numbî
;

172  (
cou¡
);

173 
	}
}

176 
	$evèg_decode_èg
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
)

178  (
	`decode_èg_öã∫Æ
(
±ag
, 
evbuf
, 1 ));

179 
	}
}

188 
	$evèg_m¨shÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

189 c⁄° *
d©a
, 
ev_uöt32_t
 
Àn
)

191 
	`evèg_ícode_èg
(
evbuf
, 
èg
);

192 
	`ícode_öt
(
evbuf
, 
Àn
);

193 
	`evbuf„r_add
(
evbuf
, (*)
d©a
, 
Àn
);

194 
	}
}

198 
	$evèg_m¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,Év_uöt32_à
öãgî
)

200 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

201 
	`ícode_öt
(
_buf
, 
öãgî
);

203 
	`evèg_ícode_èg
(
evbuf
, 
èg
);

204 
	`ícode_öt
(
evbuf
, 
	`EVBUFFER_LENGTH
(
_buf
));

205 
	`evbuf„r_add_buf„r
(
evbuf
, 
_buf
);

206 
	}
}

209 
	$evèg_m¨shÆ_°rög
(
evbuf„r
 *
buf
, 
ev_uöt32_t
 
èg
, c⁄° *
°rög
)

211 
	`evèg_m¨shÆ
(
buf
, 
èg
, 
°rög
, 
	`°æí
(string));

212 
	}
}

215 
	$evèg_m¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, 
timevÆ
 *
tv
)

217 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

219 
	`ícode_öt
(
_buf
, 
tv
->
tv_£c
);

220 
	`ícode_öt
(
_buf
, 
tv
->
tv_u£c
);

222 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
),

223 
	`EVBUFFER_LENGTH
(
_buf
));

224 
	}
}

227 
	$decode_öt_öã∫Æ
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
, 
dodøö
)

229 
ev_uöt32_t
 
numbî
 = 0;

230 
ev_uöt8_t
 *
d©a
 = 
	`EVBUFFER_DATA
(
evbuf
);

231 
Àn
 = 
	`EVBUFFER_LENGTH
(
evbuf
);

232 
nibbÀs
 = 0;

234 i‡(!
Àn
)

237 
nibbÀs
 = ((
d©a
[0] & 0xf0) >> 4) + 1;

238 i‡(
nibbÀs
 > 8 || (nibbÀ†>> 1Ë+ 1 > 
Àn
)

240 
Àn
 = (
nibbÀs
 >> 1) + 1;

242 
nibbÀs
 > 0) {

243 
numbî
 <<= 4;

244 i‡(
nibbÀs
 & 0x1)

245 
numbî
 |
d©a
[
nibbÀs
 >> 1] & 0x0f;

247 
numbî
 |(
d©a
[
nibbÀs
 >> 1] & 0xf0) >> 4;

248 
nibbÀs
--;

251 i‡(
dodøö
)

252 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

254 *
≤umbî
 = 
numbî
;

256  (
Àn
);

257 
	}
}

260 
	$evèg_decode_öt
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
)

262  (
	`decode_öt_öã∫Æ
(
≤umbî
, 
evbuf
, 1) == -1 ? -1 : 0);

263 
	}
}

266 
	$evèg_≥ek
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
)

268  (
	`decode_èg_öã∫Æ
(
±ag
, 
evbuf
, 0 ));

269 
	}
}

272 
	$evèg_≥ek_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
)

274 
evbuf„r
 
tmp
;

275 
ªs
, 
Àn
;

277 
Àn
 = 
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 0 );

278 i‡(
Àn
 == -1)

281 
tmp
 = *
evbuf
;

282 
tmp
.
buf„r
 +
Àn
;

283 
tmp
.
off
 -
Àn
;

285 
ªs
 = 
	`decode_öt_öã∫Æ
(
∂ígth
, &
tmp
, 0);

286 i‡(
ªs
 == -1)

289 *
∂ígth
 +
ªs
 + 
Àn
;

292 
	}
}

295 
	$evèg_∑ylﬂd_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
)

297 
evbuf„r
 
tmp
;

298 
ªs
, 
Àn
;

300 
Àn
 = 
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 0 );

301 i‡(
Àn
 == -1)

304 
tmp
 = *
evbuf
;

305 
tmp
.
buf„r
 +
Àn
;

306 
tmp
.
off
 -
Àn
;

308 
ªs
 = 
	`decode_öt_öã∫Æ
(
∂ígth
, &
tmp
, 0);

309 i‡(
ªs
 == -1)

313 
	}
}

316 
	$evèg_c⁄sume
(
evbuf„r
 *
evbuf
)

318 
ev_uöt32_t
 
Àn
;

319 i‡(
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 1 ) == -1)

321 i‡(
	`evèg_decode_öt
(&
Àn
, 
evbuf
) == -1)

323 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

326 
	}
}

331 
	$evèg_unm¨shÆ
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 *
±ag
, evbuf„∏*
d°
)

333 
ev_uöt32_t
 
Àn
;

334 
ev_uöt32_t
 
öãgî
;

336 i‡(
	`decode_èg_öã∫Æ
(
±ag
, 
§c
, 1 ) == -1)

338 i‡(
	`evèg_decode_öt
(&
öãgî
, 
§c
) == -1)

340 
Àn
 = 
öãgî
;

342 i‡(
	`EVBUFFER_LENGTH
(
§c
Ë< 
Àn
)

345 i‡(
	`evbuf„r_add
(
d°
, 
	`EVBUFFER_DATA
(
§c
), 
Àn
) == -1)

348 
	`evbuf„r_døö
(
§c
, 
Àn
);

350  (
Àn
);

351 
	}
}

356 
	$evèg_unm¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

357 
ev_uöt32_t
 *
pöãgî
)

359 
ev_uöt32_t
 
èg
;

360 
ev_uöt32_t
 
Àn
;

361 
ev_uöt32_t
 
öãgî
;

363 i‡(
	`decode_èg_öã∫Æ
(&
èg
, 
evbuf
, 1 ) == -1)

365 i‡(
√ed_èg
 !
èg
)

367 i‡(
	`evèg_decode_öt
(&
öãgî
, 
evbuf
) == -1)

369 
Àn
 = 
öãgî
;

371 i‡(
	`EVBUFFER_LENGTH
(
evbuf
Ë< 
Àn
)

374 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

375 i‡(
	`evbuf„r_add
(
_buf
, 
	`EVBUFFER_DATA
(
evbuf
), 
Àn
) == -1)

378 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

380  (
	`evèg_decode_öt
(
pöãgî
, 
_buf
));

381 
	}
}

386 
	$evèg_unm¨shÆ_fixed
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 
√ed_èg
, *
d©a
,

387 
size_t
 
Àn
)

389 
ev_uöt32_t
 
èg
;

392 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

395 i‡(
	`evèg_unm¨shÆ
(
§c
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

398 i‡(
	`EVBUFFER_LENGTH
(
_buf
Ë!
Àn
)

401 
	`mem˝y
(
d©a
, 
	`EVBUFFER_DATA
(
_buf
), 
Àn
);

403 
	}
}

406 
	$evèg_unm¨shÆ_°rög
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

407 **
p°rög
)

409 
ev_uöt32_t
 
èg
;

411 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

413 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

416 *
p°rög
 = 
	`ˇŒoc
(
	`EVBUFFER_LENGTH
(
_buf
) + 1, 1);

417 i‡(*
p°rög
 =
NULL
)

418 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

419 
	`evbuf„r_ªmove
(
_buf
, *
p°rög
, 
	`EVBUFFER_LENGTH
(_buf));

422 
	}
}

425 
	$evèg_unm¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

426 
timevÆ
 *
±v
)

428 
ev_uöt32_t
 
èg
;

429 
ev_uöt32_t
 
öãgî
;

431 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

432 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

435 i‡(
	`evèg_decode_öt
(&
öãgî
, 
_buf
) == -1)

437 
±v
->
tv_£c
 = 
öãgî
;

438 i‡(
	`evèg_decode_öt
(&
öãgî
, 
_buf
) == -1)

440 
±v
->
tv_u£c
 = 
öãgî
;

443 
	}
}

	@evhttp.h

27 #i‚de‡
_EVHTTP_H_


28 
	#_EVHTTP_H_


	)

30 
	~<evít.h
>

32 #ifde‡
__˝lu•lus


36 #ifde‡
WIN32


37 
	#WIN32_LEAN_AND_MEAN


	)

38 
	~<wösock2.h
>

39 
	~<wödows.h
>

40 #unde‡
WIN32_LEAN_AND_MEAN


55 
	#HTTP_OK
 200

	)

56 
	#HTTP_NOCONTENT
 204

	)

57 
	#HTTP_MOVEPERM
 301

	)

58 
	#HTTP_MOVETEMP
 302

	)

59 
	#HTTP_NOTMODIFIED
 304

	)

60 
	#HTTP_BADREQUEST
 400

	)

61 
	#HTTP_NOTFOUND
 404

	)

62 
	#HTTP_SERVUNAVAIL
 503

	)

64 
evhâp
;

65 
evhâp_ªque°
;

66 
evkeyvÆq
;

73 
evhâp
 *
evhâp_√w
(
evít_ba£
 *
ba£
);

87 
evhâp_böd_sockë
(
evhâp
 *
hâp
, c⁄° *
addªss
, 
u_sh‹t
 
p‹t
);

105 
evhâp_ac˚±_sockë
(
evhâp
 *
hâp
, 
fd
);

115 
evhâp_‰ì
(
evhâp
* 
hâp
);

118 
evhâp_£t_cb
(
evhâp
 *, const *,

119 (*)(
evhâp_ªque°
 *, *), *);

122 
evhâp_dñ_cb
(
evhâp
 *, const *);

126 
evhâp_£t_gícb
(
evhâp
 *,

127 (*)(
evhâp_ªque°
 *, *), *);

135 
evhâp_£t_timeout
(
evhâp
 *, 
timeout_ö_£cs
);

146 
evhâp_£nd_îr‹
(
evhâp_ªque°
 *
ªq
, 
îr‹
,

147 c⁄° *
ªas⁄
);

157 
evhâp_£nd_ª∂y
(
evhâp_ªque°
 *
ªq
, 
code
,

158 c⁄° *
ªas⁄
, 
evbuf„r
 *
d©abuf
);

161 
evhâp_£nd_ª∂y_°¨t
(
evhâp_ªque°
 *, , const *);

162 
evhâp_£nd_ª∂y_chunk
(
evhâp_ªque°
 *, 
evbuf„r
 *);

163 
evhâp_£nd_ª∂y_íd
(
evhâp_ªque°
 *);

174 
evhâp
 *
evhâp_°¨t
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
);

179 
	eevhâp_cmd_ty≥
 { 
EVHTTP_REQ_GET
, 
EVHTTP_REQ_POST
, 
EVHTTP_REQ_HEAD
 };

181 
	eevhâp_ªque°_köd
 { 
EVHTTP_REQUEST
, 
EVHTTP_RESPONSE
 };

188 
	sevhâp_ªque°
 {

189 #i‡
deföed
(
TAILQ_ENTRY
)

190 
TAILQ_ENTRY
(
evhâp_ªque°
Ë
√xt
;

193 
evhâp_ªque°
 *
tqe_√xt
;

194 
evhâp_ªque°
 **
tqe_¥ev
;

195 } 
√xt
;

199 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

200 
Êags
;

201 
	#EVHTTP_REQ_OWN_CONNECTION
 0x0001

	)

202 
	#EVHTTP_PROXY_REQUEST
 0x0002

	)

204 
evkeyvÆq
 *
öput_hódîs
;

205 
evkeyvÆq
 *
ouçut_hódîs
;

208 *
ªmŸe_ho°
;

209 
u_sh‹t
 
ªmŸe_p‹t
;

211 
evhâp_ªque°_köd
 
köd
;

212 
evhâp_cmd_ty≥
 
ty≥
;

214 *
uri
;

216 
maj‹
;

217 
mö‹
;

219 
ª•⁄£_code
;

220 *
ª•⁄£_code_löe
;

222 
evbuf„r
 *
öput_buf„r
;

223 
ev_öt64_t
 
¡‹ód
;

224 
chunked
;

226 
evbuf„r
 *
ouçut_buf„r
;

229 (*
cb
)(
evhâp_ªque°
 *, *);

230 *
cb_¨g
;

237 (*
chunk_cb
)(
evhâp_ªque°
 *, *);

245 
evhâp_ªque°
 *
evhâp_ªque°_√w
(

246 (*
cb
)(
evhâp_ªque°
 *, *), *
¨g
);

249 
evhâp_ªque°_£t_chunked_cb
(
evhâp_ªque°
 *,

250 (*
cb
)(
evhâp_ªque°
 *, *));

253 
evhâp_ªque°_‰ì
(
evhâp_ªque°
 *
ªq
);

260 
evhâp_c⁄√˘i⁄
 *
evhâp_c⁄√˘i⁄_√w
(

261 c⁄° *
addªss
, 
p‹t
);

264 
evhâp_c⁄√˘i⁄_‰ì
(
evhâp_c⁄√˘i⁄
 *
evc⁄
);

267 
evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

268 c⁄° *
addªss
);

271 
evhâp_c⁄√˘i⁄_£t_loˇl_p‹t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

272 
p‹t
);

275 
evhâp_c⁄√˘i⁄_£t_timeout
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

276 
timeout_ö_£cs
);

279 
evhâp_c⁄√˘i⁄_£t_ªåõs
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

280 
ªåy_max
);

283 
evhâp_c⁄√˘i⁄_£t_˛o£cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

284 (*)(
evhâp_c⁄√˘i⁄
 *, *), *);

290 
evhâp_c⁄√˘i⁄_£t_ba£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

291 
evít_ba£
 *
ba£
);

294 
evhâp_c⁄√˘i⁄_gë_≥î
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

295 **
addªss
, 
u_sh‹t
 *
p‹t
);

298 
evhâp_make_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

299 
evhâp_ªque°
 *
ªq
,

300 
evhâp_cmd_ty≥
 
ty≥
, c⁄° *
uri
);

302 c⁄° *
evhâp_ªque°_uri
(
evhâp_ªque°
 *
ªq
);

306 c⁄° *
evhâp_föd_hódî
(c⁄° 
evkeyvÆq
 *, const *);

307 
evhâp_ªmove_hódî
(
evkeyvÆq
 *, const *);

308 
evhâp_add_hódî
(
evkeyvÆq
 *, const *, const *);

309 
evhâp_˛ór_hódîs
(
evkeyvÆq
 *);

322 *
evhâp_ícode_uri
(c⁄° *
uri
);

333 *
evhâp_decode_uri
(c⁄° *
uri
);

341 
evhâp_∑r£_quîy
(c⁄° *
uri
, 
evkeyvÆq
 *);

355 *
evhâp_htmÀsˇ≥
(c⁄° *
html
);

357 #ifde‡
__˝lu•lus


	@evport.c

53 #ifde‡
HAVE_CONFIG_H


54 
	~"c⁄fig.h
"

57 
	~<sys/time.h
>

58 
	~<as£π.h
>

59 
	~<sys/queue.h
>

60 
	~<î∫o.h
>

61 
	~<pﬁl.h
>

62 
	~<p‹t.h
>

63 
	~<sig«l.h
>

64 
	~<°dio.h
>

65 
	~<°dlib.h
>

66 
	~<°rög.h
>

67 
	~<time.h
>

68 
	~<uni°d.h
>

69 #ifde‡
CHECK_INVARIANTS


70 
	~<as£π.h
>

73 
	~"evít.h
"

74 
	~"evít-öã∫Æ.h
"

75 
	~"log.h
"

76 
	~"evsig«l.h
"

84 
	#DEFAULT_NFDS
 16

	)

92 
	#EVENTS_PER_GETN
 8

	)

99 
	sfd_öfo
 {

100 
evít
* 
	mfdi_ªvt
;

101 
evít
* 
	mfdi_wevt
;

104 
	#FDI_HAS_READ
(
fdi
Ë((fdi)->
fdi_ªvt
 !
NULL
)

	)

105 
	#FDI_HAS_WRITE
(
fdi
Ë((fdi)->
fdi_wevt
 !
NULL
)

	)

106 
	#FDI_HAS_EVENTS
(
fdi
Ë(
	`FDI_HAS_READ
(fdiË|| 
	`FDI_HAS_WRITE
(fdi))

	)

107 
	#FDI_TO_SYSEVENTS
(
fdi
Ë(
	`FDI_HAS_READ
(fdiË? 
POLLIN
 : 0) | \

108 (
	`FDI_HAS_WRITE
(
fdi
Ë? 
POLLOUT
 : 0)

	)

110 
	sevp‹t_d©a
 {

111 
	med_p‹t
;

112 
	med_√víts
;

113 
fd_öfo
 *
	med_fds
;

115 
	med_≥ndög
[
EVENTS_PER_GETN
];

118 * 
evp‹t_öô
 (
evít_ba£
 *);

119 
evp‹t_add
 (*, 
evít
 *);

120 
evp‹t_dñ
 (*, 
evít
 *);

121 
evp‹t_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

122 
evp‹t_dóŒoc
 (
evít_ba£
 *, *);

124 c⁄° 
evít›
 
	gevp‹t›s
 = {

126 
evp‹t_öô
,

127 
evp‹t_add
,

128 
evp‹t_dñ
,

129 
evp‹t_di•©ch
,

130 
evp‹t_dóŒoc
,

139 
	$evp‹t_öô
(
evít_ba£
 *
ba£
)

141 
evp‹t_d©a
 *
evpd
;

142 
i
;

146 i‡(
	`gëív
("EVENT_NOEVPORT"))

147  (
NULL
);

149 i‡(!(
evpd
 = 
	`ˇŒoc
(1, (
evp‹t_d©a
))))

150  (
NULL
);

152 i‡((
evpd
->
ed_p‹t
 = 
	`p‹t_¸óã
()) == -1) {

153 
	`‰ì
(
evpd
);

154  (
NULL
);

160 
evpd
->
ed_fds
 = 
	`ˇŒoc
(
DEFAULT_NFDS
, (
fd_öfo
));

161 i‡(
evpd
->
ed_fds
 =
NULL
) {

162 
	`˛o£
(
evpd
->
ed_p‹t
);

163 
	`‰ì
(
evpd
);

164  (
NULL
);

166 
evpd
->
ed_√víts
 = 
DEFAULT_NFDS
;

167 
i
 = 0; i < 
EVENTS_PER_GETN
; i++)

168 
evpd
->
ed_≥ndög
[
i
] = -1;

170 
	`evsig«l_öô
(
ba£
);

172  (
evpd
);

173 
	}
}

175 #ifde‡
CHECK_INVARIANTS


183 
	$check_evp‹t›
(
evp‹t_d©a
 *
evpd
)

185 
	`as£π
(
evpd
);

186 
	`as£π
(
evpd
->
ed_√víts
 > 0);

187 
	`as£π
(
evpd
->
ed_p‹t
 > 0);

188 
	`as£π
(
evpd
->
ed_fds
 > 0);

195 
i
;

196 
i
 = 0; i < 
evpd
->
ed_√víts
; ++i) {

197 
evít
 *
ev
;

198 
fd_öfo
 *
fdi
;

200 
fdi
 = &
evpd
->
ed_fds
[
i
];

201 i‡((
ev
 = 
fdi
->
fdi_ªvt
Ë!
NULL
) {

202 
	`as£π
(
ev
->
ev_fd
 =
i
);

204 i‡((
ev
 = 
fdi
->
fdi_wevt
Ë!
NULL
) {

205 
	`as£π
(
ev
->
ev_fd
 =
i
);

208 
	}
}

214 
	$check_evít
(
p‹t_evít_t
* 
≥vt
)

222 
	`as£π
(
≥vt
->
p‹ãv_sour˚
 =
PORT_SOURCE_FD
);

223 
	`as£π
(
≥vt
->
p‹ãv_u£r
 =
NULL
);

224 
	}
}

227 
	#check_evp‹t›
(
ï›
)

	)

228 
	#check_evít
(
≥vt
)

	)

235 
	$grow
(
evp‹t_d©a
 *
ïdp
, 
Á˘‹
)

237 
fd_öfo
 *
tmp
;

238 
ﬁdsize
 = 
ïdp
->
ed_√víts
;

239 
√wsize
 = 
Á˘‹
 * 
ﬁdsize
;

240 
	`as£π
(
Á˘‹
 > 1);

242 
	`check_evp‹t›
(
ïdp
);

244 
tmp
 = 
	`ªÆloc
(
ïdp
->
ed_fds
, (
fd_öfo
Ë* 
√wsize
);

245 i‡(
NULL
 =
tmp
)

247 
ïdp
->
ed_fds
 = 
tmp
;

248 
	`mem£t
((*Ë(
ïdp
->
ed_fds
 + 
ﬁdsize
), 0,

249 (
√wsize
 - 
ﬁdsize
)*(
fd_öfo
));

250 
ïdp
->
ed_√víts
 = 
√wsize
;

252 
	`check_evp‹t›
(
ïdp
);

255 
	}
}

263 
	$ªassocüã
(
evp‹t_d©a
 *
ïdp
, 
fd_öfo
 *
fdù
, 
fd
)

265 
sy£víts
 = 
	`FDI_TO_SYSEVENTS
(
fdù
);

267 i‡(
sy£víts
 != 0) {

268 i‡(
	`p‹t_assocüã
(
ïdp
->
ed_p‹t
, 
PORT_SOURCE_FD
,

269 
fd
, 
sy£víts
, 
NULL
) == -1) {

270 
	`evít_w¨n
("port_associate");

275 
	`check_evp‹t›
(
ïdp
);

278 
	}
}

286 
	$evp‹t_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

288 
i
, 
ªs
;

289 
evp‹t_d©a
 *
ïdp
 = 
¨g
;

290 
p‹t_evít_t
 
≥véi°
[
EVENTS_PER_GETN
];

298 
√víts
 = 1;

305 
time•ec
 
ts
;

306 
time•ec
 *
ts_p
 = 
NULL
;

307 i‡(
tv
 !
NULL
) {

308 
ts
.
tv_£c
 = 
tv
->tv_sec;

309 
ts
.
tv_n£c
 = 
tv
->
tv_u£c
 * 1000;

310 
ts_p
 = &
ts
;

318 
i
 = 0; i < 
EVENTS_PER_GETN
; ++i) {

319 
fd_öfo
 *
fdi
 = 
NULL
;

320 i‡(
ïdp
->
ed_≥ndög
[
i
] != -1) {

321 
fdi
 = &(
ïdp
->
ed_fds
[ïdp->
ed_≥ndög
[
i
]]);

324 i‡(
fdi
 !
NULL
 && 
	`FDI_HAS_EVENTS
(fdi)) {

325 
fd
 = 
	`FDI_HAS_READ
(
fdi
Ë? fdi->
fdi_ªvt
->
ev_fd
 :

326 
fdi
->
fdi_wevt
->
ev_fd
;

327 
	`ªassocüã
(
ïdp
, 
fdi
, 
fd
);

328 
ïdp
->
ed_≥ndög
[
i
] = -1;

332 i‡((
ªs
 = 
	`p‹t_gën
(
ïdp
->
ed_p‹t
, 
≥véi°
, 
EVENTS_PER_GETN
,

333 (*Ë&
√víts
, 
ts_p
)) == -1) {

334 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

335 
	`evsig«l_¥o˚ss
(
ba£
);

337 } i‡(
î∫o
 =
ETIME
) {

338 i‡(
√víts
 == 0)

341 
	`evít_w¨n
("port_getn");

344 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

345 
	`evsig«l_¥o˚ss
(
ba£
);

348 
	`evít_debug
(("%s:Ö‹t_gë¿ªp‹t†%dÉvíts", 
__func__
, 
√víts
));

350 
i
 = 0; i < 
√víts
; ++i) {

351 
evít
 *
ev
;

352 
fd_öfo
 *
fdi
;

353 
p‹t_evít_t
 *
≥vt
 = &
≥véi°
[
i
];

354 
fd
 = (Ë
≥vt
->
p‹ãv_obje˘
;

356 
	`check_evp‹t›
(
ïdp
);

357 
	`check_evít
(
≥vt
);

358 
ïdp
->
ed_≥ndög
[
i
] = 
fd
;

364 
ªs
 = 0;

365 i‡(
≥vt
->
p‹ãv_evíts
 & 
POLLIN
)

366 
ªs
 |
EV_READ
;

367 i‡(
≥vt
->
p‹ãv_evíts
 & 
POLLOUT
)

368 
ªs
 |
EV_WRITE
;

370 
	`as£π
(
ïdp
->
ed_√víts
 > 
fd
);

371 
fdi
 = &(
ïdp
->
ed_fds
[
fd
]);

379 i‡((
ªs
 & 
EV_READ
Ë&& ((
ev
 = 
fdi
->
fdi_ªvt
Ë!
NULL
)) {

380 
	`evít_a˘ive
(
ev
, 
ªs
, 1);

383 i‡((
ªs
 & 
EV_WRITE
Ë&& ((
ev
 = 
fdi
->
fdi_wevt
Ë!
NULL
)) {

384 
	`evít_a˘ive
(
ev
, 
ªs
, 1);

388 
	`check_evp‹t›
(
ïdp
);

391 
	}
}

400 
	$evp‹t_add
(*
¨g
, 
evít
 *
ev
)

402 
evp‹t_d©a
 *
evpd
 = 
¨g
;

403 
fd_öfo
 *
fdi
;

404 
Á˘‹
;

406 
	`check_evp‹t›
(
evpd
);

411 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

412  (
	`evsig«l_add
(
ev
));

418 
Á˘‹
 = 1;

419 
ev
->
ev_fd
 >
Á˘‹
 * 
evpd
->
ed_√víts
)

420 
Á˘‹
 *= 2;

422 i‡(
Á˘‹
 > 1) {

423 i‡(-1 =
	`grow
(
evpd
, 
Á˘‹
)) {

428 
fdi
 = &
evpd
->
ed_fds
[
ev
->
ev_fd
];

429 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

430 
fdi
->
fdi_ªvt
 = 
ev
;

431 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

432 
fdi
->
fdi_wevt
 = 
ev
;

434  
	`ªassocüã
(
evpd
, 
fdi
, 
ev
->
ev_fd
);

435 
	}
}

442 
	$evp‹t_dñ
(*
¨g
, 
evít
 *
ev
)

444 
evp‹t_d©a
 *
evpd
 = 
¨g
;

445 
fd_öfo
 *
fdi
;

446 
i
;

447 
assocüãd
 = 1;

449 
	`check_evp‹t›
(
evpd
);

454 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

455  (
	`evsig«l_dñ
(
ev
));

458 i‡(
evpd
->
ed_√víts
 < 
ev
->
ev_fd
) {

462 
i
 = 0; i < 
EVENTS_PER_GETN
; ++i) {

463 i‡(
evpd
->
ed_≥ndög
[
i
] =
ev
->
ev_fd
) {

464 
assocüãd
 = 0;

469 
fdi
 = &
evpd
->
ed_fds
[
ev
->
ev_fd
];

470 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

471 
fdi
->
fdi_ªvt
 = 
NULL
;

472 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

473 
fdi
->
fdi_wevt
 = 
NULL
;

475 i‡(
assocüãd
) {

476 i‡(!
	`FDI_HAS_EVENTS
(
fdi
) &&

477 
	`p‹t_dissocüã
(
evpd
->
ed_p‹t
, 
PORT_SOURCE_FD
,

478 
ev
->
ev_fd
) == -1) {

483 i‡(
î∫o
 !
EBADFD
) {

484 
	`evít_w¨n
("port_dissociate");

488 i‡(
	`FDI_HAS_EVENTS
(
fdi
)) {

489  (
	`ªassocüã
(
evpd
, 
fdi
, 
ev
->
ev_fd
));

493 i‡(
fdi
->
fdi_ªvt
 =
NULL
 && fdi->
fdi_wevt
 == NULL) {

494 
evpd
->
ed_≥ndög
[
i
] = -1;

498 
	}
}

502 
	$evp‹t_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

504 
evp‹t_d©a
 *
evpd
 = 
¨g
;

506 
	`evsig«l_dóŒoc
(
ba£
);

508 
	`˛o£
(
evpd
->
ed_p‹t
);

510 i‡(
evpd
->
ed_fds
)

511 
	`‰ì
(
evpd
->
ed_fds
);

512 
	`‰ì
(
evpd
);

513 
	}
}

	@evrpc-internal.h

27 #i‚de‡
_EVRPC_INTERNAL_H_


28 
	#_EVRPC_INTERNAL_H_


	)

30 
	~"hâp-öã∫Æ.h
"

32 
	gevΩc
;

34 
	#EVRPC_URI_PREFIX
 "/.Ωc."

	)

36 
	sevΩc_hook
 {

37 
TAILQ_ENTRY
(
evΩc_hook
Ë(
	m√xt
);

40 (*
	m¥o˚ss
)(
	mevhâp_ªque°
 *, 
	mevbuf„r
 *, *);

41 *
	m¥o˚ss_¨g
;

44 
TAILQ_HEAD
(
evΩc_hook_li°
, 
evΩc_hook
);

51 
	s_evΩc_hooks
 {

53 
evΩc_hook_li°
 
	mö_hooks
;

54 
evΩc_hook_li°
 
	mout_hooks
;

57 
	#öput_hooks
 
comm⁄
.
ö_hooks


	)

58 
	#ouçut_hooks
 
comm⁄
.
out_hooks


	)

60 
	sevΩc_ba£
 {

61 
_evΩc_hooks
 
	mcomm⁄
;

64 
evhâp
* 
	mhâp_£rvî
;

67 
TAILQ_HEAD
(
evΩc_li°
, 
evΩc
Ë
	mªgi°îed_Ωcs
;

70 
	gevΩc_ªq_gíîic
;

71 
evΩc_ªq°©e_‰ì
(
evΩc_ªq_gíîic
* 
Ωc_°©e
);

74 
	sevΩc_poﬁ
 {

75 
_evΩc_hooks
 
	mcomm⁄
;

77 
evít_ba£
 *
	mba£
;

79 
evc⁄q
 
	mc⁄√˘i⁄s
;

81 
	mtimeout
;

83 
TAILQ_HEAD
(
evΩc_ªque°q
, 
evΩc_ªque°_wøµî
Ë
	mªque°s
;

	@evrpc.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	#WIN32_LEAN_AND_MEAN


	)

33 
	~<wösock2.h
>

34 
	~<wödows.h
>

35 #unde‡
WIN32_LEAN_AND_MEAN


38 
	~<sys/ty≥s.h
>

39 #i‚de‡
WIN32


40 
	~<sys/sockë.h
>

42 #ifde‡
HAVE_SYS_TIME_H


43 
	~<sys/time.h
>

45 
	~<sys/queue.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 #i‚de‡
WIN32


49 
	~<uni°d.h
>

51 
	~<î∫o.h
>

52 
	~<sig«l.h
>

53 
	~<°rög.h
>

54 
	~<as£π.h
>

56 
	~"evít.h
"

57 
	~"evΩc.h
"

58 
	~"evΩc-öã∫Æ.h
"

59 
	~"evhâp.h
"

60 
	~"evutû.h
"

61 
	~"log.h
"

63 
evΩc_ba£
 *

64 
	$evΩc_öô
(
evhâp
 *
hâp_£rvî
)

66 
evΩc_ba£
* 
ba£
 = 
	`ˇŒoc
(1, (evrpc_base));

67 i‡(
ba£
 =
NULL
)

68  (
NULL
);

71 
	`evèg_öô
();

73 
	`TAILQ_INIT
(&
ba£
->
ªgi°îed_Ωcs
);

74 
	`TAILQ_INIT
(&
ba£
->
öput_hooks
);

75 
	`TAILQ_INIT
(&
ba£
->
ouçut_hooks
);

76 
ba£
->
hâp_£rvî
 = http_server;

78  (
ba£
);

79 
	}
}

82 
	$evΩc_‰ì
(
evΩc_ba£
 *
ba£
)

84 
evΩc
 *
Ωc
;

85 
evΩc_hook
 *
hook
;

87 (
Ωc
 = 
	`TAILQ_FIRST
(&
ba£
->
ªgi°îed_Ωcs
)Ë!
NULL
) {

88 
	`as£π
(
	`evΩc_uƒegi°î_Ωc
(
ba£
, 
Ωc
->
uri
));

90 (
hook
 = 
	`TAILQ_FIRST
(&
ba£
->
öput_hooks
)Ë!
NULL
) {

91 
	`as£π
(
	`evΩc_ªmove_hook
(
ba£
, 
EVRPC_INPUT
, 
hook
));

93 (
hook
 = 
	`TAILQ_FIRST
(&
ba£
->
ouçut_hooks
)Ë!
NULL
) {

94 
	`as£π
(
	`evΩc_ªmove_hook
(
ba£
, 
EVRPC_OUTPUT
, 
hook
));

96 
	`‰ì
(
ba£
);

97 
	}
}

100 
evΩc_add_hook
(*
vba£
,

101 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

102 (*
cb
)(
evhâp_ªque°
 *, 
evbuf„r
 *, *),

103 *
cb_¨g
)

105 
_evΩc_hooks
 *
ba£
 = 
vba£
;

106 
evΩc_hook_li°
 *
hód
 = 
NULL
;

107 
evΩc_hook
 *
hook
 = 
NULL
;

108 
hook_ty≥
) {

109 
EVRPC_INPUT
:

110 
hód
 = &
ba£
->
ö_hooks
;

112 
EVRPC_OUTPUT
:

113 
hód
 = &
ba£
->
out_hooks
;

116 
	`as£π
(
hook_ty≥
 =
EVRPC_INPUT
 || hook_ty≥ =
EVRPC_OUTPUT
);

119 
hook
 = 
	`ˇŒoc
(1, (
evΩc_hook
));

120 
	`as£π
(
hook
 !
NULL
);

122 
hook
->
¥o˚ss
 = 
cb
;

123 
hook
->
¥o˚ss_¨g
 = 
cb_¨g
;

124 
	`TAILQ_INSERT_TAIL
(
hód
, 
hook
, 
√xt
);

126  (
hook
);

127 
	}
}

130 
	$evΩc_ªmove_hook_öã∫Æ
(
evΩc_hook_li°
 *
hód
, *
h™dÀ
)

132 
evΩc_hook
 *
hook
 = 
NULL
;

133 
	`TAILQ_FOREACH
(
hook
, 
hód
, 
√xt
) {

134 i‡(
hook
 =
h™dÀ
) {

135 
	`TAILQ_REMOVE
(
hód
, 
hook
, 
√xt
);

136 
	`‰ì
(
hook
);

142 
	}
}

149 
	$evΩc_ªmove_hook
(*
vba£
, 
EVRPC_HOOK_TYPE
 
hook_ty≥
, *
h™dÀ
)

151 
_evΩc_hooks
 *
ba£
 = 
vba£
;

152 
evΩc_hook_li°
 *
hód
 = 
NULL
;

153 
hook_ty≥
) {

154 
EVRPC_INPUT
:

155 
hód
 = &
ba£
->
ö_hooks
;

157 
EVRPC_OUTPUT
:

158 
hód
 = &
ba£
->
out_hooks
;

161 
	`as£π
(
hook_ty≥
 =
EVRPC_INPUT
 || hook_ty≥ =
EVRPC_OUTPUT
);

164  (
	`evΩc_ªmove_hook_öã∫Æ
(
hód
, 
h™dÀ
));

165 
	}
}

168 
	$evΩc_¥o˚ss_hooks
(
evΩc_hook_li°
 *
hód
,

169 
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
evbuf
)

171 
evΩc_hook
 *
hook
;

172 
	`TAILQ_FOREACH
(
hook
, 
hód
, 
√xt
) {

173 i‡(
hook
->
	`¥o˚ss
(
ªq
, 
evbuf
, hook->
¥o˚ss_¨g
) == -1)

178 
	}
}

180 
evΩc_poﬁ_scheduÀ
(
evΩc_poﬁ
 *
poﬁ
);

181 
evΩc_ªque°_cb
(
evhâp_ªque°
 *, *);

182 
evΩc_ªque°_d⁄e
(
evΩc_ªq_gíîic
*);

191 
	$evΩc_c⁄°ru˘_uri
(c⁄° *
uri
)

193 *
c⁄°ru˘ed_uri
;

194 
c⁄°ru˘ed_uri_Àn
;

196 
c⁄°ru˘ed_uri_Àn
 = 
	`°æí
(
EVRPC_URI_PREFIX
Ë+ såÀn(
uri
) + 1;

197 i‡((
c⁄°ru˘ed_uri
 = 
	`mÆloc
(
c⁄°ru˘ed_uri_Àn
)Ë=
NULL
)

198 
	`evít_îr
(1, "%s: failedÅoÑegisterÑpcát %s",

199 
__func__
, 
uri
);

200 
	`mem˝y
(
c⁄°ru˘ed_uri
, 
EVRPC_URI_PREFIX
, 
	`°æí
(EVRPC_URI_PREFIX));

201 
	`mem˝y
(
c⁄°ru˘ed_uri
 + 
	`°æí
(
EVRPC_URI_PREFIX
), 
uri
, strlen(uri));

202 
c⁄°ru˘ed_uri
[
c⁄°ru˘ed_uri_Àn
 - 1] = '\0';

204  (
c⁄°ru˘ed_uri
);

205 
	}
}

208 
evΩc_ªgi°î_Ωc
(
evΩc_ba£
 *
ba£
, 
evΩc
 *
Ωc
,

209 (*
cb
)(
evΩc_ªq_gíîic
 *, *), *
cb_¨g
)

211 *
c⁄°ru˘ed_uri
 = 
	`evΩc_c⁄°ru˘_uri
(
Ωc
->
uri
);

213 
Ωc
->
ba£
 = base;

214 
Ωc
->
cb
 = cb;

215 
Ωc
->
cb_¨g
 = cb_arg;

217 
	`TAILQ_INSERT_TAIL
(&
ba£
->
ªgi°îed_Ωcs
, 
Ωc
, 
√xt
);

219 
	`evhâp_£t_cb
(
ba£
->
hâp_£rvî
,

220 
c⁄°ru˘ed_uri
,

221 
evΩc_ªque°_cb
,

222 
Ωc
);

224 
	`‰ì
(
c⁄°ru˘ed_uri
);

227 
	}
}

230 
	$evΩc_uƒegi°î_Ωc
(
evΩc_ba£
 *
ba£
, c⁄° *
«me
)

232 *
ªgi°îed_uri
 = 
NULL
;

233 
evΩc
 *
Ωc
;

236 
	`TAILQ_FOREACH
(
Ωc
, &
ba£
->
ªgi°îed_Ωcs
, 
√xt
) {

237 i‡(
	`°rcmp
(
Ωc
->
uri
, 
«me
) == 0)

240 i‡(
Ωc
 =
NULL
) {

244 
	`TAILQ_REMOVE
(&
ba£
->
ªgi°îed_Ωcs
, 
Ωc
, 
√xt
);

246 
	`‰ì
((*)
Ωc
->
uri
);

247 
	`‰ì
(
Ωc
);

249 
ªgi°îed_uri
 = 
	`evΩc_c⁄°ru˘_uri
(
«me
);

252 
	`as£π
(
	`evhâp_dñ_cb
(
ba£
->
hâp_£rvî
, 
ªgi°îed_uri
) == 0);

254 
	`‰ì
(
ªgi°îed_uri
);

256 
	}
}

259 
	$evΩc_ªque°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

261 
evΩc
 *
Ωc
 = 
¨g
;

262 
evΩc_ªq_gíîic
 *
Ωc_°©e
 = 
NULL
;

265 i‡(
ªq
->
ty≥
 !
EVHTTP_REQ_POST
 ||

266 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) <= 0)

267 
îr‹
;

274 i‡(
	`evΩc_¥o˚ss_hooks
(&
Ωc
->
ba£
->
öput_hooks
,

275 
ªq
,Ñeq->
öput_buf„r
) == -1)

276 
îr‹
;

278 
Ωc_°©e
 = 
	`ˇŒoc
(1, (
evΩc_ªq_gíîic
));

279 i‡(
Ωc_°©e
 =
NULL
)

280 
îr‹
;

283 
Ωc_°©e
->
ªque°
 = 
Ωc
->
	`ªque°_√w
();

284 i‡(
Ωc_°©e
->
ªque°
 =
NULL
)

285 
îr‹
;

287 
Ωc_°©e
->
Ωc
 =Ñpc;

289 i‡(
Ωc
->
	`ªque°_unm¨shÆ
(

290 
Ωc_°©e
->
ªque°
, 
ªq
->
öput_buf„r
) == -1) {

292 
îr‹
;

297 
Ωc_°©e
->
ª∂y
 = 
Ωc
->
	`ª∂y_√w
();

298 i‡(
Ωc_°©e
->
ª∂y
 =
NULL
)

299 
îr‹
;

301 
Ωc_°©e
->
hâp_ªq
 = 
ªq
;

302 
Ωc_°©e
->
d⁄e
 = 
evΩc_ªque°_d⁄e
;

305 
Ωc
->
	`cb
(
Ωc_°©e
,Ñpc->
cb_¨g
);

309 
îr‹
:

310 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

311 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_SERVUNAVAIL
, "Service Error");

313 
	}
}

316 
	$evΩc_ªq°©e_‰ì
(
evΩc_ªq_gíîic
* 
Ωc_°©e
)

319 i‡(
Ωc_°©e
 !
NULL
) {

320 
evΩc
 *
Ωc
 = 
Ωc_°©e
->rpc;

322 i‡(
Ωc_°©e
->
ªque°
 !
NULL
)

323 
Ωc
->
	`ªque°_‰ì
(
Ωc_°©e
->
ªque°
);

324 i‡(
Ωc_°©e
->
ª∂y
 !
NULL
)

325 
Ωc
->
	`ª∂y_‰ì
(
Ωc_°©e
->
ª∂y
);

326 
	`‰ì
(
Ωc_°©e
);

328 
	}
}

331 
	$evΩc_ªque°_d⁄e
(
evΩc_ªq_gíîic
* 
Ωc_°©e
)

333 
evhâp_ªque°
 *
ªq
 = 
Ωc_°©e
->
hâp_ªq
;

334 
evΩc
 *
Ωc
 = 
Ωc_°©e
->rpc;

335 
evbuf„r
* 
d©a
 = 
NULL
;

337 i‡(
Ωc
->
	`ª∂y_com∂ëe
(
Ωc_°©e
->
ª∂y
) == -1) {

339 
îr‹
;

342 i‡((
d©a
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

344 
îr‹
;

348 
Ωc
->
	`ª∂y_m¨shÆ
(
d©a
, 
Ωc_°©e
->
ª∂y
);

351 i‡(
	`evΩc_¥o˚ss_hooks
(&
Ωc
->
ba£
->
ouçut_hooks
,

352 
ªq
, 
d©a
) == -1)

353 
îr‹
;

356 i‡(
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

357 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

361 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "OK", 
d©a
);

363 
	`evbuf„r_‰ì
(
d©a
);

365 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

369 
îr‹
:

370 i‡(
d©a
 !
NULL
)

371 
	`evbuf„r_‰ì
(
d©a
);

372 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

373 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_SERVUNAVAIL
, "Service Error");

375 
	}
}

379 
evΩc_scheduÀ_ªque°
(
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
,

380 
evΩc_ªque°_wøµî
 *
˘x
);

382 
evΩc_poﬁ
 *

383 
	$evΩc_poﬁ_√w
(
evít_ba£
 *
ba£
)

385 
evΩc_poﬁ
 *
poﬁ
 = 
	`ˇŒoc
(1, (evrpc_pool));

386 i‡(
poﬁ
 =
NULL
)

387  (
NULL
);

389 
	`TAILQ_INIT
(&
poﬁ
->
c⁄√˘i⁄s
);

390 
	`TAILQ_INIT
(&
poﬁ
->
ªque°s
);

392 
	`TAILQ_INIT
(&
poﬁ
->
öput_hooks
);

393 
	`TAILQ_INIT
(&
poﬁ
->
ouçut_hooks
);

395 
poﬁ
->
ba£
 = base;

396 
poﬁ
->
timeout
 = -1;

398  (
poﬁ
);

399 
	}
}

402 
	$evΩc_ªque°_wøµî_‰ì
(
evΩc_ªque°_wøµî
 *
ªque°
)

404 
	`‰ì
(
ªque°
->
«me
);

405 
	`‰ì
(
ªque°
);

406 
	}
}

409 
	$evΩc_poﬁ_‰ì
(
evΩc_poﬁ
 *
poﬁ
)

411 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
;

412 
evΩc_ªque°_wøµî
 *
ªque°
;

413 
evΩc_hook
 *
hook
;

415 (
ªque°
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
)Ë!
NULL
) {

416 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
ªque°
, 
√xt
);

418 
	`evΩc_ªque°_wøµî_‰ì
(
ªque°
);

421 (
c⁄√˘i⁄
 = 
	`TAILQ_FIRST
(&
poﬁ
->
c⁄√˘i⁄s
)Ë!
NULL
) {

422 
	`TAILQ_REMOVE
(&
poﬁ
->
c⁄√˘i⁄s
, 
c⁄√˘i⁄
, 
√xt
);

423 
	`evhâp_c⁄√˘i⁄_‰ì
(
c⁄√˘i⁄
);

426 (
hook
 = 
	`TAILQ_FIRST
(&
poﬁ
->
öput_hooks
)Ë!
NULL
) {

427 
	`as£π
(
	`evΩc_ªmove_hook
(
poﬁ
, 
EVRPC_INPUT
, 
hook
));

430 (
hook
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ouçut_hooks
)Ë!
NULL
) {

431 
	`as£π
(
	`evΩc_ªmove_hook
(
poﬁ
, 
EVRPC_OUTPUT
, 
hook
));

434 
	`‰ì
(
poﬁ
);

435 
	}
}

443 
	$evΩc_poﬁ_add_c⁄√˘i⁄
(
evΩc_poﬁ
 *
poﬁ
,

444 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
) {

445 
	`as£π
(
c⁄√˘i⁄
->
hâp_£rvî
 =
NULL
);

446 
	`TAILQ_INSERT_TAIL
(&
poﬁ
->
c⁄√˘i⁄s
, 
c⁄√˘i⁄
, 
√xt
);

451 i‡(
poﬁ
->
ba£
 !
NULL
)

452 
	`evhâp_c⁄√˘i⁄_£t_ba£
(
c⁄√˘i⁄
, 
poﬁ
->
ba£
);

458 i‡(
c⁄√˘i⁄
->
timeout
 == -1)

459 
c⁄√˘i⁄
->
timeout
 = 
poﬁ
->timeout;

466 i‡(
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
Ë!
NULL
) {

467 
evΩc_ªque°_wøµî
 *
ªque°
 =

468 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
);

469 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
ªque°
, 
√xt
);

470 
	`evΩc_scheduÀ_ªque°
(
c⁄√˘i⁄
, 
ªque°
);

472 
	}
}

475 
	$evΩc_poﬁ_£t_timeout
(
evΩc_poﬁ
 *
poﬁ
, 
timeout_ö_£cs
)

477 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

478 
	`TAILQ_FOREACH
(
evc⁄
, &
poﬁ
->
c⁄√˘i⁄s
, 
√xt
) {

479 
evc⁄
->
timeout
 = 
timeout_ö_£cs
;

481 
poﬁ
->
timeout
 = 
timeout_ö_£cs
;

482 
	}
}

485 
evΩc_ª∂y_d⁄e
(
evhâp_ªque°
 *, *);

486 
evΩc_ªque°_timeout
(, , *);

492 
evhâp_c⁄√˘i⁄
 *

493 
	$evΩc_poﬁ_föd_c⁄√˘i⁄
(
evΩc_poﬁ
 *
poﬁ
)

495 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
;

496 
	`TAILQ_FOREACH
(
c⁄√˘i⁄
, &
poﬁ
->
c⁄√˘i⁄s
, 
√xt
) {

497 i‡(
	`TAILQ_FIRST
(&
c⁄√˘i⁄
->
ªque°s
Ë=
NULL
)

498  (
c⁄√˘i⁄
);

501  (
NULL
);

502 
	}
}

508 
	$evΩc_scheduÀ_ªque°
(
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
,

509 
evΩc_ªque°_wøµî
 *
˘x
)

511 
evhâp_ªque°
 *
ªq
 = 
NULL
;

512 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

513 
evΩc_°©us
 
°©us
;

514 *
uri
 = 
NULL
;

515 
ªs
 = 0;

517 i‡((
ªq
 = 
	`evhâp_ªque°_√w
(
evΩc_ª∂y_d⁄e
, 
˘x
)Ë=
NULL
)

518 
îr‹
;

521 
˘x
->
	`ªque°_m¨shÆ
(
ªq
->
ouçut_buf„r
, ctx->
ªque°
);

523 
uri
 = 
	`evΩc_c⁄°ru˘_uri
(
˘x
->
«me
);

524 i‡(
uri
 =
NULL
)

525 
îr‹
;

528 
˘x
->
evc⁄
 = 
c⁄√˘i⁄
;

531 i‡(
	`evΩc_¥o˚ss_hooks
(&
poﬁ
->
ouçut_hooks
,

532 
ªq
,Ñeq->
ouçut_buf„r
) == -1)

533 
îr‹
;

535 i‡(
poﬁ
->
timeout
 > 0) {

539 
timevÆ
 
tv
;

540 
	`evutû_timî˛ór
(&
tv
);

541 
tv
.
tv_£c
 = 
poﬁ
->
timeout
;

542 
	`evtimî_add
(&
˘x
->
ev_timeout
, &
tv
);

546 
ªs
 = 
	`evhâp_make_ªque°
(
c⁄√˘i⁄
, 
ªq
, 
EVHTTP_REQ_POST
, 
uri
);

547 
	`‰ì
(
uri
);

549 i‡(
ªs
 == -1)

550 
îr‹
;

554 
îr‹
:

555 
	`mem£t
(&
°©us
, 0, (status));

556 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_UNSTARTED
;

557 (*
˘x
->
cb
)(&
°©us
, ctx->
ªque°
, ctx->
ª∂y
, ctx->
cb_¨g
);

558 
	`evΩc_ªque°_wøµî_‰ì
(
˘x
);

560 
	}
}

563 
	$evΩc_make_ªque°
(
evΩc_ªque°_wøµî
 *
˘x
)

565 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

568 
	`evtimî_£t
(&
˘x
->
ev_timeout
, 
evΩc_ªque°_timeout
, ctx);

569 i‡(
poﬁ
->
ba£
 !
NULL
)

570 
	`evít_ba£_£t
(
poﬁ
->
ba£
, &
˘x
->
ev_timeout
);

573 
	`as£π
(
	`TAILQ_FIRST
(&
poﬁ
->
c⁄√˘i⁄s
Ë!
NULL
);

579 
	`TAILQ_INSERT_TAIL
(&
poﬁ
->
ªque°s
, 
˘x
, 
√xt
);

581 
	`evΩc_poﬁ_scheduÀ
(
poﬁ
);

584 
	}
}

587 
	$evΩc_ª∂y_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

589 
evΩc_ªque°_wøµî
 *
˘x
 = 
¨g
;

590 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

591 
evΩc_°©us
 
°©us
;

592 
ªs
 = -1;

595 
	`evít_dñ
(&
˘x
->
ev_timeout
);

597 
	`mem£t
(&
°©us
, 0, (status));

598 
°©us
.
hâp_ªq
 = 
ªq
;

601 i‡(
ªq
 !
NULL
) {

603 i‡(
	`evΩc_¥o˚ss_hooks
(&
poﬁ
->
öput_hooks
,

604 
ªq
,Ñeq->
öput_buf„r
) == -1) {

605 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_HOOKABORTED
;

606 
ªs
 = -1;

608 
ªs
 = 
˘x
->
	`ª∂y_unm¨shÆ
(˘x->
ª∂y
,

609 
ªq
->
öput_buf„r
);

610 i‡(
ªs
 == -1) {

611 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_BADPAYLOAD
;

615 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_TIMEOUT
;

618 i‡(
ªs
 == -1) {

620 
˘x
->
	`ª∂y_˛ór
(˘x->
ª∂y
);

623 (*
˘x
->
cb
)(&
°©us
, ctx->
ªque°
, ctx->
ª∂y
, ctx->
cb_¨g
);

625 
	`evΩc_ªque°_wøµî_‰ì
(
˘x
);

630 
	`evΩc_poﬁ_scheduÀ
(
poﬁ
);

631 
	}
}

634 
	$evΩc_poﬁ_scheduÀ
(
evΩc_poﬁ
 *
poﬁ
)

636 
evΩc_ªque°_wøµî
 *
˘x
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
);

637 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

640 i‡(
˘x
 =
NULL
)

643 i‡((
evc⁄
 = 
	`evΩc_poﬁ_föd_c⁄√˘i⁄
(
poﬁ
)Ë!
NULL
) {

644 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
˘x
, 
√xt
);

645 
	`evΩc_scheduÀ_ªque°
(
evc⁄
, 
˘x
);

647 
	}
}

650 
	$evΩc_ªque°_timeout
(
fd
, 
wh©
, *
¨g
)

652 
evΩc_ªque°_wøµî
 *
˘x
 = 
¨g
;

653 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
˘x
->evcon;

654 
	`as£π
(
evc⁄
 !
NULL
);

656 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

657 
	}
}

	@evrpc.h

27 #i‚de‡
_EVRPC_H_


28 
	#_EVRPC_H_


	)

30 #ifde‡
__˝lu•lus


69 
evbuf„r
;

70 
evít_ba£
;

71 
evΩc_ªq_gíîic
;

74 
	sevΩc
 {

75 
TAILQ_ENTRY
(
evΩc
Ë
√xt
;

78 c⁄° * 
uri
;

81 *(*
ªque°_√w
)();

84 (*
ªque°_‰ì
)(*);

87 (*
ªque°_unm¨shÆ
)(*, 
evbuf„r
 *);

90 *(*
ª∂y_√w
)();

93 (*
ª∂y_‰ì
)(*);

96 (*
ª∂y_com∂ëe
)(*);

99 (*
ª∂y_m¨shÆ
)(
evbuf„r
*, *);

102 (*
cb
)(
evΩc_ªq_gíîic
 *, *);

103 *
cb_¨g
;

106 
evΩc_ba£
 *
ba£
;

113 
	#EVRPC_STRUCT
(
Ω˙ame
Ë
evΩc_ªq__
##
	)
rpcname

115 
evhâp_ªque°
;

116 
evΩc_°©us
;

119 
	sevΩc_ªq_gíîic
 {

121 *
ªque°
;

124 *
ª∂y
;

130 
evΩc
 *
Ωc
;

135 
evhâp_ªque°
* 
hâp_ªq
;

140 (*
d⁄e
)(
evΩc_ªq_gíîic
* 
Ωc
);

154 
	#EVRPC_HEADER
(
Ω˙ame
, 
ªq°ru˘
, 
Ωly°ru˘
) \

155 
	`EVRPC_STRUCT
(
Ω˙ame
) { \

156 
ªq°ru˘
* 
ªque°
; \

157 
Ωly°ru˘
* 
ª∂y
; \

158 
evΩc
* 
Ωc
; \

159 
evhâp_ªque°
* 
hâp_ªq
; \

160 (*
d⁄e
)(
evΩc_°©us
 *, \

161 
evΩc
* 
Ωc
, *
ªque°
, *
ª∂y
); \

163 
evΩc_£nd_ªque°_
##
	`Ω˙ame
(
evΩc_poﬁ
 *, \

164 
ªq°ru˘
 *, 
Ωly°ru˘
 *, \

165 (*)(
evΩc_°©us
 *, \

166 
ªq°ru˘
 *, 
Ωly°ru˘
 *, *
cb¨g
), \

167 *);

	)

179 
	#EVRPC_GENERATE
(
Ω˙ame
, 
ªq°ru˘
, 
Ωly°ru˘
) \

180 
evΩc_£nd_ªque°_
##
	`Ω˙ame
(
evΩc_poﬁ
 *
poﬁ
, \

181 
ªq°ru˘
 *
ªque°
, 
Ωly°ru˘
 *
ª∂y
, \

182 (*
cb
)(
evΩc_°©us
 *, \

183 
ªq°ru˘
 *, 
Ωly°ru˘
 *, *
cb¨g
), \

184 *
cb¨g
) { \

185 
evΩc_°©us
 
°©us
; \

186 
evΩc_ªque°_wøµî
 *
˘x
; \

187 
˘x
 = (
evΩc_ªque°_wøµî
 *) \

188 
	`mÆloc
((
evΩc_ªque°_wøµî
)); \

189 i‡(
˘x
 =
NULL
) \

190 
îr‹
; \

191 
˘x
->
poﬁ
 =Öool; \

192 
˘x
->
evc⁄
 = 
NULL
; \

193 
˘x
->
«me
 = 
	`°rdup
(#rpcname); \

194 i‡(
˘x
->
«me
 =
NULL
) { \

195 
	`‰ì
(
˘x
); \

196 
îr‹
; \

198 
˘x
->
cb
 = ((*)(
evΩc_°©us
 *, \

199 *, *, *))
cb
; \

200 
˘x
->
cb_¨g
 = 
cb¨g
; \

201 
˘x
->
ªque°
 = (*)request; \

202 
˘x
->
ª∂y
 = (*)reply; \

203 
˘x
->
ªque°_m¨shÆ
 = ((*)(
evbuf„r
 *, *))
ªq°ru˘
##
_m¨shÆ
; \

204 
˘x
->
ª∂y_˛ór
 = ((*)(*))
Ωly°ru˘
##
_˛ór
; \

205 
˘x
->
ª∂y_unm¨shÆ
 = ((*)(*, 
evbuf„r
 *))
Ωly°ru˘
##
_unm¨shÆ
; \

206  (
	`evΩc_make_ªque°
(
˘x
)); \

207 
îr‹
: \

208 
	`mem£t
(&
°©us
, 0, (status)); \

209 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_UNSTARTED
; \

210 (*(
cb
))(&
°©us
, 
ªque°
, 
ª∂y
, 
cb¨g
); \

212 }

	)

223 
	#EVRPC_REQUEST_HTTP
(
Ωc_ªq
Ë‘pc_ªq)->
hâp_ªq


	)

233 
	#EVRPC_REQUEST_DONE
(
Ωc_ªq
) do { \

234 
evΩc_ªq_gíîic
 *
_ªq
 = (evΩc_ªq_gíîi¯*)(
Ωc_ªq
); \

235 
_ªq
->
	`d⁄e
(_req); \

236 } 0)

	)

240 
	#EVRPC_REGISTER_OBJECT
(
Ωc
, 
«me
, 
ªque°
, 
ª∂y
) \

242 (
Ωc
)->
uri
 = 
	`°rdup
(#name); \

243 i‡((
Ωc
)->
uri
 =
NULL
) { \

244 
	`Ârötf
(
°dîr
, "failedÅoÑegister object\n"); \

245 
	`exô
(1); \

247 (
Ωc
)->
ªque°_√w
 = (*(*)())
ªque°
##
_√w
; \

248 (
Ωc
)->
ªque°_‰ì
 = ((*)(*))
ªque°
##
_‰ì
; \

249 (
Ωc
)->
ªque°_unm¨shÆ
 = ((*)(*, 
evbuf„r
 *))
ªque°
##
_unm¨shÆ
; \

250 (
Ωc
)->
ª∂y_√w
 = (*(*)())
ª∂y
##
_√w
; \

251 (
Ωc
)->
ª∂y_‰ì
 = ((*)(*))
ª∂y
##
_‰ì
; \

252 (
Ωc
)->
ª∂y_com∂ëe
 = ((*)(*))
ª∂y
##
_com∂ëe
; \

253 (
Ωc
)->
ª∂y_m¨shÆ
 = ((*)(
evbuf„r
*, *))
ª∂y
##
_m¨shÆ
; \

254 } 0)

	)

256 
evΩc_ba£
;

257 
evhâp
;

267 
evΩc_ba£
 *
evΩc_öô
(
evhâp
 *
£rvî
);

277 
evΩc_‰ì
(
evΩc_ba£
 *
ba£
);

295 
	#EVRPC_REGISTER
(
ba£
, 
«me
, 
ªque°
, 
ª∂y
, 
ˇŒback
, 
cb¨g
) \

297 
evΩc
* 
Ωc
 = (evΩ¯*)
	`ˇŒoc
(1, (evrpc)); \

298 
	`EVRPC_REGISTER_OBJECT
(
Ωc
, 
«me
, 
ªque°
, 
ª∂y
); \

299 
	`evΩc_ªgi°î_Ωc
(
ba£
, 
Ωc
, \

300 ((*)(
evΩc_ªq_gíîic
*, *))
ˇŒback
, 
cb¨g
); \

301 } 0)

	)

303 
evΩc_ªgi°î_Ωc
(
evΩc_ba£
 *, 
evΩc
 *,

304 (*)(
evΩc_ªq_gíîic
*, *), *);

314 
	#EVRPC_UNREGISTER
(
ba£
, 
«me
Ë
	`evΩc_uƒegi°î_Ωc
(ba£, #«me)

	)

316 
evΩc_uƒegi°î_Ωc
(
evΩc_ba£
 *
ba£
, c⁄° *
«me
);

322 
evΩc_poﬁ
;

323 
evhâp_c⁄√˘i⁄
;

328 
	sevΩc_°©us
 {

329 
	#EVRPC_STATUS_ERR_NONE
 0

	)

330 
	#EVRPC_STATUS_ERR_TIMEOUT
 1

	)

331 
	#EVRPC_STATUS_ERR_BADPAYLOAD
 2

	)

332 
	#EVRPC_STATUS_ERR_UNSTARTED
 3

	)

333 
	#EVRPC_STATUS_ERR_HOOKABORTED
 4

	)

334 
îr‹
;

337 
evhâp_ªque°
 *
hâp_ªq
;

340 
	sevΩc_ªque°_wøµî
 {

341 
TAILQ_ENTRY
(
evΩc_ªque°_wøµî
Ë
√xt
;

344 
evΩc_poﬁ
 *
poﬁ
;

347 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

350 
evít
 
ev_timeout
;

353 *
«me
;

356 (*
cb
)(
evΩc_°©us
*, *
ªque°
, *
ª∂y
, *
¨g
);

357 *
cb_¨g
;

359 *
ªque°
;

360 *
ª∂y
;

363 (*
ªque°_m¨shÆ
)(
evbuf„r
 *, *);

366 (*
ª∂y_˛ór
)(*);

369 (*
ª∂y_unm¨shÆ
)(*, 
evbuf„r
*);

387 
	#EVRPC_MAKE_REQUEST
(
«me
, 
poﬁ
, 
ªque°
, 
ª∂y
, 
cb
, 
cb¨g
) \

388 
evΩc_£nd_ªque°_
##
	`«me
(
poﬁ
, 
ªque°
, 
ª∂y
, 
cb
, 
cb¨g
)

	)

390 
evΩc_make_ªque°
(
evΩc_ªque°_wøµî
 *);

402 
evΩc_poﬁ
 *
evΩc_poﬁ_√w
(
evít_ba£
 *
ba£
);

408 
evΩc_poﬁ_‰ì
(
evΩc_poﬁ
 *
poﬁ
);

413 
evΩc_poﬁ_add_c⁄√˘i⁄
(
evΩc_poﬁ
 *,

414 
evhâp_c⁄√˘i⁄
 *);

431 
evΩc_poﬁ_£t_timeout
(
evΩc_poﬁ
 *
poﬁ
, 
timeout_ö_£cs
);

438 
	eEVRPC_HOOK_TYPE
 {

439 
EVRPC_INPUT
,

440 
EVRPC_OUTPUT


443 #i‚de‡
WIN32


446 
	#INPUT
 
EVRPC_INPUT


	)

449 
	#OUTPUT
 
EVRPC_OUTPUT


	)

465 *
evΩc_add_hook
(*
vba£
,

466 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

467 (*
cb
)(
evhâp_ªque°
 *, 
evbuf„r
 *, *),

468 *
cb_¨g
);

478 
evΩc_ªmove_hook
(*
vba£
,

479 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

480 *
h™dÀ
);

482 #ifde‡
__˝lu•lus


	@evsignal.h

27 #i‚de‡
_EVSIGNAL_H_


28 
	#_EVSIGNAL_H_


	)

30 (*
	tev_sigh™dÀr_t
)();

32 
	sevsig«l_öfo
 {

33 
evít
 
ev_sig«l
;

34 
ev_sig«l_∑ú
[2];

35 
ev_sig«l_added
;

36 vﬁ©ûê
sig_©omic_t
 
evsig«l_ˇught
;

37 
evít_li°
 
evsigevíts
[
NSIG
];

38 
sig_©omic_t
 
evsigˇught
[
NSIG
];

39 #ifde‡
HAVE_SIGACTION


40 
siga˘i⁄
 **
sh_ﬁd
;

42 
ev_sigh™dÀr_t
 **
sh_ﬁd
;

44 
sh_ﬁd_max
;

46 
	`evsig«l_öô
(
evít_ba£
 *);

47 
	`evsig«l_¥o˚ss
(
evít_ba£
 *);

48 
	`evsig«l_add
(
evít
 *);

49 
	`evsig«l_dñ
(
evít
 *);

50 
	`evsig«l_dóŒoc
(
evít_ba£
 *);

	@evutil.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	~<wösock2.h
>

33 
	#WIN32_LEAN_AND_MEAN


	)

34 
	~<wödows.h
>

35 #unde‡
WIN32_LEAN_AND_MEAN


38 
	~<sys/ty≥s.h
>

39 #ifde‡
HAVE_SYS_SOCKET_H


40 
	~<sys/sockë.h
>

42 #ifde‡
HAVE_UNISTD_H


43 
	~<uni°d.h
>

45 #ifde‡
HAVE_FCNTL_H


46 
	~<f˙é.h
>

48 #ifde‡
HAVE_STDLIB_H


49 
	~<°dlib.h
>

51 
	~<î∫o.h
>

52 #i‡
deföed
 
WIN32
 && !deföed(
HAVE_GETTIMEOFDAY_H
)

53 
	~<sys/timeb.h
>

55 
	~<°dio.h
>

57 
	~"evutû.h
"

58 
	~"log.h
"

61 
	$evutû_sockë∑ú
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, 
fd
[2])

63 #i‚de‡
WIN32


64  
	`sockë∑ú
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, 
fd
);

73 
li°íî
 = -1;

74 
c⁄√˘‹
 = -1;

75 
ac˚±‹
 = -1;

76 
sockaddr_ö
 
li°í_addr
;

77 
sockaddr_ö
 
c⁄√˘_addr
;

78 
size
;

79 
ßved_î∫o
 = -1;

81 i‡(
¥Ÿocﬁ


82 #ifde‡
AF_UNIX


83 || 
Ámûy
 !
AF_UNIX


86 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEAFNOSUPPORT
);

89 i‡(!
fd
) {

90 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEINVAL
);

94 
li°íî
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

95 i‡(
li°íî
 < 0)

97 
	`mem£t
(&
li°í_addr
, 0, (listen_addr));

98 
li°í_addr
.
sö_Ámûy
 = 
AF_INET
;

99 
li°í_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

100 
li°í_addr
.
sö_p‹t
 = 0;

101 i‡(
	`böd
(
li°íî
, (
sockaddr
 *Ë&
li°í_addr
,  (listen_addr))

103 
tidy_up_™d_Áû
;

104 i‡(
	`li°í
(
li°íî
, 1) == -1)

105 
tidy_up_™d_Áû
;

107 
c⁄√˘‹
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

108 i‡(
c⁄√˘‹
 < 0)

109 
tidy_up_™d_Áû
;

111 
size
 = (
c⁄√˘_addr
);

112 i‡(
	`gësock«me
(
li°íî
, (
sockaddr
 *Ë&
c⁄√˘_addr
, &
size
) == -1)

113 
tidy_up_™d_Áû
;

114 i‡(
size
 ! (
c⁄√˘_addr
))

115 
ab‹t_tidy_up_™d_Áû
;

116 i‡(
	`c⁄√˘
(
c⁄√˘‹
, (
sockaddr
 *Ë&
c⁄√˘_addr
,

117 (
c⁄√˘_addr
)) == -1)

118 
tidy_up_™d_Áû
;

120 
size
 = (
li°í_addr
);

121 
ac˚±‹
 = 
	`ac˚±
(
li°íî
, (
sockaddr
 *Ë&
li°í_addr
, &
size
);

122 i‡(
ac˚±‹
 < 0)

123 
tidy_up_™d_Áû
;

124 i‡(
size
 !(
li°í_addr
))

125 
ab‹t_tidy_up_™d_Áû
;

126 
	`EVUTIL_CLOSESOCKET
(
li°íî
);

129 i‡(
	`gësock«me
(
c⁄√˘‹
, (
sockaddr
 *Ë&
c⁄√˘_addr
, &
size
) == -1)

130 
tidy_up_™d_Áû
;

131 i‡(
size
 ! (
c⁄√˘_addr
)

132 || 
li°í_addr
.
sö_Ámûy
 !
c⁄√˘_addr
.sin_family

133 || 
li°í_addr
.
sö_addr
.
s_addr
 !
c⁄√˘_addr
.sin_addr.s_addr

134 || 
li°í_addr
.
sö_p‹t
 !
c⁄√˘_addr
.sin_port)

135 
ab‹t_tidy_up_™d_Áû
;

136 
fd
[0] = 
c⁄√˘‹
;

137 
fd
[1] = 
ac˚±‹
;

141 
ab‹t_tidy_up_™d_Áû
:

142 
ßved_î∫o
 = 
WSAECONNABORTED
;

143 
tidy_up_™d_Áû
:

144 i‡(
ßved_î∫o
 < 0)

145 
ßved_î∫o
 = 
	`WSAGëLa°Eº‹
();

146 i‡(
li°íî
 != -1)

147 
	`EVUTIL_CLOSESOCKET
(
li°íî
);

148 i‡(
c⁄√˘‹
 != -1)

149 
	`EVUTIL_CLOSESOCKET
(
c⁄√˘‹
);

150 i‡(
ac˚±‹
 != -1)

151 
	`EVUTIL_CLOSESOCKET
(
ac˚±‹
);

153 
	`EVUTIL_SET_SOCKET_ERROR
(
ßved_î∫o
);

156 
	}
}

159 
	$evutû_make_sockë_n⁄blockög
(
fd
)

161 #ifde‡
WIN32


163 
n⁄blockög
 = 1;

164 
	`io˘lsockë
(
fd
, 
FIONBIO
, (*Ë&
n⁄blockög
);

167 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
) == -1) {

168 
	`evít_w¨n
("fcntl(O_NONBLOCK)");

173 
	}
}

175 
ev_öt64_t


176 
	$evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
)

178 #ifde‡
HAVE_STRTOLL


179  (
ev_öt64_t
)
	`°πﬁl
(
s
, 
íd±r
, 
ba£
);

180 #ñi‡
SIZEOF_LONG
 == 8

181  (
ev_öt64_t
)
	`°πﬁ
(
s
, 
íd±r
, 
ba£
);

182 #ñi‡
	`deföed
(
WIN32
Ë&& deföed(
_MSC_VER
) && _MSC_VER < 1300

185 
ev_öt64_t
 
r
;

186 i‡(
ba£
 != 10)

188 
r
 = (
ev_öt64_t
Ë
	`_©oi64
(
s
);

189 
	`is•a˚
(*
s
))

190 ++
s
;

191 
	`isdigô
(*
s
))

192 ++
s
;

193 i‡(
íd±r
)

194 *
íd±r
 = (*Ë
s
;

195  
r
;

196 #ñi‡
	`deföed
(
WIN32
)

197  (
ev_öt64_t
Ë
	`_°πoi64
(
s
, 
íd±r
, 
ba£
);

201 
	}
}

203 #i‚de‡
_EVENT_HAVE_GETTIMEOFDAY


205 
	$evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

207 
_timeb
 
tb
;

209 if(
tv
 =
NULL
)

212 
	`_·ime
(&
tb
);

213 
tv
->
tv_£c
 = (Ë
tb
.
time
;

214 
tv
->
tv_u£c
 = ((Ë
tb
.
mûlôm
) * 1000;

216 
	}
}

220 
	$evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

222 
r
;

223 
va_li°
 
≠
;

224 
	`va_°¨t
(
≠
, 
f‹m©
);

225 
r
 = 
	`evutû_v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

226 
	`va_íd
(
≠
);

227  
r
;

228 
	}
}

231 
	$evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

233 #ifde‡
_MSC_VER


234 
r
 = 
	`_v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

235 
buf
[
buÊí
-1] = '\0';

236 i‡(
r
 >= 0)

237  
r
;

239  
	`_vs˝rötf
(
f‹m©
, 
≠
);

241 
r
 = 
	`v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

242 
buf
[
buÊí
-1] = '\0';

243  
r
;

245 
	}
}

	@evutil.h

27 #i‚de‡
_EVUTIL_H_


28 
	#_EVUTIL_H_


	)

37 #ifde‡
__˝lu•lus


41 
	~<evít-c⁄fig.h
>

42 #ifde‡
_EVENT_HAVE_SYS_TIME_H


43 
	~<sys/time.h
>

45 #ifde‡
_EVENT_HAVE_STDINT_H


46 
	~<°döt.h
>

47 #ñi‡
deföed
(
_EVENT_HAVE_INTTYPES_H
)

48 
	~<öây≥s.h
>

50 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


51 
	~<sys/ty≥s.h
>

53 
	~<°d¨g.h
>

55 #ifde‡
_EVENT_HAVE_UINT64_T


56 
	#ev_uöt64_t
 
uöt64_t


	)

57 
	#ev_öt64_t
 
öt64_t


	)

58 #ñi‡
deföed
(
WIN32
)

59 
	#ev_uöt64_t
 
__öt64


	)

60 
	#ev_öt64_t
 sig√d 
__öt64


	)

61 #ñi‡
_EVENT_SIZEOF_LONG_LONG
 == 8

62 
	#ev_uöt64_t
 

	)

63 
	#ev_öt64_t
 

	)

64 #ñi‡
_EVENT_SIZEOF_LONG
 == 8

65 
	#ev_uöt64_t
 

	)

66 
	#ev_öt64_t
 

	)

71 #ifde‡
_EVENT_HAVE_UINT32_T


72 
	#ev_uöt32_t
 
uöt32_t


	)

73 #ñi‡
deföed
(
WIN32
)

74 
	#ev_uöt32_t
 

	)

75 #ñi‡
_EVENT_SIZEOF_LONG
 == 4

76 
	#ev_uöt32_t
 

	)

77 #ñi‡
_EVENT_SIZEOF_INT
 == 4

78 
	#ev_uöt32_t
 

	)

83 #ifde‡
_EVENT_HAVE_UINT16_T


84 
	#ev_uöt16_t
 
uöt16_t


	)

85 #ñi‡
deföed
(
WIN32
)

86 
	#ev_uöt16_t
 

	)

87 #ñi‡
_EVENT_SIZEOF_INT
 == 2

88 
	#ev_uöt16_t
 

	)

89 #ñi‡
_EVENT_SIZEOF_SHORT
 == 2

90 
	#ev_uöt16_t
 

	)

95 #ifde‡
_EVENT_HAVE_UINT8_T


96 
	#ev_uöt8_t
 
uöt8_t


	)

98 
	#ev_uöt8_t
 

	)

101 
evutû_sockë∑ú
(
d
, 
ty≥
, 
¥Ÿocﬁ
, 
sv
[2]);

102 
evutû_make_sockë_n⁄blockög
(
sock
);

103 #ifde‡
WIN32


104 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`˛o£sockë
(s)

	)

106 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`˛o£
(s)

	)

109 #ifde‡
WIN32


110 
	#EVUTIL_SOCKET_ERROR
(Ë
	`WSAGëLa°Eº‹
()

	)

111 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

112 dÿ{ 
	`WSASëLa°Eº‹
(
îrcode
); } 0)

	)

114 
	#EVUTIL_SOCKET_ERROR
(Ë(
î∫o
)

	)

115 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

116 dÿ{ 
î∫o
 = (
îrcode
); } 0)

	)

122 #ifde‡
_EVENT_HAVE_TIMERADD


123 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
Ë
	`timîadd
(—vp), (uvp), (vvp))

	)

124 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
Ë
	`timîsub
(—vp), (uvp), (vvp))

	)

126 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
) \

128 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

129 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

130 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

131 (
vvp
)->
tv_£c
++; \

132 (
vvp
)->
tv_u£c
 -= 1000000; \

134 } 0)

	)

135 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
) \

137 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

138 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

139 i‡((
vvp
)->
tv_u£c
 < 0) { \

140 (
vvp
)->
tv_£c
--; \

141 (
vvp
)->
tv_u£c
 += 1000000; \

143 } 0)

	)

146 #ifde‡
_EVENT_HAVE_TIMERCLEAR


147 
	#evutû_timî˛ór
(
tvp
Ë
	`timî˛ór
—vp)

	)

149 
	#evutû_timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

152 
	#evutû_timîcmp
(
tvp
, 
uvp
, 
cmp
) \

153 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

154 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

155 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

157 #ifde‡
_EVENT_HAVE_TIMERISSET


158 
	#evutû_timîis£t
(
tvp
Ë
	`timîis£t
—vp)

	)

160 
	#evutû_timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
ev_öt64_t
 
evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
);

168 #ifde‡
_EVENT_HAVE_GETTIMEOFDAY


169 
	#evutû_gëtimeofday
(
tv
, 
tz
Ë
	`gëtimeofday
(—v), (tz))

	)

171 
evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

174 
evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

175 #ifde‡
__GNUC__


176 
__©åibuã__
((
f‹m©
(
¥ötf
, 3, 4)))

179 
evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

181 #ifde‡
__˝lu•lus


	@http-internal.h

10 #i‚de‡
_HTTP_H_


11 
	#_HTTP_H_


	)

13 
	#HTTP_CONNECT_TIMEOUT
 45

	)

14 
	#HTTP_WRITE_TIMEOUT
 50

	)

15 
	#HTTP_READ_TIMEOUT
 50

	)

17 
	#HTTP_PREFIX
 "hâp://"

	)

18 
	#HTTP_DEFAULTPORT
 80

	)

20 
	emesßge_ªad_°©us
 {

21 
	mALL_DATA_READ
 = 1,

22 
	mMORE_DATA_EXPECTED
 = 0,

23 
	mDATA_CORRUPTED
 = -1,

24 
	mREQUEST_CANCELED
 = -2

27 
	eevhâp_c⁄√˘i⁄_îr‹
 {

28 
	mEVCON_HTTP_TIMEOUT
,

29 
	mEVCON_HTTP_EOF
,

30 
	mEVCON_HTTP_INVALID_HEADER


33 
	gevbuf„r
;

34 
	gaddröfo
;

35 
	gevhâp_ªque°
;

39 
	eevhâp_c⁄√˘i⁄_°©e
 {

40 
	mEVCON_DISCONNECTED
,

41 
	mEVCON_CONNECTING
,

42 
	mEVCON_IDLE
,

43 
	mEVCON_READING_FIRSTLINE
,

45 
	mEVCON_READING_HEADERS
,

46 
	mEVCON_READING_BODY
,

47 
	mEVCON_READING_TRAILER
,

48 
	mEVCON_WRITING


51 
	gevít_ba£
;

53 
	sevhâp_c⁄√˘i⁄
 {

55 
TAILQ_ENTRY
(
evhâp_c⁄√˘i⁄
Ë(
	m√xt
);

57 
	mfd
;

58 
evít
 
	mev
;

59 
evít
 
	m˛o£_ev
;

60 
evbuf„r
 *
	möput_buf„r
;

61 
evbuf„r
 *
	mouçut_buf„r
;

63 *
	mböd_addªss
;

64 
u_sh‹t
 
	mböd_p‹t
;

66 *
	maddªss
;

67 
u_sh‹t
 
	mp‹t
;

69 
	mÊags
;

70 
	#EVHTTP_CON_INCOMING
 0x0001

	)

71 
	#EVHTTP_CON_OUTGOING
 0x0002

	)

72 
	#EVHTTP_CON_CLOSEDETECT
 0x0004

	)

74 
	mtimeout
;

75 
	mªåy_˙t
;

76 
	mªåy_max
;

78 
evhâp_c⁄√˘i⁄_°©e
 
	m°©e
;

81 
evhâp
 *
	mhâp_£rvî
;

83 
TAILQ_HEAD
(
evc⁄_ªque°q
, 
evhâp_ªque°
Ë
	mªque°s
;

85 (*
	mcb
)(
	mevhâp_c⁄√˘i⁄
 *, *);

86 *
	mcb_¨g
;

88 (*
	m˛o£cb
)(
	mevhâp_c⁄√˘i⁄
 *, *);

89 *
	m˛o£cb_¨g
;

91 
evít_ba£
 *
	mba£
;

94 
	sevhâp_cb
 {

95 
TAILQ_ENTRY
(
evhâp_cb
Ë
	m√xt
;

97 *
	mwh©
;

99 (*
	mcb
)(
evhâp_ªque°
 *
	mªq
, *);

100 *
	mcb¨g
;

104 
TAILQ_HEAD
(
evc⁄q
, 
evhâp_c⁄√˘i⁄
);

107 
	sevhâp_bound_sockë
 {

108 
TAILQ_ENTRY
(
evhâp_bound_sockë
Ë(
	m√xt
);

110 
evít
 
	mböd_ev
;

113 
	sevhâp
 {

114 
TAILQ_HEAD
(
boundq
, 
evhâp_bound_sockë
Ë
	msockës
;

116 
TAILQ_HEAD
(
hâpcbq
, 
evhâp_cb
Ë
	mˇŒbacks
;

117 
evc⁄q
 
	mc⁄√˘i⁄s
;

119 
	mtimeout
;

121 (*
	mgícb
)(
evhâp_ªque°
 *
	mªq
, *);

122 *
	mgícb¨g
;

124 
evít_ba£
 *
	mba£
;

128 
evhâp_c⁄√˘i⁄_ª£t
(
evhâp_c⁄√˘i⁄
 *);

131 
evhâp_c⁄√˘i⁄_c⁄√˘
(
evhâp_c⁄√˘i⁄
 *);

134 
evhâp_c⁄√˘i⁄_Áû
(
evhâp_c⁄√˘i⁄
 *,

135 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
);

137 
evhâp_gë_ªque°
(
evhâp
 *, , 
sockaddr
 *, 
sockÀn_t
);

139 
evhâp_ho°p‹tfûe
(*, **, 
u_sh‹t
 *, **);

141 
evhâp_∑r£_fú°löe
(
evhâp_ªque°
 *, 
evbuf„r
*);

142 
evhâp_∑r£_hódîs
(
evhâp_ªque°
 *, 
evbuf„r
*);

144 
evhâp_°¨t_ªad
(
evhâp_c⁄√˘i⁄
 *);

145 
evhâp_make_hódî
(
evhâp_c⁄√˘i⁄
 *, 
evhâp_ªque°
 *);

147 
evhâp_wrôe_buf„r
(
evhâp_c⁄√˘i⁄
 *,

148 (*)(
evhâp_c⁄√˘i⁄
 *, *), *);

151 
	`evhâp_ª•⁄£_code
(
evhâp_ªque°
 *, , const *);

152 
	`evhâp_£nd_∑ge
(
evhâp_ªque°
 *, 
evbuf„r
 *);

	@http.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
HAVE_SYS_PARAM_H


33 
	~<sys/∑øm.h
>

35 #ifde‡
HAVE_SYS_TYPES_H


36 
	~<sys/ty≥s.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 #ifde‡
HAVE_SYS_IOCCOM_H


43 
	~<sys/ioccom.h
>

46 #i‚de‡
WIN32


47 
	~<sys/ªsour˚.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/°©.h
>

50 
	~<sys/waô.h
>

53 
	~<sys/queue.h
>

55 #i‚de‡
WIN32


56 
	~<√töë/ö.h
>

57 
	~<√tdb.h
>

60 #ifde‡
WIN32


61 
	~<wösock2.h
>

64 
	~<as£π.h
>

65 
	~<˘y≥.h
>

66 
	~<î∫o.h
>

67 
	~<°dio.h
>

68 
	~<°dlib.h
>

69 
	~<°rög.h
>

70 #i‚de‡
WIN32


71 
	~<sy¶og.h
>

73 
	~<sig«l.h
>

74 
	~<time.h
>

75 #ifde‡
HAVE_UNISTD_H


76 
	~<uni°d.h
>

78 #ifde‡
HAVE_FCNTL_H


79 
	~<f˙é.h
>

82 #unde‡
timeout_≥ndög


83 #unde‡
timeout_öôülized


85 
	~"°æ˝y-öã∫Æ.h
"

86 
	~"evít.h
"

87 
	~"evhâp.h
"

88 
	~"evutû.h
"

89 
	~"log.h
"

90 
	~"hâp-öã∫Æ.h
"

92 #ifde‡
WIN32


93 
	#°rˇ£cmp
 
_°ricmp


	)

94 
	#°∫ˇ£cmp
 
_°∫icmp


	)

95 
	#°rdup
 
_°rdup


	)

98 #i‚de‡
HAVE_GETNAMEINFO


99 
	#NI_MAXSERV
 32

	)

100 
	#NI_MAXHOST
 1025

	)

102 
	#NI_NUMERICHOST
 1

	)

103 
	#NI_NUMERICSERV
 2

	)

106 
	$Áke_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
size_t
 
ßÀn
, *
ho°
,

107 
size_t
 
ho°Àn
, *
£rv
, size_à
£rvÀn
, 
Êags
)

109 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

111 i‡(
£rv
 !
NULL
) {

112 
tmp£rv
[16];

113 
	`evutû_¢¥ötf
(
tmp£rv
, (tmpserv),

114 "%d", 
	`¡ohs
(
sö
->
sö_p‹t
));

115 i‡(
	`°æ˝y
(
£rv
, 
tmp£rv
, 
£rvÀn
) >= servlen)

119 i‡(
ho°
 !
NULL
) {

120 i‡(
Êags
 & 
NI_NUMERICHOST
) {

121 i‡(
	`°æ˝y
(
ho°
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
),

122 
ho°Àn
) >= hostlen)

127 
ho°ít
 *
hp
;

128 
hp
 = 
	`gëho°byaddr
((*)&
sö
->
sö_addr
,

129 (
ö_addr
), 
AF_INET
);

130 i‡(
hp
 =
NULL
)

133 i‡(
	`°æ˝y
(
ho°
, 
hp
->
h_«me
, 
ho°Àn
) >= hostlen)

140 
	}
}

144 #i‚de‡
HAVE_GETADDRINFO


145 
	saddröfo
 {

146 
	mai_Ámûy
;

147 
	mai_sockty≥
;

148 
	mai_¥Ÿocﬁ
;

149 
size_t
 
	mai_addæí
;

150 
sockaddr
 *
	mai_addr
;

151 
addröfo
 *
	mai_√xt
;

154 
	$Áke_gëaddröfo
(c⁄° *
ho°«me
, 
addröfo
 *
ai
)

156 
ho°ít
 *
he
 = 
NULL
;

157 
sockaddr_ö
 *
ß
;

158 i‡(
ho°«me
) {

159 
he
 = 
	`gëho°by«me
(
ho°«me
);

160 i‡(!
he
)

163 
ai
->
ai_Ámûy
 = 
he
 ? he->
h_addπy≥
 : 
AF_INET
;

164 
ai
->
ai_sockty≥
 = 
SOCK_STREAM
;

165 
ai
->
ai_¥Ÿocﬁ
 = 0;

166 
ai
->
ai_addæí
 = (
sockaddr_ö
);

167 i‡(
NULL
 =(
ai
->
ai_addr
 = 
	`mÆloc
◊i->
ai_addæí
)))

169 
ß
 = (
sockaddr_ö
*)
ai
->
ai_addr
;

170 
	`mem£t
(
ß
, 0, 
ai
->
ai_addæí
);

171 i‡(
he
) {

172 
ß
->
sö_Ámûy
 = 
he
->
h_addπy≥
;

173 
	`mem˝y
(&
ß
->
sö_addr
, 
he
->
h_addr_li°
[0], he->
h_Àngth
);

175 
ß
->
sö_Ámûy
 = 
AF_INET
;

176 
ß
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

178 
ai
->
ai_√xt
 = 
NULL
;

180 
	}
}

182 
	$Áke_‰ìaddröfo
(
addröfo
 *
ai
)

184 
	`‰ì
(
ai
->
ai_addr
);

185 
	}
}

188 #i‚de‡
MIN


189 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

193 
	#EVHTTP_BASE_SET
(
x
, 
y
) do { \

194 i‡((
x
)->
ba£
 !
NULL
Ë
	`evít_ba£_£t
((x)->ba£, 
y
); \

195 } 0)

	)

197 
debug
;

199 
sockë_c⁄√˘
(
fd
, c⁄° *
addªss
, 
p‹t
);

200 
böd_sockë_ai
(
addröfo
 *, 
ªu£
);

201 
böd_sockë
(c⁄° *, 
u_sh‹t
, 
ªu£
);

202 
«me_‰om_addr
(
sockaddr
 *, 
sockÀn_t
, **, **);

203 
evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(

204 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

205 
evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(

206 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

207 
evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(

208 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

209 
evhâp_ªque°_di•©ch
(
evhâp_c⁄√˘i⁄
* 
evc⁄
);

210 
evhâp_ªad_fú°löe
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

211 
evhâp_ªque°
 *
ªq
);

212 
evhâp_ªad_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

213 
evhâp_ªque°
 *
ªq
);

215 
evhâp_ªad
(, , *);

216 
evhâp_wrôe
(, , *);

218 #i‚de‡
HAVE_STRSEP


222 
	$°r£p
(**
s
, c⁄° *
dñ
)

224 *
d
, *
tok
;

225 
	`as£π
(
	`°æí
(
dñ
) == 1);

226 i‡(!
s
 || !*s)

227  
NULL
;

228 
tok
 = *
s
;

229 
d
 = 
	`°r°r
(
tok
, 
dñ
);

230 i‡(
d
) {

231 *
d
 = '\0';

232 *
s
 = 
d
 + 1;

234 *
s
 = 
NULL
;

235  
tok
;

236 
	}
}

240 
	$html_ª∂a˚
(
ch
, *
buf
)

242 
ch
) {

258 
buf
[0] = 
ch
;

259 
buf
[1] = '\0';

261  
buf
;

262 
	}
}

272 
	$evhâp_htmÀsˇ≥
(c⁄° *
html
)

274 
i
, 
√w_size
 = 0, 
ﬁd_size
 = 
	`°æí
(
html
);

275 *
esˇ≥d_html
, *
p
;

276 
s¸©ch_•a˚
[2];

278 
i
 = 0; i < 
ﬁd_size
; ++i)

279 
√w_size
 +
	`°æí
(
	`html_ª∂a˚
(
html
[
i
], 
s¸©ch_•a˚
));

281 
p
 = 
esˇ≥d_html
 = 
	`mÆloc
(
√w_size
 + 1);

282 i‡(
esˇ≥d_html
 =
NULL
)

283 
	`evít_îr
(1, "%s: mÆloc(%d)", 
__func__
, 
√w_size
 + 1);

284 
i
 = 0; i < 
ﬁd_size
; ++i) {

285 c⁄° *
ª∂a˚d
 = 
	`html_ª∂a˚
(
html
[
i
], 
s¸©ch_•a˚
);

287 
	`°r˝y
(
p
, 
ª∂a˚d
);

288 
p
 +
	`°æí
(
ª∂a˚d
);

291 *
p
 = '\0';

293  (
esˇ≥d_html
);

294 
	}
}

297 
	$evhâp_mëhod
(
evhâp_cmd_ty≥
 
ty≥
)

299 c⁄° *
mëhod
;

301 
ty≥
) {

302 
EVHTTP_REQ_GET
:

303 
mëhod
 = "GET";

305 
EVHTTP_REQ_POST
:

306 
mëhod
 = "POST";

308 
EVHTTP_REQ_HEAD
:

309 
mëhod
 = "HEAD";

312 
mëhod
 = 
NULL
;

316  (
mëhod
);

317 
	}
}

320 
	$evhâp_add_evít
(
evít
 *
ev
, 
timeout
, 
deÁu…_timeout
)

322 i‡(
timeout
 != 0) {

323 
timevÆ
 
tv
;

325 
	`evutû_timî˛ór
(&
tv
);

326 
tv
.
tv_£c
 = 
timeout
 !-1 ?Åimeouà: 
deÁu…_timeout
;

327 
	`evít_add
(
ev
, &
tv
);

329 
	`evít_add
(
ev
, 
NULL
);

331 
	}
}

334 
evhâp_wrôe_buf„r
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

335 (*
cb
)(
evhâp_c⁄√˘i⁄
 *, *), *
¨g
)

337 
	`evít_debug
(("%s:Öª∑rögÅÿwrôêbuf„r\n", 
__func__
));

340 
evc⁄
->
cb
 = cb;

341 
evc⁄
->
cb_¨g
 = 
¨g
;

344 i‡(
	`evít_≥ndög
(&
evc⁄
->
ev
, 
EV_WRITE
|
EV_TIMEOUT
, 
NULL
))

345 
	`evít_dñ
(&
evc⁄
->
ev
);

347 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_WRITE
, 
evhâp_wrôe
,Évcon);

348 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

349 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_WRITE_TIMEOUT
);

350 
	}
}

353 
	$evhâp_c⁄√˘ed
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

355 
evc⁄
->
°©e
) {

356 
EVCON_DISCONNECTED
:

357 
EVCON_CONNECTING
:

359 
EVCON_IDLE
:

360 
EVCON_READING_FIRSTLINE
:

361 
EVCON_READING_HEADERS
:

362 
EVCON_READING_BODY
:

363 
EVCON_READING_TRAILER
:

364 
EVCON_WRITING
:

368 
	}
}

374 
	$evhâp_make_hódî_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

375 
evhâp_ªque°
 *
ªq
)

377 
löe
[1024];

378 c⁄° *
mëhod
;

380 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Proxy-Connection");

383 
mëhod
 = 
	`evhâp_mëhod
(
ªq
->
ty≥
);

384 
	`evutû_¢¥ötf
(
löe
, (line), "%s %s HTTP/%d.%d\r\n",

385 
mëhod
, 
ªq
->
uri
,Ñeq->
maj‹
,Ñeq->
mö‹
);

386 
	`evbuf„r_add
(
evc⁄
->
ouçut_buf„r
, 
löe
, 
	`°æí
(line));

389 i‡(
ªq
->
ty≥
 =
EVHTTP_REQ_POST
 &&

390 
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
){

391 
size
[12];

392 
	`evutû_¢¥ötf
(
size
, (size), "%ld",

393 ()
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
));

394 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Lígth", 
size
);

396 
	}
}

399 
	$evhâp_is_c⁄√˘i⁄_˛o£
(
Êags
, 
evkeyvÆq
* 
hódîs
)

401 i‡(
Êags
 & 
EVHTTP_PROXY_REQUEST
) {

403 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Proxy-Connection");

404  (
c⁄√˘i⁄
 =
NULL
 || 
	`°rˇ£cmp
(connection, "keep-alive") != 0);

406 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

407  (
c⁄√˘i⁄
 !
NULL
 && 
	`°rˇ£cmp
(connection, "close") == 0);

409 
	}
}

412 
	$evhâp_is_c⁄√˘i⁄_kì∑live
(
evkeyvÆq
* 
hódîs
)

414 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

415  (
c⁄√˘i⁄
 !
NULL


416 && 
	`°∫ˇ£cmp
(
c⁄√˘i⁄
, "keep-alive", 10) == 0);

417 
	}
}

420 
	$evhâp_maybe_add_d©e_hódî
(
evkeyvÆq
 *
hódîs
)

422 i‡(
	`evhâp_föd_hódî
(
hódîs
, "D©e"Ë=
NULL
) {

423 
d©e
[50];

424 #i‚de‡
WIN32


425 
tm
 
cur
;

427 
tm
 *
cur_p
;

428 
time_t
 
t
 = 
	`time
(
NULL
);

429 #ifde‡
WIN32


430 
cur_p
 = 
	`gmtime
(&
t
);

432 
	`gmtime_r
(&
t
, &
cur
);

433 
cur_p
 = &
cur
;

435 i‡(
	`°r·ime
(
d©e
, (date),

436 "%a, %d %b %Y %H:%M:%S GMT", 
cur_p
) != 0) {

437 
	`evhâp_add_hódî
(
hódîs
, "D©e", 
d©e
);

440 
	}
}

443 
	$evhâp_maybe_add_c⁄ã¡_Àngth_hódî
(
evkeyvÆq
 *
hódîs
,

444 
c⁄ã¡_Àngth
)

446 i‡(
	`evhâp_föd_hódî
(
hódîs
, "Tøns„r-Encodög"Ë=
NULL
 &&

447 
	`evhâp_föd_hódî
(
hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
) {

448 
Àn
[12];

449 
	`evutû_¢¥ötf
(
Àn
, ÷í), "%ld", 
c⁄ã¡_Àngth
);

450 
	`evhâp_add_hódî
(
hódîs
, "C⁄ã¡-Lígth", 
Àn
);

452 
	}
}

459 
	$evhâp_make_hódî_ª•⁄£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

460 
evhâp_ªque°
 *
ªq
)

462 
is_kì∑live
 = 
	`evhâp_is_c⁄√˘i⁄_kì∑live
(
ªq
->
öput_hódîs
);

463 
löe
[1024];

464 
	`evutû_¢¥ötf
(
löe
, (line), "HTTP/%d.%d %d %s\r\n",

465 
ªq
->
maj‹
,Ñeq->
mö‹
,Ñeq->
ª•⁄£_code
,

466 
ªq
->
ª•⁄£_code_löe
);

467 
	`evbuf„r_add
(
evc⁄
->
ouçut_buf„r
, 
löe
, 
	`°æí
(line));

469 i‡(
ªq
->
maj‹
 == 1) {

470 i‡(
ªq
->
mö‹
 == 1)

471 
	`evhâp_maybe_add_d©e_hódî
(
ªq
->
ouçut_hódîs
);

477 i‡(
ªq
->
mö‹
 =0 && 
is_kì∑live
)

478 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

481 i‡(
ªq
->
mö‹
 =1 || 
is_kì∑live
) {

487 
	`evhâp_maybe_add_c⁄ã¡_Àngth_hódî
(

488 
ªq
->
ouçut_hódîs
,

489 ()
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
));

494 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
)) {

495 i‡(
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
,

496 "C⁄ã¡-Ty≥"Ë=
NULL
) {

497 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

503 i‡(
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
)) {

504 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Connection");

505 i‡(!(
ªq
->
Êags
 & 
EVHTTP_PROXY_REQUEST
))

506 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

507 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Proxy-Connection");

509 
	}
}

512 
	$evhâp_make_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

514 
löe
[1024];

515 
evkeyvÆ
 *
hódî
;

521 i‡(
ªq
->
köd
 =
EVHTTP_REQUEST
) {

522 
	`evhâp_make_hódî_ªque°
(
evc⁄
, 
ªq
);

524 
	`evhâp_make_hódî_ª•⁄£
(
evc⁄
, 
ªq
);

527 
	`TAILQ_FOREACH
(
hódî
, 
ªq
->
ouçut_hódîs
, 
√xt
) {

528 
	`evutû_¢¥ötf
(
löe
, (line), "%s: %s\r\n",

529 
hódî
->
key
, hódî->
vÆue
);

530 
	`evbuf„r_add
(
evc⁄
->
ouçut_buf„r
, 
löe
, 
	`°æí
(line));

532 
	`evbuf„r_add
(
evc⁄
->
ouçut_buf„r
, "\r\n", 2);

534 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
) > 0) {

539 
	`evbuf„r_add_buf„r
(
evc⁄
->
ouçut_buf„r
, 
ªq
->output_buffer);

541 
	}
}

546 
	$evhâp_ho°p‹tfûe
(*
uæ
, **
pho°
, 
u_sh‹t
 *
µ‹t
, **
pfûe
)

549 
ho°
[1024];

550 
fûe
[1024];

551 *
p
;

552 c⁄° *
p2
;

553 
Àn
;

554 
u_sh‹t
 
p‹t
;

556 
Àn
 = 
	`°æí
(
HTTP_PREFIX
);

557 i‡(
	`°∫ˇ£cmp
(
uæ
, 
HTTP_PREFIX
, 
Àn
))

560 
uæ
 +
Àn
;

563 i‡(
	`°æ˝y
(
ho°
, 
uæ
,  (host)) >= (host))

566 
p
 = 
	`°rchr
(
ho°
, '/');

567 i‡(
p
 !
NULL
) {

568 *
p
 = '\0';

569 
p2
 = 
p
 + 1;

571 
p2
 = 
NULL
;

573 i‡(
pfûe
 !
NULL
) {

575 i‡(
p2
 =
NULL
)

576 
p2
 = "";

577 
	`evutû_¢¥ötf
(
fûe
, (fûe), "/%s", 
p2
);

580 
p
 = 
	`°rchr
(
ho°
, ':');

581 i‡(
p
 !
NULL
) {

582 *
p
 = '\0';

583 
p‹t
 = 
	`©oi
(
p
 + 1);

585 i‡(
p‹t
 == 0)

588 
p‹t
 = 
HTTP_DEFAULTPORT
;

590 i‡(
pho°
 !
NULL
)

591 *
pho°
 = 
ho°
;

592 i‡(
µ‹t
 !
NULL
)

593 *
µ‹t
 = 
p‹t
;

594 i‡(
pfûe
 !
NULL
)

595 *
pfûe
 = 
fûe
;

598 
	}
}

601 
	$evhâp_c⁄√˘i⁄_öcomög_Áû
(
evhâp_ªque°
 *
ªq
,

602 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
)

604 
îr‹
) {

605 
EVCON_HTTP_TIMEOUT
:

606 
EVCON_HTTP_EOF
:

614 
EVCON_HTTP_INVALID_HEADER
:

617 i‡(
ªq
->
uri
) {

618 
	`‰ì
(
ªq
->
uri
);

619 
ªq
->
uri
 = 
NULL
;

626 (*
ªq
->
cb
)‘eq,Ñeq->
cb_¨g
);

630 
	}
}

633 
	$evhâp_c⁄√˘i⁄_Áû
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

634 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
)

636 
evhâp_ªque°
* 
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

637 (*
cb
)(
evhâp_ªque°
 *, *);

638 *
cb_¨g
;

639 
	`as£π
(
ªq
 !
NULL
);

641 i‡(
evc⁄
->
Êags
 & 
EVHTTP_CON_INCOMING
) {

650 i‡(
	`evhâp_c⁄√˘i⁄_öcomög_Áû
(
ªq
, 
îr‹
) == -1)

651 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

656 
cb
 = 
ªq
->cb;

657 
cb_¨g
 = 
ªq
->cb_arg;

659 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

660 
	`evhâp_ªque°_‰ì
(
ªq
);

665 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

668 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
)

669 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

672 i‡(
cb
 !
NULL
)

673 (*
cb
)(
NULL
, 
cb_¨g
);

674 
	}
}

677 
	$evhâp_wrôe
(
fd
, 
wh©
, *
¨g
)

679 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

680 
n
;

682 i‡(
wh©
 =
EV_TIMEOUT
) {

683 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

687 
n
 = 
	`evbuf„r_wrôe
(
evc⁄
->
ouçut_buf„r
, 
fd
);

688 i‡(
n
 == -1) {

689 
	`evít_debug
(("%s:Évbuf„r_wrôe", 
__func__
));

690 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

694 i‡(
n
 == 0) {

695 
	`evít_debug
(("%s: wrôênŸhög", 
__func__
));

696 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

700 i‡(
	`EVBUFFER_LENGTH
(
evc⁄
->
ouçut_buf„r
) != 0) {

701 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

702 
evc⁄
->
timeout
, 
HTTP_WRITE_TIMEOUT
);

707 i‡(
evc⁄
->
cb
 !
NULL
)

708 (*
evc⁄
->
cb
)”vc⁄,Évc⁄->
cb_¨g
);

709 
	}
}

719 
	$evhâp_c⁄√˘i⁄_d⁄e
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

721 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

722 
c⁄_outgoög
 = 
evc⁄
->
Êags
 & 
EVHTTP_CON_OUTGOING
;

724 i‡(
c⁄_outgoög
) {

726 
√ed_˛o£
;

727 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

728 
ªq
->
evc⁄
 = 
NULL
;

730 
evc⁄
->
°©e
 = 
EVCON_IDLE
;

732 
√ed_˛o£
 =

733 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
)||

734 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
ouçut_hódîs
);

737 i‡(
√ed_˛o£
)

738 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

740 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
) {

745 i‡(!
	`evhâp_c⁄√˘ed
(
evc⁄
))

746 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

748 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

749 } i‡(!
√ed_˛o£
) {

754 
	`evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(
evc⁄
);

761 
evc⁄
->
°©e
 = 
EVCON_WRITING
;

765 (*
ªq
->
cb
)‘eq,Ñeq->
cb_¨g
);

768 i‡(
c⁄_outgoög
) {

769 
	`evhâp_ªque°_‰ì
(
ªq
);

771 
	}
}

785 
mesßge_ªad_°©us


786 
	$evhâp_h™dÀ_chunked_ªad
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
buf
)

788 
Àn
;

790 (
Àn
 = 
	`EVBUFFER_LENGTH
(
buf
)) > 0) {

791 i‡(
ªq
->
¡‹ód
 < 0) {

793 
ev_öt64_t
 
¡‹ód
;

794 *
p
 = 
	`evbuf„r_ªadlöe
(
buf
);

795 *
ídp
;

796 
îr‹
;

797 i‡(
p
 =
NULL
)

800 i‡(
	`°æí
(
p
) == 0) {

801 
	`‰ì
(
p
);

804 
¡‹ód
 = 
	`evutû_°πﬁl
(
p
, &
ídp
, 16);

805 
îr‹
 = (*
p
 == '\0' ||

806 (*
ídp
 != '\0' && *endp != ' ') ||

807 
¡‹ód
 < 0);

808 
	`‰ì
(
p
);

809 i‡(
îr‹
) {

811  (
DATA_CORRUPTED
);

813 
ªq
->
¡‹ód
 =Çtoread;

814 i‡(
ªq
->
¡‹ód
 == 0) {

816  (
ALL_DATA_READ
);

822 i‡(
Àn
 < 
ªq
->
¡‹ód
)

823  (
MORE_DATA_EXPECTED
);

826 
	`evbuf„r_add
(
ªq
->
öput_buf„r
,

827 
	`EVBUFFER_DATA
(
buf
), 
ªq
->
¡‹ód
);

828 
	`evbuf„r_døö
(
buf
, 
ªq
->
¡‹ód
);

829 
ªq
->
¡‹ód
 = -1;

830 i‡(
ªq
->
chunk_cb
 !
NULL
) {

831 (*
ªq
->
chunk_cb
)‘eq,Ñeq->
cb_¨g
);

832 
	`evbuf„r_døö
(
ªq
->
öput_buf„r
,

833 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
));

837  (
MORE_DATA_EXPECTED
);

838 
	}
}

841 
	$evhâp_ªad_åaûî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

843 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

845 
	`evhâp_∑r£_hódîs
(
ªq
, 
buf
)) {

846 
DATA_CORRUPTED
:

847 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

849 
ALL_DATA_READ
:

850 
	`evít_dñ
(&
evc⁄
->
ev
);

851 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

853 
MORE_DATA_EXPECTED
:

855 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
,

856 
HTTP_READ_TIMEOUT
);

859 
	}
}

862 
	$evhâp_ªad_body
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

864 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

866 i‡(
ªq
->
chunked
) {

867 
	`evhâp_h™dÀ_chunked_ªad
(
ªq
, 
buf
)) {

868 
ALL_DATA_READ
:

870 
evc⁄
->
°©e
 = 
EVCON_READING_TRAILER
;

871 
	`evhâp_ªad_åaûî
(
evc⁄
, 
ªq
);

873 
DATA_CORRUPTED
:

875 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
,

876 
EVCON_HTTP_INVALID_HEADER
);

878 
REQUEST_CANCELED
:

880 
	`evhâp_ªque°_‰ì
(
ªq
);

882 
MORE_DATA_EXPECTED
:

886 } i‡(
ªq
->
¡‹ód
 < 0) {

888 
	`evbuf„r_add_buf„r
(
ªq
->
öput_buf„r
, 
buf
);

889 } i‡(
	`EVBUFFER_LENGTH
(
buf
Ë>
ªq
->
¡‹ód
) {

891 
	`evbuf„r_add
(
ªq
->
öput_buf„r
, 
	`EVBUFFER_DATA
(
buf
),

892 
ªq
->
¡‹ód
);

893 
	`evbuf„r_døö
(
buf
, 
ªq
->
¡‹ód
);

894 
ªq
->
¡‹ód
 = 0;

895 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

899 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_READ
, 
evhâp_ªad
,Évcon);

900 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

901 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_READ_TIMEOUT
);

902 
	}
}

912 
	$evhâp_ªad
(
fd
, 
wh©
, *
¨g
)

914 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

915 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

916 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

917 
n
, 
Àn
;

919 i‡(
wh©
 =
EV_TIMEOUT
) {

920 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

923 
n
 = 
	`evbuf„r_ªad
(
buf
, 
fd
, -1);

924 
Àn
 = 
	`EVBUFFER_LENGTH
(
buf
);

925 
	`evít_debug
(("%s: gŸ %d o¿%d\n", 
__func__
, 
n
, 
fd
));

927 i‡(
n
 == -1) {

928 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
) {

929 
	`evít_debug
(("%s:Évbuf„r_ªad", 
__func__
));

930 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

932 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
,

933 
HTTP_READ_TIMEOUT
);

936 } i‡(
n
 == 0) {

938 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

942 
evc⁄
->
°©e
) {

943 
EVCON_READING_FIRSTLINE
:

944 
	`evhâp_ªad_fú°löe
(
evc⁄
, 
ªq
);

946 
EVCON_READING_HEADERS
:

947 
	`evhâp_ªad_hódî
(
evc⁄
, 
ªq
);

949 
EVCON_READING_BODY
:

950 
	`evhâp_ªad_body
(
evc⁄
, 
ªq
);

952 
EVCON_READING_TRAILER
:

953 
	`evhâp_ªad_åaûî
(
evc⁄
, 
ªq
);

955 
EVCON_DISCONNECTED
:

956 
EVCON_CONNECTING
:

957 
EVCON_IDLE
:

958 
EVCON_WRITING
:

960 
	`evít_îrx
(1, "%s: illegal connection state %d",

961 
__func__
, 
evc⁄
->
°©e
);

963 
	}
}

966 
	$evhâp_wrôe_c⁄√˘i⁄cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, *
¨g
)

969 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

970 
	`as£π
(
ªq
 !
NULL
);

972 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_WRITING
);

975 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

977 
	`evhâp_°¨t_ªad
(
evc⁄
);

978 
	}
}

985 
	$evhâp_c⁄√˘i⁄_‰ì
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

987 
evhâp_ªque°
 *
ªq
;

990 i‡(
evc⁄
->
fd
 != -1) {

991 i‡(
	`evhâp_c⁄√˘ed
(
evc⁄
Ë&&Évc⁄->
˛o£cb
 !
NULL
)

992 (*
evc⁄
->
˛o£cb
)”vc⁄,Évc⁄->
˛o£cb_¨g
);

996 (
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
)Ë!
NULL
) {

997 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

998 
	`evhâp_ªque°_‰ì
(
ªq
);

1001 i‡(
evc⁄
->
hâp_£rvî
 !
NULL
) {

1002 
evhâp
 *
hâp
 = 
evc⁄
->
hâp_£rvî
;

1003 
	`TAILQ_REMOVE
(&
hâp
->
c⁄√˘i⁄s
, 
evc⁄
, 
√xt
);

1006 i‡(
	`evít_öôülized
(&
evc⁄
->
˛o£_ev
))

1007 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1009 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1010 
	`evít_dñ
(&
evc⁄
->
ev
);

1012 i‡(
evc⁄
->
fd
 != -1)

1013 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);

1015 i‡(
evc⁄
->
böd_addªss
 !
NULL
)

1016 
	`‰ì
(
evc⁄
->
böd_addªss
);

1018 i‡(
evc⁄
->
addªss
 !
NULL
)

1019 
	`‰ì
(
evc⁄
->
addªss
);

1021 i‡(
evc⁄
->
öput_buf„r
 !
NULL
)

1022 
	`evbuf„r_‰ì
(
evc⁄
->
öput_buf„r
);

1024 i‡(
evc⁄
->
ouçut_buf„r
 !
NULL
)

1025 
	`evbuf„r_‰ì
(
evc⁄
->
ouçut_buf„r
);

1027 
	`‰ì
(
evc⁄
);

1028 
	}
}

1031 
	$evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1032 c⁄° *
addªss
)

1034 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1035 i‡(
evc⁄
->
böd_addªss
)

1036 
	`‰ì
(
evc⁄
->
böd_addªss
);

1037 i‡((
evc⁄
->
böd_addªss
 = 
	`°rdup
(
addªss
)Ë=
NULL
)

1038 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1039 
	}
}

1042 
	$evhâp_c⁄√˘i⁄_£t_loˇl_p‹t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1043 
p‹t
)

1045 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1046 
evc⁄
->
böd_p‹t
 = 
p‹t
;

1047 
	}
}

1050 
	$evhâp_ªque°_di•©ch
(
evhâp_c⁄√˘i⁄
* 
evc⁄
)

1052 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1055 i‡(
ªq
 =
NULL
)

1059 
	`evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evc⁄
);

1062 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_IDLE
);

1064 
evc⁄
->
°©e
 = 
EVCON_WRITING
;

1067 
	`evhâp_make_hódî
(
evc⁄
, 
ªq
);

1069 
	`evhâp_wrôe_buf„r
(
evc⁄
, 
evhâp_wrôe_c⁄√˘i⁄cb
, 
NULL
);

1070 
	}
}

1074 
	$evhâp_c⁄√˘i⁄_ª£t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1076 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1077 
	`evít_dñ
(&
evc⁄
->
ev
);

1079 i‡(
evc⁄
->
fd
 != -1) {

1081 i‡(
	`evhâp_c⁄√˘ed
(
evc⁄
Ë&&Évc⁄->
˛o£cb
 !
NULL
)

1082 (*
evc⁄
->
˛o£cb
)”vc⁄,Évc⁄->
˛o£cb_¨g
);

1084 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);

1085 
evc⁄
->
fd
 = -1;

1087 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1088 
	}
}

1091 
	$evhâp_dëe˘_˛o£_cb
(
fd
, 
wh©
, *
¨g
)

1093 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1094 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1095 
	}
}

1098 
	$evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1100 
evc⁄
->
Êags
 |
EVHTTP_CON_CLOSEDETECT
;

1102 i‡(
	`evít_öôülized
(&
evc⁄
->
˛o£_ev
))

1103 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1104 
	`evít_£t
(&
evc⁄
->
˛o£_ev
,Évc⁄->
fd
, 
EV_READ
,

1105 
evhâp_dëe˘_˛o£_cb
, 
evc⁄
);

1106 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
˛o£_ev
);

1107 
	`evít_add
(&
evc⁄
->
˛o£_ev
, 
NULL
);

1108 
	}
}

1111 
	$evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1113 
evc⁄
->
Êags
 &~
EVHTTP_CON_CLOSEDETECT
;

1114 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1115 
	}
}

1118 
	$evhâp_c⁄√˘i⁄_ªåy
(
fd
, 
wh©
, *
¨g
)

1120 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1122 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1123 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

1124 
	}
}

1131 
	$evhâp_c⁄√˘i⁄cb
(
fd
, 
wh©
, *
¨g
)

1133 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1134 
îr‹
;

1135 
sockÀn_t
 
îrsz
 = (
îr‹
);

1137 i‡(
wh©
 =
EV_TIMEOUT
) {

1138 
	`evít_debug
(("%s: connectionÅimeout for \"%s:%d\" on %d",

1139 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1140 
˛ónup
;

1144 i‡(
	`gësock›t
(
evc⁄
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr‹
,

1145 &
îrsz
) == -1) {

1146 
	`evít_debug
(("%s: getsockopt for \"%s:%d\" on %d",

1147 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1148 
˛ónup
;

1151 i‡(
îr‹
) {

1152 
	`evít_debug
(("%s: connect failed for \"%s:%d\" on %d: %s",

1153 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
,

1154 
	`°ªº‹
(
îr‹
)));

1155 
˛ónup
;

1159 
	`evít_debug
(("%s: connectedÅo \"%s:%d\" on %d\n",

1160 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1163 
evc⁄
->
ªåy_˙t
 = 0;

1164 
evc⁄
->
°©e
 = 
EVCON_IDLE
;

1167 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

1170 
˛ónup
:

1171 i‡(
evc⁄
->
ªåy_max
 < 0 ||Évc⁄->
ªåy_˙t
 <Évcon->retry_max) {

1172 
	`evtimî_£t
(&
evc⁄
->
ev
, 
evhâp_c⁄√˘i⁄_ªåy
,Évcon);

1173 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1174 
	`evhâp_add_evít
(&
evc⁄
->
ev
, 
	`MIN
(3600, 2 <<Évc⁄->
ªåy_˙t
),

1175 
HTTP_CONNECT_TIMEOUT
);

1176 
evc⁄
->
ªåy_˙t
++;

1179 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1182 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
) {

1183 
evhâp_ªque°
 *
ªque°
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1184 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªque°
, 
√xt
);

1185 
ªque°
->
evc⁄
 = 
NULL
;

1188 
ªque°
->
	`cb
‘eque°,Ñeque°->
cb_¨g
);

1189 
	`evhâp_ªque°_‰ì
(
ªque°
);

1191 
	}
}

1198 
	$evhâp_vÆid_ª•⁄£_code
(
code
)

1200 i‡(
code
 == 0)

1204 
	}
}

1209 
	$evhâp_∑r£_ª•⁄£_löe
(
evhâp_ªque°
 *
ªq
, *
löe
)

1211 *
¥Ÿocﬁ
;

1212 *
numbî
;

1213 *
ªadabÀ
;

1215 
¥Ÿocﬁ
 = 
	`°r£p
(&
löe
, " ");

1216 i‡(
löe
 =
NULL
)

1218 
numbî
 = 
	`°r£p
(&
löe
, " ");

1219 i‡(
löe
 =
NULL
)

1221 
ªadabÀ
 = 
löe
;

1223 i‡(
	`°rcmp
(
¥Ÿocﬁ
, "HTTP/1.0") == 0) {

1224 
ªq
->
maj‹
 = 1;

1225 
ªq
->
mö‹
 = 0;

1226 } i‡(
	`°rcmp
(
¥Ÿocﬁ
, "HTTP/1.1") == 0) {

1227 
ªq
->
maj‹
 = 1;

1228 
ªq
->
mö‹
 = 1;

1230 
	`evít_debug
(("%s: badÖrotocol \"%s\"",

1231 
__func__
, 
¥Ÿocﬁ
));

1235 
ªq
->
ª•⁄£_code
 = 
	`©oi
(
numbî
);

1236 i‡(!
	`evhâp_vÆid_ª•⁄£_code
(
ªq
->
ª•⁄£_code
)) {

1237 
	`evít_debug
(("%s: badÑesponse code \"%s\"",

1238 
__func__
, 
numbî
));

1242 i‡((
ªq
->
ª•⁄£_code_löe
 = 
	`°rdup
(
ªadabÀ
)Ë=
NULL
)

1243 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1246 
	}
}

1251 
	$evhâp_∑r£_ªque°_löe
(
evhâp_ªque°
 *
ªq
, *
löe
)

1253 *
mëhod
;

1254 *
uri
;

1255 *
vîsi⁄
;

1258 
mëhod
 = 
	`°r£p
(&
löe
, " ");

1259 i‡(
löe
 =
NULL
)

1261 
uri
 = 
	`°r£p
(&
löe
, " ");

1262 i‡(
löe
 =
NULL
)

1264 
vîsi⁄
 = 
	`°r£p
(&
löe
, " ");

1265 i‡(
löe
 !
NULL
)

1269 i‡(
	`°rcmp
(
mëhod
, "GET") == 0) {

1270 
ªq
->
ty≥
 = 
EVHTTP_REQ_GET
;

1271 } i‡(
	`°rcmp
(
mëhod
, "POST") == 0) {

1272 
ªq
->
ty≥
 = 
EVHTTP_REQ_POST
;

1273 } i‡(
	`°rcmp
(
mëhod
, "HEAD") == 0) {

1274 
ªq
->
ty≥
 = 
EVHTTP_REQ_HEAD
;

1276 
	`evít_debug
(("%s: bad method %s onÑequest %p from %s",

1277 
__func__
, 
mëhod
, 
ªq
,Ñeq->
ªmŸe_ho°
));

1281 i‡(
	`°rcmp
(
vîsi⁄
, "HTTP/1.0") == 0) {

1282 
ªq
->
maj‹
 = 1;

1283 
ªq
->
mö‹
 = 0;

1284 } i‡(
	`°rcmp
(
vîsi⁄
, "HTTP/1.1") == 0) {

1285 
ªq
->
maj‹
 = 1;

1286 
ªq
->
mö‹
 = 1;

1288 
	`evít_debug
(("%s: bad version %s onÑequest %p from %s",

1289 
__func__
, 
vîsi⁄
, 
ªq
,Ñeq->
ªmŸe_ho°
));

1293 i‡((
ªq
->
uri
 = 
	`°rdup
(uri)Ë=
NULL
) {

1294 
	`evít_debug
(("%s:Évhâp_decode_uri", 
__func__
));

1299 i‡(
	`°æí
(
ªq
->
uri
) > 0 &&Ñeq->uri[0] != '/')

1300 
ªq
->
Êags
 |
EVHTTP_PROXY_REQUEST
;

1303 
	}
}

1306 
	$evhâp_föd_hódî
(c⁄° 
evkeyvÆq
 *
hódîs
, c⁄° *
key
)

1308 
evkeyvÆ
 *
hódî
;

1310 
	`TAILQ_FOREACH
(
hódî
, 
hódîs
, 
√xt
) {

1311 i‡(
	`°rˇ£cmp
(
hódî
->
key
, key) == 0)

1312  (
hódî
->
vÆue
);

1315  (
NULL
);

1316 
	}
}

1319 
	$evhâp_˛ór_hódîs
(
evkeyvÆq
 *
hódîs
)

1321 
evkeyvÆ
 *
hódî
;

1323 
hódî
 = 
	`TAILQ_FIRST
(
hódîs
);

1324 
hódî
 !
NULL
;

1325 
hódî
 = 
	`TAILQ_FIRST
(
hódîs
)) {

1326 
	`TAILQ_REMOVE
(
hódîs
, 
hódî
, 
√xt
);

1327 
	`‰ì
(
hódî
->
key
);

1328 
	`‰ì
(
hódî
->
vÆue
);

1329 
	`‰ì
(
hódî
);

1331 
	}
}

1339 
	$evhâp_ªmove_hódî
(
evkeyvÆq
 *
hódîs
, c⁄° *
key
)

1341 
evkeyvÆ
 *
hódî
;

1343 
	`TAILQ_FOREACH
(
hódî
, 
hódîs
, 
√xt
) {

1344 i‡(
	`°rˇ£cmp
(
hódî
->
key
, key) == 0)

1348 i‡(
hódî
 =
NULL
)

1352 
	`TAILQ_REMOVE
(
hódîs
, 
hódî
, 
√xt
);

1353 
	`‰ì
(
hódî
->
key
);

1354 
	`‰ì
(
hódî
->
vÆue
);

1355 
	`‰ì
(
hódî
);

1358 
	}
}

1361 
	$evhâp_add_hódî
(
evkeyvÆq
 *
hódîs
,

1362 c⁄° *
key
, c⁄° *
vÆue
)

1364 
evkeyvÆ
 *
hódî
 = 
NULL
;

1366 
	`evít_debug
(("%s: key: %†vÆ: %s\n", 
__func__
, 
key
, 
vÆue
));

1368 i‡(
	`°rchr
(
vÆue
, '\r'Ë!
NULL
 || strchr(value, '\n') != NULL ||

1369 
	`°rchr
(
key
, '\r'Ë!
NULL
 || strchr(key, '\n') != NULL) {

1371 
	`evít_debug
(("%s: dr›pög iŒegÆ hódî\n", 
__func__
));

1375 
hódî
 = 
	`ˇŒoc
(1, (
evkeyvÆ
));

1376 i‡(
hódî
 =
NULL
) {

1377 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

1380 i‡((
hódî
->
key
 = 
	`°rdup
(key)Ë=
NULL
) {

1381 
	`‰ì
(
hódî
);

1382 
	`evít_w¨n
("%s: sådup", 
__func__
);

1385 i‡((
hódî
->
vÆue
 = 
	`°rdup
(vÆue)Ë=
NULL
) {

1386 
	`‰ì
(
hódî
->
key
);

1387 
	`‰ì
(
hódî
);

1388 
	`evít_w¨n
("%s: sådup", 
__func__
);

1392 
	`TAILQ_INSERT_TAIL
(
hódîs
, 
hódî
, 
√xt
);

1395 
	}
}

1407 
mesßge_ªad_°©us


1408 
	$evhâp_∑r£_fú°löe
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
buf„r
)

1410 *
löe
;

1411 
mesßge_ªad_°©us
 
°©us
 = 
ALL_DATA_READ
;

1413 
löe
 = 
	`evbuf„r_ªadlöe
(
buf„r
);

1414 i‡(
löe
 =
NULL
)

1415  (
MORE_DATA_EXPECTED
);

1417 
ªq
->
köd
) {

1418 
EVHTTP_REQUEST
:

1419 i‡(
	`evhâp_∑r£_ªque°_löe
(
ªq
, 
löe
) == -1)

1420 
°©us
 = 
DATA_CORRUPTED
;

1422 
EVHTTP_RESPONSE
:

1423 i‡(
	`evhâp_∑r£_ª•⁄£_löe
(
ªq
, 
löe
) == -1)

1424 
°©us
 = 
DATA_CORRUPTED
;

1427 
°©us
 = 
DATA_CORRUPTED
;

1430 
	`‰ì
(
löe
);

1431  (
°©us
);

1432 
	}
}

1435 
	$evhâp_≠≥nd_to_œ°_hódî
(
evkeyvÆq
 *
hódîs
, c⁄° *
löe
)

1437 
evkeyvÆ
 *
hódî
 = 
	`TAILQ_LAST
(
hódîs
, 
evkeyvÆq
);

1438 *
√wvÆ
;

1439 
size_t
 
ﬁd_Àn
, 
löe_Àn
;

1441 i‡(
hódî
 =
NULL
)

1444 
ﬁd_Àn
 = 
	`°æí
(
hódî
->
vÆue
);

1445 
löe_Àn
 = 
	`°æí
(
löe
);

1447 
√wvÆ
 = 
	`ªÆloc
(
hódî
->
vÆue
, 
ﬁd_Àn
 + 
löe_Àn
 + 1);

1448 i‡(
√wvÆ
 =
NULL
)

1451 
	`mem˝y
(
√wvÆ
 + 
ﬁd_Àn
, 
löe
, 
löe_Àn
 + 1);

1452 
hódî
->
vÆue
 = 
√wvÆ
;

1455 
	}
}

1457 
mesßge_ªad_°©us


1458 
	$evhâp_∑r£_hódîs
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
* 
buf„r
)

1460 *
löe
;

1461 
mesßge_ªad_°©us
 
°©us
 = 
MORE_DATA_EXPECTED
;

1463 
evkeyvÆq
* 
hódîs
 = 
ªq
->
öput_hódîs
;

1464 (
löe
 = 
	`evbuf„r_ªadlöe
(
buf„r
))

1465 !
NULL
) {

1466 *
skey
, *
svÆue
;

1468 i‡(*
löe
 == '\0') {

1469 
°©us
 = 
ALL_DATA_READ
;

1470 
	`‰ì
(
löe
);

1475 i‡(*
löe
 == ' ' || *line == '\t') {

1476 i‡(
	`evhâp_≠≥nd_to_œ°_hódî
(
hódîs
, 
löe
) == -1)

1477 
îr‹
;

1478 
	`‰ì
(
löe
);

1483 
svÆue
 = 
löe
;

1484 
skey
 = 
	`°r£p
(&
svÆue
, ":");

1485 i‡(
svÆue
 =
NULL
)

1486 
îr‹
;

1488 
svÆue
 +
	`°r•n
(svalue, " ");

1490 i‡(
	`evhâp_add_hódî
(
hódîs
, 
skey
, 
svÆue
) == -1)

1491 
îr‹
;

1493 
	`‰ì
(
löe
);

1496  (
°©us
);

1498 
îr‹
:

1499 
	`‰ì
(
löe
);

1500  (
DATA_CORRUPTED
);

1501 
	}
}

1504 
	$evhâp_gë_body_Àngth
(
evhâp_ªque°
 *
ªq
)

1506 
evkeyvÆq
 *
hódîs
 = 
ªq
->
öput_hódîs
;

1507 c⁄° *
c⁄ã¡_Àngth
;

1508 c⁄° *
c⁄√˘i⁄
;

1510 
c⁄ã¡_Àngth
 = 
	`evhâp_föd_hódî
(
hódîs
, "Content-Length");

1511 
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

1513 i‡(
c⁄ã¡_Àngth
 =
NULL
 && 
c⁄√˘i⁄
 == NULL)

1514 
ªq
->
¡‹ód
 = -1;

1515 i‡(
c⁄ã¡_Àngth
 =
NULL
 &&

1516 
	`°rˇ£cmp
(
c⁄√˘i⁄
, "Close") != 0) {

1518 
	`evít_w¨nx
("%s: we gotÇo contentÜength, butÅhe "

1520 
__func__
, 
c⁄√˘i⁄
);

1522 } i‡(
c⁄ã¡_Àngth
 =
NULL
) {

1523 
ªq
->
¡‹ód
 = -1;

1525 *
ídp
;

1526 
ev_öt64_t
 
¡‹ód
 = 
	`evutû_°πﬁl
(
c⁄ã¡_Àngth
, &
ídp
, 10);

1527 i‡(*
c⁄ã¡_Àngth
 ='\0' || *
ídp
 !'\0' || 
¡‹ód
 < 0) {

1528 
	`evít_debug
(("%s: illegal contentÜength: %s",

1529 
__func__
, 
c⁄ã¡_Àngth
));

1532 
ªq
->
¡‹ód
 =Çtoread;

1535 
	`evít_debug
(("%s: bytesÅoÑead: %lld (in buffer %ld)\n",

1536 
__func__
, 
ªq
->
¡‹ód
,

1537 
	`EVBUFFER_LENGTH
(
ªq
->
evc⁄
->
öput_buf„r
)));

1540 
	}
}

1543 
	$evhâp_gë_body
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

1545 c⁄° *
x„r_íc
;

1548 i‡(
ªq
->
köd
 =
EVHTTP_REQUEST
 &&Ñeq->
ty≥
 !
EVHTTP_REQ_POST
) {

1549 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

1552 
evc⁄
->
°©e
 = 
EVCON_READING_BODY
;

1553 
x„r_íc
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Transfer-Encoding");

1554 i‡(
x„r_íc
 !
NULL
 && 
	`°rˇ£cmp
(xfer_enc, "chunked") == 0) {

1555 
ªq
->
chunked
 = 1;

1556 
ªq
->
¡‹ód
 = -1;

1558 i‡(
	`evhâp_gë_body_Àngth
(
ªq
) == -1) {

1559 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
,

1560 
EVCON_HTTP_INVALID_HEADER
);

1564 
	`evhâp_ªad_body
(
evc⁄
, 
ªq
);

1565 
	}
}

1568 
	$evhâp_ªad_fú°löe
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1569 
evhâp_ªque°
 *
ªq
)

1571 
mesßge_ªad_°©us
 
ªs
;

1573 
ªs
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
evc⁄
->
öput_buf„r
);

1574 i‡(
ªs
 =
DATA_CORRUPTED
) {

1576 
	`evít_debug
(("%s: bad headerÜines on %d\n",

1577 
__func__
, 
evc⁄
->
fd
));

1578 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1580 } i‡(
ªs
 =
MORE_DATA_EXPECTED
) {

1582 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

1583 
evc⁄
->
timeout
, 
HTTP_READ_TIMEOUT
);

1587 
evc⁄
->
°©e
 = 
EVCON_READING_HEADERS
;

1588 
	`evhâp_ªad_hódî
(
evc⁄
, 
ªq
);

1589 
	}
}

1592 
	$evhâp_ªad_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

1594 
mesßge_ªad_°©us
 
ªs
;

1595 
fd
 = 
evc⁄
->fd;

1597 
ªs
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
evc⁄
->
öput_buf„r
);

1598 i‡(
ªs
 =
DATA_CORRUPTED
) {

1600 
	`evít_debug
(("%s: bad hódîÜöe†⁄ %d\n", 
__func__
, 
fd
));

1601 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1603 } i‡(
ªs
 =
MORE_DATA_EXPECTED
) {

1605 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

1606 
evc⁄
->
timeout
, 
HTTP_READ_TIMEOUT
);

1611 
ªq
->
köd
) {

1612 
EVHTTP_REQUEST
:

1613 
	`evít_debug
(("%s: checking forÖost data on %d\n",

1614 
__func__
, 
fd
));

1615 
	`evhâp_gë_body
(
evc⁄
, 
ªq
);

1618 
EVHTTP_RESPONSE
:

1619 i‡(
ªq
->
ª•⁄£_code
 =
HTTP_NOCONTENT
 ||

1620 
ªq
->
ª•⁄£_code
 =
HTTP_NOTMODIFIED
 ||

1621 (
ªq
->
ª•⁄£_code
 >= 100 &&Ñeq->response_code < 200)) {

1622 
	`evít_debug
(("%s: skipping body for code %d\n",

1623 
__func__
, 
ªq
->
ª•⁄£_code
));

1624 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

1626 
	`evít_debug
(("%s: start ofÑead body for %s on %d\n",

1627 
__func__
, 
ªq
->
ªmŸe_ho°
, 
fd
));

1628 
	`evhâp_gë_body
(
evc⁄
, 
ªq
);

1633 
	`evít_w¨nx
("%s: bad hódî o¿%d", 
__func__
, 
fd
);

1634 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1637 
	}
}

1649 
evhâp_c⁄√˘i⁄
 *

1650 
	$evhâp_c⁄√˘i⁄_√w
(c⁄° *
addªss
, 
p‹t
)

1652 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1654 
	`evít_debug
(("Aâem±ög c⁄√˘i⁄Åÿ%s:%d\n", 
addªss
, 
p‹t
));

1656 i‡((
evc⁄
 = 
	`ˇŒoc
(1, (
evhâp_c⁄√˘i⁄
))Ë=
NULL
) {

1657 
	`evít_w¨n
("%s: cÆlo¯Áûed", 
__func__
);

1658 
îr‹
;

1661 
evc⁄
->
fd
 = -1;

1662 
evc⁄
->
p‹t
 =Öort;

1664 
evc⁄
->
timeout
 = -1;

1665 
evc⁄
->
ªåy_˙t
 =Évc⁄->
ªåy_max
 = 0;

1667 i‡((
evc⁄
->
addªss
 = 
	`°rdup
◊ddªss)Ë=
NULL
) {

1668 
	`evít_w¨n
("%s: sådu∞Áûed", 
__func__
);

1669 
îr‹
;

1672 i‡((
evc⁄
->
öput_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

1673 
	`evít_w¨n
("%s:Évbuf„r_√w faûed", 
__func__
);

1674 
îr‹
;

1677 i‡((
evc⁄
->
ouçut_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

1678 
	`evít_w¨n
("%s:Évbuf„r_√w faûed", 
__func__
);

1679 
îr‹
;

1682 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1683 
	`TAILQ_INIT
(&
evc⁄
->
ªque°s
);

1685  (
evc⁄
);

1687 
îr‹
:

1688 i‡(
evc⁄
 !
NULL
)

1689 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1690  (
NULL
);

1691 
	}
}

1693 
	$evhâp_c⁄√˘i⁄_£t_ba£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1694 
evít_ba£
 *
ba£
)

1696 
	`as£π
(
evc⁄
->
ba£
 =
NULL
);

1697 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1698 
evc⁄
->
ba£
 = base;

1699 
	}
}

1702 
	$evhâp_c⁄√˘i⁄_£t_timeout
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1703 
timeout_ö_£cs
)

1705 
evc⁄
->
timeout
 = 
timeout_ö_£cs
;

1706 
	}
}

1709 
	$evhâp_c⁄√˘i⁄_£t_ªåõs
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1710 
ªåy_max
)

1712 
evc⁄
->
ªåy_max
 =Ñetry_max;

1713 
	}
}

1716 
evhâp_c⁄√˘i⁄_£t_˛o£cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1717 (*
cb
)(
evhâp_c⁄√˘i⁄
 *, *), *
cb¨g
)

1719 
evc⁄
->
˛o£cb
 = 
cb
;

1720 
evc⁄
->
˛o£cb_¨g
 = 
cb¨g
;

1721 
	}
}

1724 
	$evhâp_c⁄√˘i⁄_gë_≥î
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1725 **
addªss
, 
u_sh‹t
 *
p‹t
)

1727 *
addªss
 = 
evc⁄
->address;

1728 *
p‹t
 = 
evc⁄
->port;

1729 
	}
}

1732 
	$evhâp_c⁄√˘i⁄_c⁄√˘
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1734 i‡(
evc⁄
->
°©e
 =
EVCON_CONNECTING
)

1737 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1739 
	`as£π
(!(
evc⁄
->
Êags
 & 
EVHTTP_CON_INCOMING
));

1740 
evc⁄
->
Êags
 |
EVHTTP_CON_OUTGOING
;

1742 
evc⁄
->
fd
 = 
	`böd_sockë
(

1743 
evc⁄
->
böd_addªss
,Évc⁄->
böd_p‹t
, 0 );

1744 i‡(
evc⁄
->
fd
 == -1) {

1745 
	`evít_debug
(("%s: failedÅo bindÅo \"%s\"",

1746 
__func__
, 
evc⁄
->
böd_addªss
));

1750 i‡(
	`sockë_c⁄√˘
(
evc⁄
->
fd
,Évc⁄->
addªss
,Évc⁄->
p‹t
) == -1) {

1751 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);Évcon->fd = -1;

1756 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_WRITE
, 
evhâp_c⁄√˘i⁄cb
,Évcon);

1757 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1758 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_CONNECT_TIMEOUT
);

1760 
evc⁄
->
°©e
 = 
EVCON_CONNECTING
;

1763 
	}
}

1772 
	$evhâp_make_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1773 
evhâp_ªque°
 *
ªq
,

1774 
evhâp_cmd_ty≥
 
ty≥
, c⁄° *
uri
)

1777 
ªq
->
köd
 = 
EVHTTP_REQUEST
;

1778 
ªq
->
ty≥
 =Åype;

1779 i‡(
ªq
->
uri
 !
NULL
)

1780 
	`‰ì
(
ªq
->
uri
);

1781 i‡((
ªq
->
uri
 = 
	`°rdup
(uri)Ë=
NULL
)

1782 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1785 i‡(!
ªq
->
maj‹
 && !ªq->
mö‹
) {

1786 
ªq
->
maj‹
 = 1;

1787 
ªq
->
mö‹
 = 1;

1790 
	`as£π
(
ªq
->
evc⁄
 =
NULL
);

1791 
ªq
->
evc⁄
 =Évcon;

1792 
	`as£π
(!(
ªq
->
Êags
 & 
EVHTTP_REQ_OWN_CONNECTION
));

1794 
	`TAILQ_INSERT_TAIL
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

1797 i‡(!
	`evhâp_c⁄√˘ed
(
evc⁄
))

1798  (
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
));

1805 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë=
ªq
)

1806 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

1809 
	}
}

1817 
	$evhâp_°¨t_ªad
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1820 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1821 
	`evít_dñ
(&
evc⁄
->
ev
);

1822 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_READ
, 
evhâp_ªad
,Évcon);

1823 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1825 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_READ_TIMEOUT
);

1826 
evc⁄
->
°©e
 = 
EVCON_READING_FIRSTLINE
;

1827 
	}
}

1830 
	$evhâp_£nd_d⁄e
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, *
¨g
)

1832 
√ed_˛o£
;

1833 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1834 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

1837 
	`evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evc⁄
);

1839 
√ed_˛o£
 =

1840 (
ªq
->
mö‹
 == 0 &&

1841 !
	`evhâp_is_c⁄√˘i⁄_kì∑live
(
ªq
->
öput_hódîs
))||

1842 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
) ||

1843 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
ouçut_hódîs
);

1845 
	`as£π
(
ªq
->
Êags
 & 
EVHTTP_REQ_OWN_CONNECTION
);

1846 
	`evhâp_ªque°_‰ì
(
ªq
);

1848 i‡(
√ed_˛o£
) {

1849 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1854 i‡(
	`evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evc⁄
) == -1)

1855 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1856 
	}
}

1863 
	$evhâp_£nd_îr‹
(
evhâp_ªque°
 *
ªq
, 
îr‹
, c⁄° *
ªas⁄
)

1865 
	#ERR_FORMAT
 "<HTML><HEAD>\n" \

1870 "</BODY></HTML>\n"

	)

1872 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

1875 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

1877 
	`evhâp_ª•⁄£_code
(
ªq
, 
îr‹
, 
ªas⁄
);

1879 
	`evbuf„r_add_¥ötf
(
buf
, 
ERR_FORMAT
, 
îr‹
, 
ªas⁄
);

1881 
	`evhâp_£nd_∑ge
(
ªq
, 
buf
);

1883 
	`evbuf„r_‰ì
(
buf
);

1884 #unde‡
ERR_FORMAT


1885 
	}
}

1889 
ölöe
 

1890 
	$evhâp_£nd
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

1892 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
ªq
->evcon;

1894 
	`as£π
(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë=
ªq
);

1897 i‡(
d©abuf
 !
NULL
)

1898 
	`evbuf„r_add_buf„r
(
ªq
->
ouçut_buf„r
, 
d©abuf
);

1901 
	`evhâp_make_hódî
(
evc⁄
, 
ªq
);

1903 
	`evhâp_wrôe_buf„r
(
evc⁄
, 
evhâp_£nd_d⁄e
, 
NULL
);

1904 
	}
}

1907 
	$evhâp_£nd_ª∂y
(
evhâp_ªque°
 *
ªq
, 
code
, c⁄° *
ªas⁄
,

1908 
evbuf„r
 *
d©abuf
)

1910 
	`evhâp_ª•⁄£_code
(
ªq
, 
code
, 
ªas⁄
);

1912 
	`evhâp_£nd
(
ªq
, 
d©abuf
);

1913 
	}
}

1916 
	$evhâp_£nd_ª∂y_°¨t
(
evhâp_ªque°
 *
ªq
, 
code
,

1917 c⁄° *
ªas⁄
)

1919 
	`evhâp_ª•⁄£_code
(
ªq
, 
code
, 
ªas⁄
);

1920 i‡(
ªq
->
maj‹
 =1 &&Ñeq->
mö‹
 == 1) {

1922 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Transfer-Encoding",

1924 
ªq
->
chunked
 = 1;

1926 
	`evhâp_make_hódî
(
ªq
->
evc⁄
,Ñeq);

1927 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
NULL
, NULL);

1928 
	}
}

1931 
	$evhâp_£nd_ª∂y_chunk
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

1933 i‡(
ªq
->
chunked
) {

1934 
	`evbuf„r_add_¥ötf
(
ªq
->
evc⁄
->
ouçut_buf„r
, "%x\r\n",

1935 ()
	`EVBUFFER_LENGTH
(
d©abuf
));

1937 
	`evbuf„r_add_buf„r
(
ªq
->
evc⁄
->
ouçut_buf„r
, 
d©abuf
);

1938 i‡(
ªq
->
chunked
) {

1939 
	`evbuf„r_add
(
ªq
->
evc⁄
->
ouçut_buf„r
, "\r\n", 2);

1941 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
NULL
, NULL);

1942 
	}
}

1945 
	$evhâp_£nd_ª∂y_íd
(
evhâp_ªque°
 *
ªq
)

1947 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
ªq
->evcon;

1949 i‡(
ªq
->
chunked
) {

1950 
	`evbuf„r_add
(
ªq
->
evc⁄
->
ouçut_buf„r
, "0\r\n\r\n", 5);

1951 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
evhâp_£nd_d⁄e
, 
NULL
);

1952 
ªq
->
chunked
 = 0;

1953 } i‡(!
	`evít_≥ndög
(&
evc⁄
->
ev
, 
EV_WRITE
|
EV_TIMEOUT
, 
NULL
)) {

1955 
	`evhâp_£nd_d⁄e
(
evc⁄
, 
NULL
);

1958 
evc⁄
->
cb
 = 
evhâp_£nd_d⁄e
;

1959 
evc⁄
->
cb_¨g
 = 
NULL
;

1961 
	}
}

1964 
	$evhâp_ª•⁄£_code
(
evhâp_ªque°
 *
ªq
, 
code
, c⁄° *
ªas⁄
)

1966 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

1967 
ªq
->
ª•⁄£_code
 = 
code
;

1968 i‡(
ªq
->
ª•⁄£_code_löe
 !
NULL
)

1969 
	`‰ì
(
ªq
->
ª•⁄£_code_löe
);

1970 
ªq
->
ª•⁄£_code_löe
 = 
	`°rdup
(
ªas⁄
);

1971 
	}
}

1974 
	$evhâp_£nd_∑ge
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

1976 i‡(!
ªq
->
maj‹
 || !ªq->
mö‹
) {

1977 
ªq
->
maj‹
 = 1;

1978 
ªq
->
mö‹
 = 1;

1981 i‡(
ªq
->
köd
 !
EVHTTP_RESPONSE
)

1982 
	`evhâp_ª•⁄£_code
(
ªq
, 200, "OK");

1984 
	`evhâp_˛ór_hódîs
(
ªq
->
ouçut_hódîs
);

1985 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Content-Type", "text/html");

1986 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

1988 
	`evhâp_£nd
(
ªq
, 
d©abuf
);

1989 
	}
}

1991 c⁄° 
	guri_ch¨s
[256] = {

2018 
	$evhâp_ícode_uri
(c⁄° *
uri
)

2020 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

2021 *
p
;

2023 
p
 = (*)
uri
; *p != '\0';Ö++) {

2024 i‡(
uri_ch¨s
[(
u_ch¨
)(*
p
)]) {

2025 
	`evbuf„r_add
(
buf
, 
p
, 1);

2027 
	`evbuf„r_add_¥ötf
(
buf
, "%%%02X", (
u_ch¨
)(*
p
));

2030 
	`evbuf„r_add
(
buf
, "", 1);

2031 
p
 = 
	`°rdup
((*)
	`EVBUFFER_DATA
(
buf
));

2032 
	`evbuf„r_‰ì
(
buf
);

2034  (
p
);

2035 
	}
}

2038 
	$evhâp_decode_uri
(c⁄° *
uri
)

2040 
c
, *
ªt
;

2041 
i
, 
j
, 
ö_quîy
 = 0;

2043 
ªt
 = 
	`mÆloc
(
	`°æí
(
uri
) + 1);

2044 i‡(
ªt
 =
NULL
)

2045 
	`evít_îr
(1, "%s: mÆloc(%lu)", 
__func__
,

2046 ()(
	`°æí
(
uri
) + 1));

2048 
i
 = 
j
 = 0; 
uri
[i] != '\0'; i++) {

2049 
c
 = 
uri
[
i
];

2050 i‡(
c
 == '?') {

2051 
ö_quîy
 = 1;

2052 } i‡(
c
 ='+' && 
ö_quîy
) {

2053 
c
 = ' ';

2054 } i‡(
c
 ='%' && 
	`isxdigô
(()
uri
[
i
+1]) &&

2055 
	`isxdigô
(()
uri
[
i
+2])) {

2056 
tmp
[] = { 
uri
[
i
+1], uri[i+2], '\0' };

2057 
c
 = ()
	`°πﬁ
(
tmp
, 
NULL
, 16);

2058 
i
 += 2;

2060 
ªt
[
j
++] = 
c
;

2062 
ªt
[
j
] = '\0';

2064  (
ªt
);

2065 
	}
}

2074 
	$evhâp_∑r£_quîy
(c⁄° *
uri
, 
evkeyvÆq
 *
hódîs
)

2076 *
löe
;

2077 *
¨gumít
;

2078 *
p
;

2080 
	`TAILQ_INIT
(
hódîs
);

2083 i‡(
	`°rchr
(
uri
, '?'Ë=
NULL
)

2086 i‡((
löe
 = 
	`°rdup
(
uri
)Ë=
NULL
)

2087 
	`evít_îr
(1, "%s: sådup", 
__func__
);

2090 
¨gumít
 = 
löe
;

2093 
	`°r£p
(&
¨gumít
, "?");

2095 
p
 = 
¨gumít
;

2096 
p
 !
NULL
 && *p != '\0') {

2097 *
key
, *
vÆue
;

2098 
¨gumít
 = 
	`°r£p
(&
p
, "&");

2100 
vÆue
 = 
¨gumít
;

2101 
key
 = 
	`°r£p
(&
vÆue
, "=");

2102 i‡(
vÆue
 =
NULL
)

2103 
îr‹
;

2105 
vÆue
 = 
	`evhâp_decode_uri
(value);

2106 
	`evít_debug
(("Quîy P¨am: %†-> %s\n", 
key
, 
vÆue
));

2107 
	`evhâp_add_hódî
(
hódîs
, 
key
, 
vÆue
);

2108 
	`‰ì
(
vÆue
);

2111 
îr‹
:

2112 
	`‰ì
(
löe
);

2113 
	}
}

2115 
evhâp_cb
 *

2116 
	$evhâp_di•©ch_ˇŒback
(
hâpcbq
 *
ˇŒbacks
, 
evhâp_ªque°
 *
ªq
)

2118 
evhâp_cb
 *
cb
;

2119 
size_t
 
off£t
 = 0;

2122 *
p
 = 
	`°rchr
(
ªq
->
uri
, '?');

2123 i‡(
p
 !
NULL
)

2124 
off£t
 = (
size_t
)(
p
 - 
ªq
->
uri
);

2126 
	`TAILQ_FOREACH
(
cb
, 
ˇŒbacks
, 
√xt
) {

2127 
ªs
 = 0;

2128 i‡(
p
 =
NULL
) {

2129 
ªs
 = 
	`°rcmp
(
cb
->
wh©
, 
ªq
->
uri
) == 0;

2131 
ªs
 = ((
	`°∫cmp
(
cb
->
wh©
, 
ªq
->
uri
, 
off£t
) == 0) &&

2132 (
cb
->
wh©
[
off£t
] == '\0'));

2135 i‡(
ªs
)

2136  (
cb
);

2139  (
NULL
);

2140 
	}
}

2143 
	$evhâp_h™dÀ_ªque°
(
evhâp_ªque°
 *
ªq
, *
¨g
)

2145 
evhâp
 *
hâp
 = 
¨g
;

2146 
evhâp_cb
 *
cb
 = 
NULL
;

2148 i‡(
ªq
->
uri
 =
NULL
) {

2149 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_BADREQUEST
, "Bad Request");

2153 i‡((
cb
 = 
	`evhâp_di•©ch_ˇŒback
(&
hâp
->
ˇŒbacks
, 
ªq
)Ë!
NULL
) {

2154 (*
cb
->cb)(
ªq
, cb->
cb¨g
);

2159 i‡(
hâp
->
gícb
) {

2160 (*
hâp
->
gícb
)(
ªq
, hâp->
gícb¨g
);

2164 
	#ERR_FORMAT
 "<html><head>" \

2169 "</body></html>\n"

	)

2171 *
esˇ≥d_html
 = 
	`evhâp_htmÀsˇ≥
(
ªq
->
uri
);

2172 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

2174 
	`evhâp_ª•⁄£_code
(
ªq
, 
HTTP_NOTFOUND
, "Not Found");

2176 
	`evbuf„r_add_¥ötf
(
buf
, 
ERR_FORMAT
, 
esˇ≥d_html
);

2178 
	`‰ì
(
esˇ≥d_html
);

2180 
	`evhâp_£nd_∑ge
(
ªq
, 
buf
);

2182 
	`evbuf„r_‰ì
(
buf
);

2183 #unde‡
ERR_FORMAT


2185 
	}
}

2188 
	$ac˚±_sockë
(
fd
, 
wh©
, *
¨g
)

2190 
evhâp
 *
hâp
 = 
¨g
;

2191 
sockaddr_°‹age
 
ss
;

2192 
sockÀn_t
 
addæí
 = (
ss
);

2193 
nfd
;

2195 i‡((
nfd
 = 
	`ac˚±
(
fd
, (
sockaddr
 *)&
ss
, &
addæí
)) == -1) {

2196 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EINTR
)

2197 
	`evít_w¨n
("%s: badác˚±", 
__func__
);

2200 i‡(
	`evutû_make_sockë_n⁄blockög
(
nfd
) < 0)

2203 
	`evhâp_gë_ªque°
(
hâp
, 
nfd
, (
sockaddr
 *)&
ss
, 
addæí
);

2204 
	}
}

2207 
	$evhâp_böd_sockë
(
evhâp
 *
hâp
, c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2209 
fd
;

2210 
ªs
;

2212 i‡((
fd
 = 
	`böd_sockë
(
addªss
, 
p‹t
, 1 )) == -1)

2215 i‡(
	`li°í
(
fd
, 128) == -1) {

2216 
	`evít_w¨n
("%s:Üi°í", 
__func__
);

2217 
	`EVUTIL_CLOSESOCKET
(
fd
);

2221 
ªs
 = 
	`evhâp_ac˚±_sockë
(
hâp
, 
fd
);

2223 i‡(
ªs
 != -1)

2224 
	`evít_debug
(("BoundÅoÖort %d - Awaiting connections ... ",

2225 
p‹t
));

2227  (
ªs
);

2228 
	}
}

2231 
	$evhâp_ac˚±_sockë
(
evhâp
 *
hâp
, 
fd
)

2233 
evhâp_bound_sockë
 *
bound
;

2234 
evít
 *
ev
;

2235 
ªs
;

2237 
bound
 = 
	`mÆloc
((
evhâp_bound_sockë
));

2238 i‡(
bound
 =
NULL
)

2241 
ev
 = &
bound
->
böd_ev
;

2244 
	`evít_£t
(
ev
, 
fd
, 
EV_READ
 | 
EV_PERSIST
, 
ac˚±_sockë
, 
hâp
);

2245 
	`EVHTTP_BASE_SET
(
hâp
, 
ev
);

2247 
ªs
 = 
	`evít_add
(
ev
, 
NULL
);

2249 i‡(
ªs
 == -1) {

2250 
	`‰ì
(
bound
);

2254 
	`TAILQ_INSERT_TAIL
(&
hâp
->
sockës
, 
bound
, 
√xt
);

2257 
	}
}

2259 
evhâp
*

2260 
	$evhâp_√w_obje˘
()

2262 
evhâp
 *
hâp
 = 
NULL
;

2264 i‡((
hâp
 = 
	`ˇŒoc
(1, (
evhâp
))Ë=
NULL
) {

2265 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2266  (
NULL
);

2269 
hâp
->
timeout
 = -1;

2271 
	`TAILQ_INIT
(&
hâp
->
sockës
);

2272 
	`TAILQ_INIT
(&
hâp
->
ˇŒbacks
);

2273 
	`TAILQ_INIT
(&
hâp
->
c⁄√˘i⁄s
);

2275  (
hâp
);

2276 
	}
}

2278 
evhâp
 *

2279 
	$evhâp_√w
(
evít_ba£
 *
ba£
)

2281 
evhâp
 *
hâp
 = 
	`evhâp_√w_obje˘
();

2283 
hâp
->
ba£
 = base;

2285  (
hâp
);

2286 
	}
}

2292 
evhâp
 *

2293 
	$evhâp_°¨t
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2295 
evhâp
 *
hâp
 = 
	`evhâp_√w_obje˘
();

2297 i‡(
	`evhâp_böd_sockë
(
hâp
, 
addªss
, 
p‹t
) == -1) {

2298 
	`‰ì
(
hâp
);

2299  (
NULL
);

2302  (
hâp
);

2303 
	}
}

2306 
	$evhâp_‰ì
(
evhâp
* 
hâp
)

2308 
evhâp_cb
 *
hâp_cb
;

2309 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2310 
evhâp_bound_sockë
 *
bound
;

2311 
fd
;

2314 (
bound
 = 
	`TAILQ_FIRST
(&
hâp
->
sockës
)Ë!
NULL
) {

2315 
	`TAILQ_REMOVE
(&
hâp
->
sockës
, 
bound
, 
√xt
);

2317 
fd
 = 
bound
->
böd_ev
.
ev_fd
;

2318 
	`evít_dñ
(&
bound
->
böd_ev
);

2319 
	`EVUTIL_CLOSESOCKET
(
fd
);

2321 
	`‰ì
(
bound
);

2324 (
evc⁄
 = 
	`TAILQ_FIRST
(&
hâp
->
c⁄√˘i⁄s
)Ë!
NULL
) {

2326 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

2329 (
hâp_cb
 = 
	`TAILQ_FIRST
(&
hâp
->
ˇŒbacks
)Ë!
NULL
) {

2330 
	`TAILQ_REMOVE
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2331 
	`‰ì
(
hâp_cb
->
wh©
);

2332 
	`‰ì
(
hâp_cb
);

2335 
	`‰ì
(
hâp
);

2336 
	}
}

2339 
	$evhâp_£t_timeout
(
evhâp
* 
hâp
, 
timeout_ö_£cs
)

2341 
hâp
->
timeout
 = 
timeout_ö_£cs
;

2342 
	}
}

2345 
evhâp_£t_cb
(
evhâp
 *
hâp
, c⁄° *
uri
,

2346 (*
cb
)(
evhâp_ªque°
 *, *), *
cb¨g
)

2348 
evhâp_cb
 *
hâp_cb
;

2350 i‡((
hâp_cb
 = 
	`ˇŒoc
(1, (
evhâp_cb
))Ë=
NULL
)

2351 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

2353 
hâp_cb
->
wh©
 = 
	`°rdup
(
uri
);

2354 
hâp_cb
->
cb
 = cb;

2355 
hâp_cb
->
cb¨g
 = cbarg;

2357 
	`TAILQ_INSERT_TAIL
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2358 
	}
}

2361 
	$evhâp_dñ_cb
(
evhâp
 *
hâp
, c⁄° *
uri
)

2363 
evhâp_cb
 *
hâp_cb
;

2365 
	`TAILQ_FOREACH
(
hâp_cb
, &
hâp
->
ˇŒbacks
, 
√xt
) {

2366 i‡(
	`°rcmp
(
hâp_cb
->
wh©
, 
uri
) == 0)

2369 i‡(
hâp_cb
 =
NULL
)

2372 
	`TAILQ_REMOVE
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2373 
	`‰ì
(
hâp_cb
->
wh©
);

2374 
	`‰ì
(
hâp_cb
);

2377 
	}
}

2380 
evhâp_£t_gícb
(
evhâp
 *
hâp
,

2381 (*
cb
)(
evhâp_ªque°
 *, *), *
cb¨g
)

2383 
hâp
->
gícb
 = 
cb
;

2384 
hâp
->
gícb¨g
 = 
cb¨g
;

2385 
	}
}

2391 
evhâp_ªque°
 *

2392 
evhâp_ªque°_√w
((*
cb
)(
evhâp_ªque°
 *, *), *
¨g
)

2394 
evhâp_ªque°
 *
ªq
 = 
NULL
;

2397 i‡((
ªq
 = 
	`ˇŒoc
(1, (
evhâp_ªque°
))Ë=
NULL
) {

2398 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2399 
îr‹
;

2402 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

2403 
ªq
->
öput_hódîs
 = 
	`ˇŒoc
(1, (
evkeyvÆq
));

2404 i‡(
ªq
->
öput_hódîs
 =
NULL
) {

2405 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2406 
îr‹
;

2408 
	`TAILQ_INIT
(
ªq
->
öput_hódîs
);

2410 
ªq
->
ouçut_hódîs
 = 
	`ˇŒoc
(1, (
evkeyvÆq
));

2411 i‡(
ªq
->
ouçut_hódîs
 =
NULL
) {

2412 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2413 
îr‹
;

2415 
	`TAILQ_INIT
(
ªq
->
ouçut_hódîs
);

2417 i‡((
ªq
->
öput_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

2418 
	`evít_w¨n
("%s:Évbuf„r_√w", 
__func__
);

2419 
îr‹
;

2422 i‡((
ªq
->
ouçut_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

2423 
	`evít_w¨n
("%s:Évbuf„r_√w", 
__func__
);

2424 
îr‹
;

2427 
ªq
->
cb
 = cb;

2428 
ªq
->
cb_¨g
 = 
¨g
;

2430  (
ªq
);

2432 
îr‹
:

2433 i‡(
ªq
 !
NULL
)

2434 
	`evhâp_ªque°_‰ì
(
ªq
);

2435  (
NULL
);

2436 
	}
}

2439 
	$evhâp_ªque°_‰ì
(
evhâp_ªque°
 *
ªq
)

2441 i‡(
ªq
->
ªmŸe_ho°
 !
NULL
)

2442 
	`‰ì
(
ªq
->
ªmŸe_ho°
);

2443 i‡(
ªq
->
uri
 !
NULL
)

2444 
	`‰ì
(
ªq
->
uri
);

2445 i‡(
ªq
->
ª•⁄£_code_löe
 !
NULL
)

2446 
	`‰ì
(
ªq
->
ª•⁄£_code_löe
);

2448 
	`evhâp_˛ór_hódîs
(
ªq
->
öput_hódîs
);

2449 
	`‰ì
(
ªq
->
öput_hódîs
);

2451 
	`evhâp_˛ór_hódîs
(
ªq
->
ouçut_hódîs
);

2452 
	`‰ì
(
ªq
->
ouçut_hódîs
);

2454 i‡(
ªq
->
öput_buf„r
 !
NULL
)

2455 
	`evbuf„r_‰ì
(
ªq
->
öput_buf„r
);

2457 i‡(
ªq
->
ouçut_buf„r
 !
NULL
)

2458 
	`evbuf„r_‰ì
(
ªq
->
ouçut_buf„r
);

2460 
	`‰ì
(
ªq
);

2461 
	}
}

2464 
evhâp_ªque°_£t_chunked_cb
(
evhâp_ªque°
 *
ªq
,

2465 (*
cb
)(
evhâp_ªque°
 *, *))

2467 
ªq
->
chunk_cb
 = 
cb
;

2468 
	}
}

2475 
	$evhâp_ªque°_uri
(
evhâp_ªque°
 *
ªq
) {

2476 i‡(
ªq
->
uri
 =
NULL
)

2477 
	`evít_debug
(("%s:Ñeque° %∞ha†nÿuri\n", 
__func__
, 
ªq
));

2478  (
ªq
->
uri
);

2479 
	}
}

2486 
evhâp_c⁄√˘i⁄
*

2487 
	$evhâp_gë_ªque°_c⁄√˘i⁄
(

2488 
evhâp
* 
hâp
,

2489 
fd
, 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
)

2491 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2492 *
ho°«me
 = 
NULL
, *
p‹äame
 = NULL;

2494 
	`«me_‰om_addr
(
ß
, 
ßÀn
, &
ho°«me
, &
p‹äame
);

2495 i‡(
ho°«me
 =
NULL
 || 
p‹äame
 == NULL) {

2496 i‡(
ho°«me
Ë
	`‰ì
(hostname);

2497 i‡(
p‹äame
Ë
	`‰ì
(portname);

2498  (
NULL
);

2501 
	`evít_debug
(("%s:ÇewÑequest from %s:%s on %d\n",

2502 
__func__
, 
ho°«me
, 
p‹äame
, 
fd
));

2505 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
(
ho°«me
, 
	`©oi
(
p‹äame
));

2506 
	`‰ì
(
ho°«me
);

2507 
	`‰ì
(
p‹äame
);

2508 i‡(
evc⁄
 =
NULL
)

2509  (
NULL
);

2512 
	`evhâp_c⁄√˘i⁄_£t_ba£
(
evc⁄
, 
hâp
->
ba£
);

2514 
evc⁄
->
Êags
 |
EVHTTP_CON_INCOMING
;

2515 
evc⁄
->
°©e
 = 
EVCON_READING_FIRSTLINE
;

2517 
evc⁄
->
fd
 = fd;

2519  (
evc⁄
);

2520 
	}
}

2523 
	$evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

2525 
evhâp
 *
hâp
 = 
evc⁄
->
hâp_£rvî
;

2526 
evhâp_ªque°
 *
ªq
;

2527 i‡((
ªq
 = 
	`evhâp_ªque°_√w
(
evhâp_h™dÀ_ªque°
, 
hâp
)Ë=
NULL
)

2530 
ªq
->
evc⁄
 =Évcon;

2531 
ªq
->
Êags
 |
EVHTTP_REQ_OWN_CONNECTION
;

2533 
	`TAILQ_INSERT_TAIL
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

2535 
ªq
->
köd
 = 
EVHTTP_REQUEST
;

2537 i‡((
ªq
->
ªmŸe_ho°
 = 
	`°rdup
(
evc⁄
->
addªss
)Ë=
NULL
)

2538 
	`evít_îr
(1, "%s: sådup", 
__func__
);

2539 
ªq
->
ªmŸe_p‹t
 = 
evc⁄
->
p‹t
;

2541 
	`evhâp_°¨t_ªad
(
evc⁄
);

2544 
	}
}

2547 
	$evhâp_gë_ªque°
(
evhâp
 *
hâp
, 
fd
,

2548 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
)

2550 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2552 
evc⁄
 = 
	`evhâp_gë_ªque°_c⁄√˘i⁄
(
hâp
, 
fd
, 
ß
, 
ßÀn
);

2553 i‡(
evc⁄
 =
NULL
)

2557 i‡(
hâp
->
timeout
 != -1)

2558 
	`evhâp_c⁄√˘i⁄_£t_timeout
(
evc⁄
, 
hâp
->
timeout
);

2564 
evc⁄
->
hâp_£rvî
 = 
hâp
;

2565 
	`TAILQ_INSERT_TAIL
(&
hâp
->
c⁄√˘i⁄s
, 
evc⁄
, 
√xt
);

2567 i‡(
	`evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evc⁄
) == -1)

2568 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

2569 
	}
}

2577 
addröfo
 *

2578 
	$addr_‰om_«me
(*
addªss
)

2580 #ifde‡
HAVE_GETADDRINFO


2581 
addröfo
 
ai
, *
aô›
;

2582 
ai_ªsu…
;

2584 
	`mem£t
(&
ai
, 0, (ai));

2585 
ai
.
ai_Ámûy
 = 
AF_INET
;

2586 
ai
.
ai_sockty≥
 = 
SOCK_RAW
;

2587 
ai
.
ai_Êags
 = 0;

2588 i‡((
ai_ªsu…
 = 
	`gëaddröfo
(
addªss
, 
NULL
, &
ai
, &
aô›
)) != 0) {

2589 i‡–
ai_ªsu…
 =
EAI_SYSTEM
 )

2590 
	`evít_w¨n
("getaddrinfo");

2592 
	`evít_w¨nx
("gëaddröfo: %s", 
	`gai_°ªº‹
(
ai_ªsu…
));

2595  (
aô›
);

2597 
	`as£π
(0);

2598  
NULL
;

2600 
	}
}

2604 
	$«me_‰om_addr
(
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

2605 **
pho°
, **
µ‹t
)

2607 
¡›
[
NI_MAXHOST
];

2608 
°Ω‹t
[
NI_MAXSERV
];

2609 
ni_ªsu…
;

2611 #ifde‡
HAVE_GETNAMEINFO


2612 
ni_ªsu…
 = 
	`gë«meöfo
(
ß
, 
ßÀn
,

2613 
¡›
, “t›), 
°Ω‹t
, (strport),

2614 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

2616 i‡(
ni_ªsu…
 != 0) {

2617 i‡(
ni_ªsu…
 =
EAI_SYSTEM
)

2618 
	`evít_îr
(1, "getnameinfo failed");

2620 
	`evít_îrx
(1, "gë«meöfÿÁûed: %s", 
	`gai_°ªº‹
(
ni_ªsu…
));

2624 
ni_ªsu…
 = 
	`Áke_gë«meöfo
(
ß
, 
ßÀn
,

2625 
¡›
, “t›), 
°Ω‹t
, (strport),

2626 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

2627 i‡(
ni_ªsu…
 != 0)

2630 *
pho°
 = 
	`°rdup
(
¡›
);

2631 *
µ‹t
 = 
	`°rdup
(
°Ω‹t
);

2632 
	}
}

2637 
	$böd_sockë_ai
(
addröfo
 *
ai
, 
ªu£
)

2639 
fd
, 
⁄
 = 1, 
r
;

2640 
£ºno
;

2643 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

2644 i‡(
fd
 == -1) {

2645 
	`evít_w¨n
("socket");

2649 i‡(
	`evutû_make_sockë_n⁄blockög
(
fd
) < 0)

2650 
out
;

2652 #i‚de‡
WIN32


2653 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 1) == -1) {

2654 
	`evít_w¨n
("fcntl(F_SETFD)");

2655 
out
;

2659 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
⁄
, (on));

2660 i‡(
ªu£
) {

2661 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

2662 (*)&
⁄
, (on));

2665 i‡(
ai
 !
NULL
) {

2666 
r
 = 
	`böd
(
fd
, 
ai
->
ai_addr
,ái->
ai_addæí
);

2667 i‡(
r
 == -1)

2668 
out
;

2671  (
fd
);

2673 
out
:

2674 
£ºno
 = 
	`EVUTIL_SOCKET_ERROR
();

2675 
	`EVUTIL_CLOSESOCKET
(
fd
);

2676 
	`EVUTIL_SET_SOCKET_ERROR
(
£ºno
);

2678 
	}
}

2680 
addröfo
 *

2681 
	$make_addröfo
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2683 
addröfo
 *
aô›
 = 
NULL
;

2685 #ifde‡
HAVE_GETADDRINFO


2686 
addröfo
 
ai
;

2687 
°Ω‹t
[
NI_MAXSERV
];

2688 
ai_ªsu…
;

2690 
	`mem£t
(&
ai
, 0, (ai));

2691 
ai
.
ai_Ámûy
 = 
AF_INET
;

2692 
ai
.
ai_sockty≥
 = 
SOCK_STREAM
;

2693 
ai
.
ai_Êags
 = 
AI_PASSIVE
;

2694 
	`evutû_¢¥ötf
(
°Ω‹t
, (°Ω‹t), "%d", 
p‹t
);

2695 i‡((
ai_ªsu…
 = 
	`gëaddröfo
(
addªss
, 
°Ω‹t
, &
ai
, &
aô›
)) != 0) {

2696 i‡–
ai_ªsu…
 =
EAI_SYSTEM
 )

2697 
	`evít_w¨n
("getaddrinfo");

2699 
	`evít_w¨nx
("gëaddröfo: %s", 
	`gai_°ªº‹
(
ai_ªsu…
));

2700  (
NULL
);

2703 
cur
;

2704 
addröfo
 
ai
[2];

2705 i‡(++
cur
 == 2) cur = 0;

2707 i‡(
	`Áke_gëaddröfo
(
addªss
, &
ai
[
cur
]) < 0) {

2708 
	`evít_w¨n
("fake_getaddrinfo");

2709  (
NULL
);

2711 
aô›
 = &
ai
[
cur
];

2712 ((
sockaddr_ö
 *Ë
aô›
->
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

2715  (
aô›
);

2716 
	}
}

2719 
	$böd_sockë
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
, 
ªu£
)

2721 
fd
;

2722 
addröfo
 *
aô›
 = 
NULL
;

2725 i‡(
addªss
 =
NULL
 && 
p‹t
 == 0)

2726  
	`böd_sockë_ai
(
NULL
, 0);

2728 
aô›
 = 
	`make_addröfo
(
addªss
, 
p‹t
);

2730 i‡(
aô›
 =
NULL
)

2733 
fd
 = 
	`böd_sockë_ai
(
aô›
, 
ªu£
);

2735 #ifde‡
HAVE_GETADDRINFO


2736 
	`‰ìaddröfo
(
aô›
);

2738 
	`Áke_‰ìaddröfo
(
aô›
);

2741  (
fd
);

2742 
	}
}

2745 
	$sockë_c⁄√˘
(
fd
, c⁄° *
addªss
, 
p‹t
)

2747 
addröfo
 *
ai
 = 
	`make_addröfo
(
addªss
, 
p‹t
);

2748 
ªs
 = -1;

2750 i‡(
ai
 =
NULL
) {

2751 
	`evít_debug
(("%s: make_addrinfo: \"%s:%d\"",

2752 
__func__
, 
addªss
, 
p‹t
));

2756 i‡(
	`c⁄√˘
(
fd
, 
ai
->
ai_addr
,ái->
ai_addæí
) == -1) {

2757 #ifde‡
WIN32


2758 
tmp_îr‹
 = 
	`WSAGëLa°Eº‹
();

2759 i‡(
tmp_îr‹
 !
WSAEWOULDBLOCK
 &&Åmp_îr‹ !
WSAEINVAL
 &&

2760 
tmp_îr‹
 !
WSAEINPROGRESS
) {

2761 
out
;

2764 i‡(
î∫o
 !
EINPROGRESS
) {

2765 
out
;

2771 
ªs
 = 0;

2773 
out
:

2774 #ifde‡
HAVE_GETADDRINFO


2775 
	`‰ìaddröfo
(
ai
);

2777 
	`Áke_‰ìaddröfo
(
ai
);

2780  (
ªs
);

2781 
	}
}

	@kqueue.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<sys/ty≥s.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_time.h
>

39 
	~<sys/queue.h
>

40 
	~<sys/evít.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 
	~<as£π.h
>

48 #ifde‡
HAVE_INTTYPES_H


49 
	~<öây≥s.h
>

55 #i‡
deföed
(
HAVE_INTTYPES_H
Ë&& !deföed(
__O≥nBSD__
Ë&& !deföed(
__FªeBSD__
Ë&& !deföed(
__d¨wö__
Ë&& !deföed(
__APPLE__
)

56 
	#PTR_TO_UDATA
(
x
Ë((
öçå_t
)(x))

	)

58 
	#PTR_TO_UDATA
(
x
Ë(x)

	)

61 
	~"evít.h
"

62 
	~"evít-öã∫Æ.h
"

63 
	~"log.h
"

64 
	~"evít-öã∫Æ.h
"

66 
	#EVLIST_X_KQINKERNEL
 0x1000

	)

68 
	#NEVENT
 64

	)

70 
	skq›
 {

71 
kevít
 *
	mch™ges
;

72 
	mnch™ges
;

73 
kevít
 *
	mevíts
;

74 
evít_li°
 
	mevsigevíts
[
NSIG
];

75 
	m√víts
;

76 
	mkq
;

77 
pid_t
 
	mpid
;

80 *
kq_öô
 (
evít_ba£
 *);

81 
kq_add
 (*, 
evít
 *);

82 
kq_dñ
 (*, 
evít
 *);

83 
kq_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

84 
kq_ö£π
 (
kq›
 *, 
kevít
 *);

85 
kq_dóŒoc
 (
evít_ba£
 *, *);

87 c⁄° 
evít›
 
	gkq›s
 = {

89 
kq_öô
,

90 
kq_add
,

91 
kq_dñ
,

92 
kq_di•©ch
,

93 
kq_dóŒoc
,

98 
	$kq_öô
(
evít_ba£
 *
ba£
)

100 
i
, 
kq
;

101 
kq›
 *
kqueue›
;

104 i‡(
	`gëív
("EVENT_NOKQUEUE"))

105  (
NULL
);

107 i‡(!(
kqueue›
 = 
	`ˇŒoc
(1, (
kq›
))))

108  (
NULL
);

112 i‡((
kq
 = 
	`kqueue
()) == -1) {

113 
	`evít_w¨n
("kqueue");

114 
	`‰ì
 (
kqueue›
);

115  (
NULL
);

118 
kqueue›
->
kq
 = kq;

120 
kqueue›
->
pid
 = 
	`gëpid
();

123 
kqueue›
->
ch™ges
 = 
	`mÆloc
(
NEVENT
 * (
kevít
));

124 i‡(
kqueue›
->
ch™ges
 =
NULL
) {

125 
	`‰ì
 (
kqueue›
);

126  (
NULL
);

128 
kqueue›
->
evíts
 = 
	`mÆloc
(
NEVENT
 * (
kevít
));

129 i‡(
kqueue›
->
evíts
 =
NULL
) {

130 
	`‰ì
 (
kqueue›
->
ch™ges
);

131 
	`‰ì
 (
kqueue›
);

132  (
NULL
);

134 
kqueue›
->
√víts
 = 
NEVENT
;

137 
i
 = 0; i < 
NSIG
; ++i) {

138 
	`TAILQ_INIT
(&
kqueue›
->
evsigevíts
[
i
]);

142 
kqueue›
->
ch™ges
[0].
idít
 = -1;

143 
kqueue›
->
ch™ges
[0].
fûãr
 = 
EVFILT_READ
;

144 
kqueue›
->
ch™ges
[0].
Êags
 = 
EV_ADD
;

150 i‡(
	`kevít
(
kq
,

151 
kqueue›
->
ch™ges
, 1, kqueue›->
evíts
, 
NEVENT
, 
NULL
) != 1 ||

152 
kqueue›
->
evíts
[0].
idít
 != -1 ||

153 
kqueue›
->
evíts
[0].
Êags
 !
EV_ERROR
) {

154 
	`evít_w¨n
("%s: dëe˘ed brokí kqueue;ÇŸ usög.", 
__func__
);

155 
	`‰ì
(
kqueue›
->
ch™ges
);

156 
	`‰ì
(
kqueue›
->
evíts
);

157 
	`‰ì
(
kqueue›
);

158 
	`˛o£
(
kq
);

159  (
NULL
);

162  (
kqueue›
);

163 
	}
}

166 
	$kq_ö£π
(
kq›
 *kq›, 
kevít
 *
kev
)

168 
√víts
 = 
kq›
->nevents;

170 i‡(
kq›
->
nch™ges
 =
√víts
) {

171 
kevít
 *
√wch™ge
;

172 
kevít
 *
√wªsu…
;

174 
√víts
 *= 2;

176 
√wch™ge
 = 
	`ªÆloc
(
kq›
->
ch™ges
,

177 
√víts
 * (
kevít
));

178 i‡(
√wch™ge
 =
NULL
) {

179 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

182 
kq›
->
ch™ges
 = 
√wch™ge
;

184 
√wªsu…
 = 
	`ªÆloc
(
kq›
->
evíts
,

185 
√víts
 * (
kevít
));

191 i‡(
√wªsu…
 =
NULL
) {

192 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

195 
kq›
->
evíts
 = 
√wªsu…
;

197 
kq›
->
√víts
 =Çevents;

200 
	`mem˝y
(&
kq›
->
ch™ges
[kq›->
nch™ges
++], 
kev
, (
kevít
));

202 
	`evít_debug
(("%s: fd %d %s%s",

203 
__func__
, ()
kev
->
idít
,

204 
kev
->
fûãr
 =
EVFILT_READ
 ? "EVFILT_READ" : "EVFILT_WRITE",

205 
kev
->
Êags
 =
EV_DELETE
 ? " (del)" : ""));

208 
	}
}

211 
	$kq_sigh™dÀr
(
sig
)

214 
	}
}

217 
	$kq_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

219 
kq›
 *kq› = 
¨g
;

220 
kevít
 *
ch™ges
 = 
kq›
->changes;

221 
kevít
 *
evíts
 = 
kq›
->events;

222 
evít
 *
ev
;

223 
time•ec
 
ts
, *
ts_p
 = 
NULL
;

224 
i
, 
ªs
;

226 i‡(
tv
 !
NULL
) {

227 
	`TIMEVAL_TO_TIMESPEC
(
tv
, &
ts
);

228 
ts_p
 = &
ts
;

231 
ªs
 = 
	`kevít
(
kq›
->
kq
, 
ch™ges
, kq›->
nch™ges
,

232 
evíts
, 
kq›
->
√víts
, 
ts_p
);

233 
kq›
->
nch™ges
 = 0;

234 i‡(
ªs
 == -1) {

235 i‡(
î∫o
 !
EINTR
) {

236 
	`evít_w¨n
("kevent");

243 
	`evít_debug
(("%s: kevíàªp‹t†%d", 
__func__
, 
ªs
));

245 
i
 = 0; i < 
ªs
; i++) {

246 
which
 = 0;

248 i‡(
evíts
[
i
].
Êags
 & 
EV_ERROR
) {

261 i‡(
evíts
[
i
].
d©a
 =
EBADF
 ||

262 
evíts
[
i
].
d©a
 =
EINVAL
 ||

263 
evíts
[
i
].
d©a
 =
ENOENT
)

265 
î∫o
 = 
evíts
[
i
].
d©a
;

269 i‡(
evíts
[
i
].
fûãr
 =
EVFILT_READ
) {

270 
which
 |
EV_READ
;

271 } i‡(
evíts
[
i
].
fûãr
 =
EVFILT_WRITE
) {

272 
which
 |
EV_WRITE
;

273 } i‡(
evíts
[
i
].
fûãr
 =
EVFILT_SIGNAL
) {

274 
which
 |
EV_SIGNAL
;

277 i‡(!
which
)

280 i‡(
evíts
[
i
].
fûãr
 =
EVFILT_SIGNAL
) {

281 
evít_li°
 *
hód
 =

282 (
evít_li°
 *)
evíts
[
i
].
ud©a
;

283 
	`TAILQ_FOREACH
(
ev
, 
hód
, 
ev_sig«l_√xt
) {

284 
	`evít_a˘ive
(
ev
, 
which
, 
evíts
[
i
].
d©a
);

287 
ev
 = (
evít
 *)
evíts
[
i
].
ud©a
;

289 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

290 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

292 
	`evít_a˘ive
(
ev
, 
which
, 1);

297 
	}
}

301 
	$kq_add
(*
¨g
, 
evít
 *
ev
)

303 
kq›
 *kq› = 
¨g
;

304 
kevít
 
kev
;

306 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

307 
nsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

309 
	`as£π
(
nsig«l
 >0 &&Çsig«»< 
NSIG
);

310 i‡(
	`TAILQ_EMPTY
(&
kq›
->
evsigevíts
[
nsig«l
])) {

311 
time•ec
 
timeout
 = { 0, 0 };

313 
	`mem£t
(&
kev
, 0, (kev));

314 
kev
.
idít
 = 
nsig«l
;

315 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

316 
kev
.
Êags
 = 
EV_ADD
;

317 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(&
kq›
->
evsigevíts
[
nsig«l
]);

322 i‡(
	`kevít
(
kq›
->
kq
, &
kev
, 1, 
NULL
, 0, &
timeout
) == -1)

325 i‡(
	`_evsig«l_£t_h™dÀr
(
ev
->
ev_ba£
, 
nsig«l
,

326 
kq_sigh™dÀr
) == -1)

330 
	`TAILQ_INSERT_TAIL
(&
kq›
->
evsigevíts
[
nsig«l
], 
ev
,

331 
ev_sig«l_√xt
);

332 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

336 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

337 
	`mem£t
(&
kev
, 0, (kev));

338 
kev
.
idít
 = 
ev
->
ev_fd
;

339 
kev
.
fûãr
 = 
EVFILT_READ
;

340 #ifde‡
NOTE_EOF


342 
kev
.
fÊags
 = 
NOTE_EOF
;

344 
kev
.
Êags
 = 
EV_ADD
;

345 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

346 
kev
.
Êags
 |
EV_ONESHOT
;

347 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(
ev
);

349 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

352 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

355 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

356 
	`mem£t
(&
kev
, 0, (kev));

357 
kev
.
idít
 = 
ev
->
ev_fd
;

358 
kev
.
fûãr
 = 
EVFILT_WRITE
;

359 
kev
.
Êags
 = 
EV_ADD
;

360 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

361 
kev
.
Êags
 |
EV_ONESHOT
;

362 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(
ev
);

364 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

367 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

371 
	}
}

374 
	$kq_dñ
(*
¨g
, 
evít
 *
ev
)

376 
kq›
 *kq› = 
¨g
;

377 
kevít
 
kev
;

379 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_X_KQINKERNEL
))

382 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

383 
nsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

384 
time•ec
 
timeout
 = { 0, 0 };

386 
	`as£π
(
nsig«l
 >0 &&Çsig«»< 
NSIG
);

387 
	`TAILQ_REMOVE
(&
kq›
->
evsigevíts
[
nsig«l
], 
ev
, 
ev_sig«l_√xt
);

388 i‡(
	`TAILQ_EMPTY
(&
kq›
->
evsigevíts
[
nsig«l
])) {

389 
	`mem£t
(&
kev
, 0, (kev));

390 
kev
.
idít
 = 
nsig«l
;

391 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

392 
kev
.
Êags
 = 
EV_DELETE
;

397 i‡(
	`kevít
(
kq›
->
kq
, &
kev
, 1, 
NULL
, 0, &
timeout
) == -1)

400 i‡(
	`_evsig«l_ª°‹e_h™dÀr
(
ev
->
ev_ba£
,

401 
nsig«l
) == -1)

405 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

409 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

410 
	`mem£t
(&
kev
, 0, (kev));

411 
kev
.
idít
 = 
ev
->
ev_fd
;

412 
kev
.
fûãr
 = 
EVFILT_READ
;

413 
kev
.
Êags
 = 
EV_DELETE
;

415 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

418 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

421 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

422 
	`mem£t
(&
kev
, 0, (kev));

423 
kev
.
idít
 = 
ev
->
ev_fd
;

424 
kev
.
fûãr
 = 
EVFILT_WRITE
;

425 
kev
.
Êags
 = 
EV_DELETE
;

427 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

430 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

434 
	}
}

437 
	$kq_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

439 
kq›
 *kq› = 
¨g
;

441 i‡(
kq›
->
ch™ges
)

442 
	`‰ì
(
kq›
->
ch™ges
);

443 i‡(
kq›
->
evíts
)

444 
	`‰ì
(
kq›
->
evíts
);

445 i‡(
kq›
->
kq
 >0 && kq›->
pid
 =
	`gëpid
())

446 
	`˛o£
(
kq›
->
kq
);

447 
	`mem£t
(
kq›
, 0, (kqop));

448 
	`‰ì
(
kq›
);

449 
	}
}

	@log.c

40 #ifde‡
HAVE_CONFIG_H


41 
	~"c⁄fig.h
"

44 #ifde‡
WIN32


45 
	#WIN32_LEAN_AND_MEAN


	)

46 
	~<wödows.h
>

47 #unde‡
WIN32_LEAN_AND_MEAN


49 
	~<sys/ty≥s.h
>

50 #ifde‡
HAVE_SYS_TIME_H


51 
	~<sys/time.h
>

53 
	~<sys/_time.h
>

55 
	~<°dio.h
>

56 
	~<°dlib.h
>

57 
	~<°d¨g.h
>

58 
	~<°rög.h
>

59 
	~<î∫o.h
>

60 
	~"evít.h
"

62 
	~"log.h
"

63 
	~"evutû.h
"

65 
_w¨n_hñ≥r
(
£vîôy
, 
log_î∫o
, c⁄° *
fmt
,

66 
va_li°
 
≠
);

67 
evít_log
(
£vîôy
, c⁄° *
msg
);

70 
	$evít_îr
(
evÆ
, c⁄° *
fmt
, ...)

72 
va_li°
 
≠
;

74 
	`va_°¨t
(
≠
, 
fmt
);

75 
	`_w¨n_hñ≥r
(
_EVENT_LOG_ERR
, 
î∫o
, 
fmt
, 
≠
);

76 
	`va_íd
(
≠
);

77 
	`exô
(
evÆ
);

78 
	}
}

81 
	$evít_w¨n
(c⁄° *
fmt
, ...)

83 
va_li°
 
≠
;

85 
	`va_°¨t
(
≠
, 
fmt
);

86 
	`_w¨n_hñ≥r
(
_EVENT_LOG_WARN
, 
î∫o
, 
fmt
, 
≠
);

87 
	`va_íd
(
≠
);

88 
	}
}

91 
	$evít_îrx
(
evÆ
, c⁄° *
fmt
, ...)

93 
va_li°
 
≠
;

95 
	`va_°¨t
(
≠
, 
fmt
);

96 
	`_w¨n_hñ≥r
(
_EVENT_LOG_ERR
, -1, 
fmt
, 
≠
);

97 
	`va_íd
(
≠
);

98 
	`exô
(
evÆ
);

99 
	}
}

102 
	$evít_w¨nx
(c⁄° *
fmt
, ...)

104 
va_li°
 
≠
;

106 
	`va_°¨t
(
≠
, 
fmt
);

107 
	`_w¨n_hñ≥r
(
_EVENT_LOG_WARN
, -1, 
fmt
, 
≠
);

108 
	`va_íd
(
≠
);

109 
	}
}

112 
	$evít_msgx
(c⁄° *
fmt
, ...)

114 
va_li°
 
≠
;

116 
	`va_°¨t
(
≠
, 
fmt
);

117 
	`_w¨n_hñ≥r
(
_EVENT_LOG_MSG
, -1, 
fmt
, 
≠
);

118 
	`va_íd
(
≠
);

119 
	}
}

122 
	$_evít_debugx
(c⁄° *
fmt
, ...)

124 
va_li°
 
≠
;

126 
	`va_°¨t
(
≠
, 
fmt
);

127 
	`_w¨n_hñ≥r
(
_EVENT_LOG_DEBUG
, -1, 
fmt
, 
≠
);

128 
	`va_íd
(
≠
);

129 
	}
}

132 
	$_w¨n_hñ≥r
(
£vîôy
, 
log_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

134 
buf
[1024];

135 
size_t
 
Àn
;

137 i‡(
fmt
 !
NULL
)

138 
	`evutû_v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

140 
buf
[0] = '\0';

142 i‡(
log_î∫o
 >= 0) {

143 
Àn
 = 
	`°æí
(
buf
);

144 i‡(
Àn
 < (
buf
) - 3) {

145 
	`evutû_¢¥ötf
(
buf
 + 
Àn
, (buf) -Üen, ": %s",

146 
	`°ªº‹
(
log_î∫o
));

150 
	`evít_log
(
£vîôy
, 
buf
);

151 
	}
}

153 
evít_log_cb
 
	glog_‚
 = 
NULL
;

156 
	$evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
)

158 
log_‚
 = 
cb
;

159 
	}
}

162 
	$evít_log
(
£vîôy
, c⁄° *
msg
)

164 i‡(
log_‚
)

165 
	`log_‚
(
£vîôy
, 
msg
);

167 c⁄° *
£vîôy_°r
;

168 
£vîôy
) {

169 
_EVENT_LOG_DEBUG
:

170 
£vîôy_°r
 = "debug";

172 
_EVENT_LOG_MSG
:

173 
£vîôy_°r
 = "msg";

175 
_EVENT_LOG_WARN
:

176 
£vîôy_°r
 = "warn";

178 
_EVENT_LOG_ERR
:

179 
£vîôy_°r
 = "err";

182 
£vîôy_°r
 = "???";

185 ()
	`Ârötf
(
°dîr
, "[%s] %s\n", 
£vîôy_°r
, 
msg
);

187 
	}
}

	@log.h

27 #i‚de‡
_LOG_H_


28 
	#_LOG_H_


	)

30 #ifde‡
__GNUC__


31 
	#EV_CHECK_FMT
(
a
,
b
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,á, b)))

	)

33 
	#EV_CHECK_FMT
(
a
,
b
)

	)

36 
	$evít_îr
(
evÆ
, c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(2,3);

37 
	$evít_w¨n
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

38 
	$evít_îrx
(
evÆ
, c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(2,3);

39 
	$evít_w¨nx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

40 
	$evít_msgx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

41 
	$_evít_debugx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

43 #ifde‡
USE_DEBUG


44 
	#evít_debug
(
x
Ë
_evít_debugx
 
	)
x

46 
	#evít_debug
(
x
Ëdÿ{;
	}
} 0)

	)

49 #unde‡
EV_CHECK_FMT


	@min_heap.h

27 #i‚de‡
_MIN_HEAP_H_


28 
	#_MIN_HEAP_H_


	)

30 
	~"evít.h
"

31 
	~"evutû.h
"

33 
	smö_hóp


35 
evít
** 
	mp
;

36 
	mn
, 
	ma
;

37 } 
	tmö_hóp_t
;

39 
ölöe
 
mö_hóp_˘‹
(
mö_hóp_t
* 
s
);

40 
ölöe
 
mö_hóp_dt‹
(
mö_hóp_t
* 
s
);

41 
ölöe
 
mö_hóp_ñem_öô
(
evít
* 
e
);

42 
ölöe
 
mö_hóp_ñem_gª©î
(
evít
 *
a
, evíà*
b
);

43 
ölöe
 
mö_hóp_em±y
(
mö_hóp_t
* 
s
);

44 
ölöe
 
mö_hóp_size
(
mö_hóp_t
* 
s
);

45 
ölöe
 
evít
* 
mö_hóp_t›
(
mö_hóp_t
* 
s
);

46 
ölöe
 
mö_hóp_ª£rve
(
mö_hóp_t
* 
s
, 
n
);

47 
ölöe
 
mö_hóp_push
(
mö_hóp_t
* 
s
, 
evít
* 
e
);

48 
ölöe
 
evít
* 
mö_hóp_p›
(
mö_hóp_t
* 
s
);

49 
ölöe
 
mö_hóp_îa£
(
mö_hóp_t
* 
s
, 
evít
* 
e
);

50 
ölöe
 
mö_hóp_shi·_up_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
);

51 
ölöe
 
mö_hóp_shi·_down_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
);

53 
	$mö_hóp_ñem_gª©î
(
evít
 *
a
, evíà*
b
)

55  
	`evutû_timîcmp
(&
a
->
ev_timeout
, &
b
->ev_timeout, >);

56 
	}
}

58 
	$mö_hóp_˘‹
(
mö_hóp_t
* 
s
Ë{ s->
p
 = 0; s->
n
 = 0; s->
a
 = 0; 
	}
}

59 
	$mö_hóp_dt‹
(
mö_hóp_t
* 
s
Ë{ 
	`‰ì
(s->
p
); 
	}
}

60 
	$mö_hóp_ñem_öô
(
evít
* 
e
Ë{É->
mö_hóp_idx
 = -1; 
	}
}

61 
	$mö_hóp_em±y
(
mö_hóp_t
* 
s
Ë{  0u =s->
n
; 
	}
}

62 
	$mö_hóp_size
(
mö_hóp_t
* 
s
Ë{  s->
n
; 
	}
}

63 
evít
* 
	$mö_hóp_t›
(
mö_hóp_t
* 
s
Ë{  s->
n
 ? *s->
p
 : 0; 
	}
}

65 
	$mö_hóp_push
(
mö_hóp_t
* 
s
, 
evít
* 
e
)

67 if(
	`mö_hóp_ª£rve
(
s
, s->
n
 + 1))

69 
	`mö_hóp_shi·_up_
(
s
, s->
n
++, 
e
);

71 
	}
}

73 
evít
* 
	$mö_hóp_p›
(
mö_hóp_t
* 
s
)

75 if(
s
->
n
)

77 
evít
* 
e
 = *
s
->
p
;

78 
	`mö_hóp_shi·_down_
(
s
, 0u, s->
p
[--s->
n
]);

79 
e
->
mö_hóp_idx
 = -1;

80  
e
;

83 
	}
}

85 
	$mö_hóp_îa£
(
mö_hóp_t
* 
s
, 
evít
* 
e
)

87 if((()-1Ë!
e
->
mö_hóp_idx
)

89 
	`mö_hóp_shi·_down_
(
s
, 
e
->
mö_hóp_idx
, s->
p
[--s->
n
]);

90 
e
->
mö_hóp_idx
 = -1;

94 
	}
}

96 
	$mö_hóp_ª£rve
(
mö_hóp_t
* 
s
, 
n
)

98 if(
s
->
a
 < 
n
)

100 
evít
** 
p
;

101 
a
 = 
s
->a ? s->a * 2 : 8;

102 if(
a
 < 
n
)

103 
a
 = 
n
;

104 if(!(
p
 = (
evít
**)
	`ªÆloc
(
s
->p, 
a
 *  *p)))

106 
s
->
p
 =Ö;

107 
s
->
a
 =á;

110 
	}
}

112 
	$mö_hóp_shi·_up_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
)

114 
∑ª¡
 = (
hﬁe_ödex
 - 1) / 2;

115 
hﬁe_ödex
 && 
	`mö_hóp_ñem_gª©î
(
s
->
p
[
∑ª¡
], 
e
))

117 (
s
->
p
[
hﬁe_ödex
] = s->p[
∑ª¡
])->
mö_hóp_idx
 = hole_index;

118 
hﬁe_ödex
 = 
∑ª¡
;

119 
∑ª¡
 = (
hﬁe_ödex
 - 1) / 2;

121 (
s
->
p
[
hﬁe_ödex
] = 
e
)->
mö_hóp_idx
 = hole_index;

122 
	}
}

124 
	$mö_hóp_shi·_down_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
)

126 
mö_chûd
 = 2 * (
hﬁe_ödex
 + 1);

127 
mö_chûd
 <
s
->
n
)

129 
mö_chûd
 -mö_chûd =
s
->
n
 || 
	`mö_hóp_ñem_gª©î
(s->
p
[min_child], s->p[min_child - 1]);

130 if(!(
	`mö_hóp_ñem_gª©î
(
e
, 
s
->
p
[
mö_chûd
])))

132 (
s
->
p
[
hﬁe_ödex
] = s->p[
mö_chûd
])->
mö_hóp_idx
 = hole_index;

133 
hﬁe_ödex
 = 
mö_chûd
;

134 
mö_chûd
 = 2 * (
hﬁe_ödex
 + 1);

136 
	`mö_hóp_shi·_up_
(
s
, 
hﬁe_ödex
, 
e
);

137 
	}
}

	@poll.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<sys/ty≥s.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_time.h
>

39 
	~<sys/queue.h
>

40 
	~<pﬁl.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 #ifde‡
CHECK_INVARIANTS


48 
	~<as£π.h
>

51 
	~"evít.h
"

52 
	~"evít-öã∫Æ.h
"

53 
	~"evsig«l.h
"

54 
	~"log.h
"

56 
	spﬁl›
 {

57 
	mevít_cou¡
;

58 
	mnfds
;

59 
	mfd_cou¡
;

60 
pﬁlfd
 *
	mevít_£t
;

61 
evít
 **
	mevít_r_back
;

62 
evít
 **
	mevít_w_back
;

63 *
	midx∂us1_by_fd
;

68 *
pﬁl_öô
 (
evít_ba£
 *);

69 
pﬁl_add
 (*, 
evít
 *);

70 
pﬁl_dñ
 (*, 
evít
 *);

71 
pﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

72 
pﬁl_dóŒoc
 (
evít_ba£
 *, *);

74 c⁄° 
evít›
 
	gpﬁl›s
 = {

76 
pﬁl_öô
,

77 
pﬁl_add
,

78 
pﬁl_dñ
,

79 
pﬁl_di•©ch
,

80 
pﬁl_dóŒoc
,

85 
	$pﬁl_öô
(
evít_ba£
 *
ba£
)

87 
pﬁl›
 *pollop;

90 i‡(
	`gëív
("EVENT_NOPOLL"))

91  (
NULL
);

93 i‡(!(
pﬁl›
 = 
	`ˇŒoc
(1, (pollop))))

94  (
NULL
);

96 
	`evsig«l_öô
(
ba£
);

98  (
pﬁl›
);

99 
	}
}

101 #ifde‡
CHECK_INVARIANTS


103 
	$pﬁl_check_ok
(
pﬁl›
 *
p›
)

105 
i
, 
idx
;

106 
evít
 *
ev
;

108 
i
 = 0; i < 
p›
->
fd_cou¡
; ++i) {

109 
idx
 = 
p›
->
idx∂us1_by_fd
[
i
]-1;

110 i‡(
idx
 < 0)

112 
	`as£π
(
p›
->
evít_£t
[
idx
].
fd
 =
i
);

113 i‡(
p›
->
evít_£t
[
idx
].
evíts
 & 
POLLIN
) {

114 
ev
 = 
p›
->
evít_r_back
[
idx
];

115 
	`as£π
(
ev
);

116 
	`as£π
(
ev
->
ev_evíts
 & 
EV_READ
);

117 
	`as£π
(
ev
->
ev_fd
 =
i
);

119 i‡(
p›
->
evít_£t
[
idx
].
evíts
 & 
POLLOUT
) {

120 
ev
 = 
p›
->
evít_w_back
[
idx
];

121 
	`as£π
(
ev
);

122 
	`as£π
(
ev
->
ev_evíts
 & 
EV_WRITE
);

123 
	`as£π
(
ev
->
ev_fd
 =
i
);

126 
i
 = 0; i < 
p›
->
nfds
; ++i) {

127 
pﬁlfd
 *
pfd
 = &
p›
->
evít_£t
[
i
];

128 
	`as£π
(
p›
->
idx∂us1_by_fd
[
pfd
->
fd
] =
i
+1);

130 
	}
}

132 
	#pﬁl_check_ok
(
p›
)

	)

136 
	$pﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

138 
ªs
, 
i
, 
m£c
 = -1, 
nfds
;

139 
pﬁl›
 *
p›
 = 
¨g
;

141 
	`pﬁl_check_ok
(
p›
);

143 i‡(
tv
 !
NULL
)

144 
m£c
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

146 
nfds
 = 
p›
->nfds;

147 
ªs
 = 
	`pﬁl
(
p›
->
evít_£t
, 
nfds
, 
m£c
);

149 i‡(
ªs
 == -1) {

150 i‡(
î∫o
 !
EINTR
) {

151 
	`evít_w¨n
("poll");

155 
	`evsig«l_¥o˚ss
(
ba£
);

157 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

158 
	`evsig«l_¥o˚ss
(
ba£
);

161 
	`evít_debug
(("%s:Öﬁ»ªp‹t†%d", 
__func__
, 
ªs
));

163 i‡(
ªs
 == 0)

166 
i
 = 0; i < 
nfds
; i++) {

167 
wh©
 = 
p›
->
evít_£t
[
i
].
ªvíts
;

168 
evít
 *
r_ev
 = 
NULL
, *
w_ev
 = NULL;

169 i‡(!
wh©
)

172 
ªs
 = 0;

175 i‡(
wh©
 & (
POLLHUP
|
POLLERR
))

176 
wh©
 |
POLLIN
|
POLLOUT
;

177 i‡(
wh©
 & 
POLLIN
) {

178 
ªs
 |
EV_READ
;

179 
r_ev
 = 
p›
->
evít_r_back
[
i
];

181 i‡(
wh©
 & 
POLLOUT
) {

182 
ªs
 |
EV_WRITE
;

183 
w_ev
 = 
p›
->
evít_w_back
[
i
];

185 i‡(
ªs
 == 0)

188 i‡(
r_ev
 && (
ªs
 &Ñ_ev->
ev_evíts
)) {

189 
	`evít_a˘ive
(
r_ev
, 
ªs
 &Ñ_ev->
ev_evíts
, 1);

191 i‡(
w_ev
 && w_ev !
r_ev
 && (
ªs
 & w_ev->
ev_evíts
)) {

192 
	`evít_a˘ive
(
w_ev
, 
ªs
 & w_ev->
ev_evíts
, 1);

197 
	}
}

200 
	$pﬁl_add
(*
¨g
, 
evít
 *
ev
)

202 
pﬁl›
 *
p›
 = 
¨g
;

203 
pﬁlfd
 *
pfd
 = 
NULL
;

204 
i
;

206 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

207  (
	`evsig«l_add
(
ev
));

208 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

211 
	`pﬁl_check_ok
(
p›
);

212 i‡(
p›
->
nfds
 + 1 >p›->
evít_cou¡
) {

213 
pﬁlfd
 *
tmp_evít_£t
;

214 
evít
 **
tmp_evít_r_back
;

215 
evít
 **
tmp_evít_w_back
;

216 
tmp_evít_cou¡
;

218 i‡(
p›
->
evít_cou¡
 < 32)

219 
tmp_evít_cou¡
 = 32;

221 
tmp_evít_cou¡
 = 
p›
->
evít_cou¡
 * 2;

224 
tmp_evít_£t
 = 
	`ªÆloc
(
p›
->
evít_£t
,

225 
tmp_evít_cou¡
 * (
pﬁlfd
));

226 i‡(
tmp_evít_£t
 =
NULL
) {

227 
	`evít_w¨n
("realloc");

230 
p›
->
evít_£t
 = 
tmp_evít_£t
;

232 
tmp_evít_r_back
 = 
	`ªÆloc
(
p›
->
evít_r_back
,

233 
tmp_evít_cou¡
 * (
evít
 *));

234 i‡(
tmp_evít_r_back
 =
NULL
) {

236 
	`evít_w¨n
("realloc");

239 
p›
->
evít_r_back
 = 
tmp_evít_r_back
;

241 
tmp_evít_w_back
 = 
	`ªÆloc
(
p›
->
evít_w_back
,

242 
tmp_evít_cou¡
 * (
evít
 *));

243 i‡(
tmp_evít_w_back
 =
NULL
) {

246 
	`evít_w¨n
("realloc");

249 
p›
->
evít_w_back
 = 
tmp_evít_w_back
;

251 
p›
->
evít_cou¡
 = 
tmp_evít_cou¡
;

253 i‡(
ev
->
ev_fd
 >
p›
->
fd_cou¡
) {

254 *
tmp_idx∂us1_by_fd
;

255 
√w_cou¡
;

256 i‡(
p›
->
fd_cou¡
 < 32)

257 
√w_cou¡
 = 32;

259 
√w_cou¡
 = 
p›
->
fd_cou¡
 * 2;

260 
√w_cou¡
 <
ev
->
ev_fd
)

261 
√w_cou¡
 *= 2;

262 
tmp_idx∂us1_by_fd
 =

263 
	`ªÆloc
(
p›
->
idx∂us1_by_fd
, 
√w_cou¡
 * ());

264 i‡(
tmp_idx∂us1_by_fd
 =
NULL
) {

265 
	`evít_w¨n
("realloc");

268 
p›
->
idx∂us1_by_fd
 = 
tmp_idx∂us1_by_fd
;

269 
	`mem£t
(
p›
->
idx∂us1_by_fd
 +Ö›->
fd_cou¡
,

270 0, ()*(
√w_cou¡
 - 
p›
->
fd_cou¡
));

271 
p›
->
fd_cou¡
 = 
√w_cou¡
;

274 
i
 = 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] - 1;

275 i‡(
i
 >= 0) {

276 
pfd
 = &
p›
->
evít_£t
[
i
];

278 
i
 = 
p›
->
nfds
++;

279 
pfd
 = &
p›
->
evít_£t
[
i
];

280 
pfd
->
evíts
 = 0;

281 
pfd
->
fd
 = 
ev
->
ev_fd
;

282 
p›
->
evít_w_back
[
i
] =Ö›->
evít_r_back
[i] = 
NULL
;

283 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] = 
i
 + 1;

286 
pfd
->
ªvíts
 = 0;

287 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

288 
pfd
->
evíts
 |
POLLOUT
;

289 
p›
->
evít_w_back
[
i
] = 
ev
;

291 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

292 
pfd
->
evíts
 |
POLLIN
;

293 
p›
->
evít_r_back
[
i
] = 
ev
;

295 
	`pﬁl_check_ok
(
p›
);

298 
	}
}

305 
	$pﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

307 
pﬁl›
 *
p›
 = 
¨g
;

308 
pﬁlfd
 *
pfd
 = 
NULL
;

309 
i
;

311 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

312  (
	`evsig«l_dñ
(
ev
));

314 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

317 
	`pﬁl_check_ok
(
p›
);

318 
i
 = 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] - 1;

319 i‡(
i
 < 0)

323 
pfd
 = &
p›
->
evít_£t
[
i
];

324 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

325 
pfd
->
evíts
 &~
POLLIN
;

326 
p›
->
evít_r_back
[
i
] = 
NULL
;

328 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

329 
pfd
->
evíts
 &~
POLLOUT
;

330 
p›
->
evít_w_back
[
i
] = 
NULL
;

332 
	`pﬁl_check_ok
(
p›
);

333 i‡(
pfd
->
evíts
)

338 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] = 0;

340 --
p›
->
nfds
;

341 i‡(
i
 !
p›
->
nfds
) {

346 
	`mem˝y
(&
p›
->
evít_£t
[
i
], &p›->evít_£t[p›->
nfds
],

347 (
pﬁlfd
));

348 
p›
->
evít_r_back
[
i
] =Ö›->evít_r_back[p›->
nfds
];

349 
p›
->
evít_w_back
[
i
] =Ö›->evít_w_back[p›->
nfds
];

350 
p›
->
idx∂us1_by_fd
[p›->
evít_£t
[
i
].
fd
] = i + 1;

353 
	`pﬁl_check_ok
(
p›
);

355 
	}
}

358 
	$pﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

360 
pﬁl›
 *
p›
 = 
¨g
;

362 
	`evsig«l_dóŒoc
(
ba£
);

363 i‡(
p›
->
evít_£t
)

364 
	`‰ì
(
p›
->
evít_£t
);

365 i‡(
p›
->
evít_r_back
)

366 
	`‰ì
(
p›
->
evít_r_back
);

367 i‡(
p›
->
evít_w_back
)

368 
	`‰ì
(
p›
->
evít_w_back
);

369 i‡(
p›
->
idx∂us1_by_fd
)

370 
	`‰ì
(
p›
->
idx∂us1_by_fd
);

372 
	`mem£t
(
p›
, 0, (
pﬁl›
));

373 
	`‰ì
(
p›
);

374 
	}
}

	@sample/event-test.c

6 #ifde‡
HAVE_CONFIG_H


7 
	~"c⁄fig.h
"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/°©.h
>

12 #i‚de‡
WIN32


13 
	~<sys/queue.h
>

14 
	~<uni°d.h
>

15 
	~<sys/time.h
>

17 
	~<wödows.h
>

19 
	~<f˙é.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

25 
	~<evít.h
>

28 
	$fifo_ªad
(
fd
, 
evít
, *
¨g
)

30 
buf
[255];

31 
Àn
;

32 
evít
 *
ev
 = 
¨g
;

33 #ifde‡
WIN32


34 
DWORD
 
dwByãsRód
;

38 
	`evít_add
(
ev
, 
NULL
);

40 
	`Ârötf
(
°dîr
, "fifo_read called with fd: %d,Évent: %d,árg: %p\n",

41 
fd
, 
evít
, 
¨g
);

42 #ifde‡
WIN32


43 
Àn
 = 
	`RódFûe
((
HANDLE
)
fd
, 
buf
, (bufË- 1, &
dwByãsRód
, 
NULL
);

46 if(
Àn
 && 
dwByãsRód
 == 0) {

47 
	`Ârötf
(
°dîr
, "End Of File");

48 
	`evít_dñ
(
ev
);

52 
buf
[
dwByãsRód
] = '\0';

54 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf) - 1);

56 i‡(
Àn
 == -1) {

57 
	`≥º‹
("read");

59 } i‡(
Àn
 == 0) {

60 
	`Ârötf
(
°dîr
, "Connection closed\n");

64 
buf
[
Àn
] = '\0';

66 
	`Ârötf
(
°dout
, "Ród: %s\n", 
buf
);

67 
	}
}

70 
	$maö
 (
¨gc
, **
¨gv
)

72 
evít
 
evfifo
;

73 #ifde‡
WIN32


74 
HANDLE
 
sockë
;

76 
sockë
 = 
	`Cª©eFûe
("test.txt",

77 
GENERIC_READ
,

79 
NULL
,

80 
OPEN_EXISTING
,

81 
FILE_ATTRIBUTE_NORMAL
,

82 
NULL
);

84 if(
sockë
 =
INVALID_HANDLE_VALUE
)

88 
°©
 
°
;

89 c⁄° *
fifo
 = "event.fifo";

90 
sockë
;

92 i‡(
	`l°©
 (
fifo
, &
°
) == 0) {

93 i‡((
°
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
) {

94 
î∫o
 = 
EEXIST
;

95 
	`≥º‹
("lstat");

96 
	`exô
 (1);

100 
	`u∆ök
 (
fifo
);

101 i‡(
	`mkfifo
 (
fifo
, 0600) == -1) {

102 
	`≥º‹
("mkfifo");

103 
	`exô
 (1);

107 #ifde‡
__löux


108 
sockë
 = 
	`›í
 (
fifo
, 
O_RDWR
 | 
O_NONBLOCK
, 0);

110 
sockë
 = 
	`›í
 (
fifo
, 
O_RDONLY
 | 
O_NONBLOCK
, 0);

113 i‡(
sockë
 == -1) {

114 
	`≥º‹
("open");

115 
	`exô
 (1);

118 
	`Ârötf
(
°dîr
, "Wrôêd©®tÿ%s\n", 
fifo
);

121 
	`evít_öô
();

124 #ifde‡
WIN32


125 
	`evít_£t
(&
evfifo
, ()
sockë
, 
EV_READ
, 
fifo_ªad
, &evfifo);

127 
	`evít_£t
(&
evfifo
, 
sockë
, 
EV_READ
, 
fifo_ªad
, &evfifo);

131 
	`evít_add
(&
evfifo
, 
NULL
);

133 
	`evít_di•©ch
();

134 #ifde‡
WIN32


135 
	`Clo£H™dÀ
(
sockë
);

138 
	}
}

	@sample/signal-test.c

6 
	~<sys/ty≥s.h
>

8 #ifde‡
HAVE_CONFIG_H


9 
	~"c⁄fig.h
"

12 
	~<sys/°©.h
>

13 #i‚de‡
WIN32


14 
	~<sys/queue.h
>

15 
	~<uni°d.h
>

16 
	~<sys/time.h
>

18 
	~<wödows.h
>

20 
	~<sig«l.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

27 
	~<evít.h
>

29 
	gˇŒed
 = 0;

32 
	$sig«l_cb
(
fd
, 
evít
, *
¨g
)

34 
evít
 *
sig«l
 = 
¨g
;

36 
	`¥ötf
("%s: gŸ sig«»%d\n", 
__func__
, 
	`EVENT_SIGNAL
(
sig«l
));

38 i‡(
ˇŒed
 >= 2)

39 
	`evít_dñ
(
sig«l
);

41 
ˇŒed
++;

42 
	}
}

45 
	$maö
 (
¨gc
, **
¨gv
)

47 
evít
 
sig«l_öt
;

50 
	`evít_öô
();

53 
	`evít_£t
(&
sig«l_öt
, 
SIGINT
, 
EV_SIGNAL
|
EV_PERSIST
, 
sig«l_cb
,

54 &
sig«l_öt
);

56 
	`evít_add
(&
sig«l_öt
, 
NULL
);

58 
	`evít_di•©ch
();

61 
	}
}

	@sample/time-test.c

6 
	~<sys/ty≥s.h
>

8 #ifde‡
HAVE_CONFIG_H


9 
	~"c⁄fig.h
"

12 
	~<sys/°©.h
>

13 #i‚de‡
WIN32


14 
	~<sys/queue.h
>

15 
	~<uni°d.h
>

17 
	~<time.h
>

18 #ifde‡
HAVE_SYS_TIME_H


19 
	~<sys/time.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

27 
	~<evít.h
>

28 
	~<evutû.h
>

30 
	gœ°time
;

33 
	$timeout_cb
(
fd
, 
evít
, *
¨g
)

35 
timevÆ
 
tv
;

36 
evít
 *
timeout
 = 
¨g
;

37 
√wtime
 = 
	`time
(
NULL
);

39 
	`¥ötf
("%s: cÆÀdáà%d: %d\n", 
__func__
, 
√wtime
,

40 
√wtime
 - 
œ°time
);

41 
œ°time
 = 
√wtime
;

43 
	`evutû_timî˛ór
(&
tv
);

44 
tv
.
tv_£c
 = 2;

45 
	`evít_add
(
timeout
, &
tv
);

46 
	}
}

49 
	$maö
 (
¨gc
, **
¨gv
)

51 
evít
 
timeout
;

52 
timevÆ
 
tv
;

55 
	`evít_öô
();

58 
	`evtimî_£t
(&
timeout
, 
timeout_cb
, &timeout);

60 
	`evutû_timî˛ór
(&
tv
);

61 
tv
.
tv_£c
 = 2;

62 
	`evít_add
(&
timeout
, &
tv
);

64 
œ°time
 = 
	`time
(
NULL
);

66 
	`evít_di•©ch
();

69 
	}
}

	@select.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<sys/ty≥s.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_time.h
>

39 #ifde‡
HAVE_SYS_SELECT_H


40 
	~<sys/£À˘.h
>

42 
	~<sys/queue.h
>

43 
	~<sig«l.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 #ifde‡
CHECK_INVARIANTS


50 
	~<as£π.h
>

53 
	~"evít.h
"

54 
	~"evít-öã∫Æ.h
"

55 
	~"evsig«l.h
"

56 
	~"log.h
"

58 #i‚de‡
howm™y


59 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

62 
	s£À˘›
 {

63 
	mevít_fds
;

64 
	mevít_fdsz
;

65 
fd_£t
 *
	mevít_ªad£t_ö
;

66 
fd_£t
 *
	mevít_wrôe£t_ö
;

67 
fd_£t
 *
	mevít_ªad£t_out
;

68 
fd_£t
 *
	mevít_wrôe£t_out
;

69 
evít
 **
	mevít_r_by_fd
;

70 
evít
 **
	mevít_w_by_fd
;

73 *
£À˘_öô
 (
evít_ba£
 *);

74 
£À˘_add
 (*, 
evít
 *);

75 
£À˘_dñ
 (*, 
evít
 *);

76 
£À˘_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

77 
£À˘_dóŒoc
 (
evít_ba£
 *, *);

79 c⁄° 
evít›
 
	g£À˘›s
 = {

81 
£À˘_öô
,

82 
£À˘_add
,

83 
£À˘_dñ
,

84 
£À˘_di•©ch
,

85 
£À˘_dóŒoc
,

89 
£À˘_ªsize
(
£À˘›
 *
s›
, 
fdsz
);

92 
	$£À˘_öô
(
evít_ba£
 *
ba£
)

94 
£À˘›
 *
s›
;

97 i‡(
	`gëív
("EVENT_NOSELECT"))

98  (
NULL
);

100 i‡(!(
s›
 = 
	`ˇŒoc
(1, (
£À˘›
))))

101  (
NULL
);

103 
	`£À˘_ªsize
(
s›
, 
	`howm™y
(32 + 1, 
NFDBITS
)*(
fd_mask
));

105 
	`evsig«l_öô
(
ba£
);

107  (
s›
);

108 
	}
}

110 #ifde‡
CHECK_INVARIANTS


112 
	$check_£À˘›
(
£À˘›
 *
s›
)

114 
i
;

115 
i
 = 0; i <
s›
->
evít_fds
; ++i) {

116 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_ªad£t_ö
)) {

117 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]);

118 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]->
ev_evíts
 & 
EV_READ
);

119 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]->
ev_fd
 == i);

121 
	`as£π
(! 
s›
->
evít_r_by_fd
[
i
]);

123 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_wrôe£t_ö
)) {

124 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]);

125 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]->
ev_evíts
 & 
EV_WRITE
);

126 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]->
ev_fd
 == i);

128 
	`as£π
(! 
s›
->
evít_w_by_fd
[
i
]);

132 
	}
}

134 
	#check_£À˘›
(
s›
Ëdÿ{ (Ës›; } 0)

	)

138 
	$£À˘_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

140 
ªs
, 
i
;

141 
£À˘›
 *
s›
 = 
¨g
;

143 
	`check_£À˘›
(
s›
);

145 
	`mem˝y
(
s›
->
evít_ªad£t_out
, s›->
evít_ªad£t_ö
,

146 
s›
->
evít_fdsz
);

147 
	`mem˝y
(
s›
->
evít_wrôe£t_out
, s›->
evít_wrôe£t_ö
,

148 
s›
->
evít_fdsz
);

150 
ªs
 = 
	`£À˘
(
s›
->
evít_fds
 + 1, s›->
evít_ªad£t_out
,

151 
s›
->
evít_wrôe£t_out
, 
NULL
, 
tv
);

153 
	`check_£À˘›
(
s›
);

155 i‡(
ªs
 == -1) {

156 i‡(
î∫o
 !
EINTR
) {

157 
	`evít_w¨n
("select");

161 
	`evsig«l_¥o˚ss
(
ba£
);

163 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

164 
	`evsig«l_¥o˚ss
(
ba£
);

167 
	`evít_debug
(("%s: sñe˘Ñï‹t†%d", 
__func__
, 
ªs
));

169 
	`check_£À˘›
(
s›
);

170 
i
 = 0; i <
s›
->
evít_fds
; ++i) {

171 
evít
 *
r_ev
 = 
NULL
, *
w_ev
 = NULL;

172 
ªs
 = 0;

173 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_ªad£t_out
)) {

174 
r_ev
 = 
s›
->
evít_r_by_fd
[
i
];

175 
ªs
 |
EV_READ
;

177 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_wrôe£t_out
)) {

178 
w_ev
 = 
s›
->
evít_w_by_fd
[
i
];

179 
ªs
 |
EV_WRITE
;

181 i‡(
r_ev
 && (
ªs
 &Ñ_ev->
ev_evíts
)) {

182 
	`evít_a˘ive
(
r_ev
, 
ªs
 &Ñ_ev->
ev_evíts
, 1);

184 i‡(
w_ev
 && w_ev !
r_ev
 && (
ªs
 & w_ev->
ev_evíts
)) {

185 
	`evít_a˘ive
(
w_ev
, 
ªs
 & w_ev->
ev_evíts
, 1);

188 
	`check_£À˘›
(
s›
);

191 
	}
}

195 
	$£À˘_ªsize
(
£À˘›
 *
s›
, 
fdsz
)

197 
n_evíts
, 
n_evíts_ﬁd
;

199 
fd_£t
 *
ªad£t_ö
 = 
NULL
;

200 
fd_£t
 *
wrôe£t_ö
 = 
NULL
;

201 
fd_£t
 *
ªad£t_out
 = 
NULL
;

202 
fd_£t
 *
wrôe£t_out
 = 
NULL
;

203 
evít
 **
r_by_fd
 = 
NULL
;

204 
evít
 **
w_by_fd
 = 
NULL
;

206 
n_evíts
 = (
fdsz
/(
fd_mask
)Ë* 
NFDBITS
;

207 
n_evíts_ﬁd
 = (
s›
->
evít_fdsz
/(
fd_mask
)Ë* 
NFDBITS
;

209 i‡(
s›
->
evít_ªad£t_ö
)

210 
	`check_£À˘›
(
s›
);

212 i‡((
ªad£t_ö
 = 
	`ªÆloc
(
s›
->
evít_ªad£t_ö
, 
fdsz
)Ë=
NULL
)

213 
îr‹
;

214 
s›
->
evít_ªad£t_ö
 = 
ªad£t_ö
;

215 i‡((
ªad£t_out
 = 
	`ªÆloc
(
s›
->
evít_ªad£t_out
, 
fdsz
)Ë=
NULL
)

216 
îr‹
;

217 
s›
->
evít_ªad£t_out
 = 
ªad£t_out
;

218 i‡((
wrôe£t_ö
 = 
	`ªÆloc
(
s›
->
evít_wrôe£t_ö
, 
fdsz
)Ë=
NULL
)

219 
îr‹
;

220 
s›
->
evít_wrôe£t_ö
 = 
wrôe£t_ö
;

221 i‡((
wrôe£t_out
 = 
	`ªÆloc
(
s›
->
evít_wrôe£t_out
, 
fdsz
)Ë=
NULL
)

222 
îr‹
;

223 
s›
->
evít_wrôe£t_out
 = 
wrôe£t_out
;

224 i‡((
r_by_fd
 = 
	`ªÆloc
(
s›
->
evít_r_by_fd
,

225 
n_evíts
*(
evít
*))Ë=
NULL
)

226 
îr‹
;

227 
s›
->
evít_r_by_fd
 = 
r_by_fd
;

228 i‡((
w_by_fd
 = 
	`ªÆloc
(
s›
->
evít_w_by_fd
,

229 
n_evíts
 * (
evít
*))Ë=
NULL
)

230 
îr‹
;

231 
s›
->
evít_w_by_fd
 = 
w_by_fd
;

233 
	`mem£t
((*)
s›
->
evít_ªad£t_ö
 + s›->
evít_fdsz
, 0,

234 
fdsz
 - 
s›
->
evít_fdsz
);

235 
	`mem£t
((*)
s›
->
evít_wrôe£t_ö
 + s›->
evít_fdsz
, 0,

236 
fdsz
 - 
s›
->
evít_fdsz
);

237 
	`mem£t
(
s›
->
evít_r_by_fd
 + 
n_evíts_ﬁd
, 0,

238 (
n_evíts
-
n_evíts_ﬁd
Ë* (
evít
*));

239 
	`mem£t
(
s›
->
evít_w_by_fd
 + 
n_evíts_ﬁd
, 0,

240 (
n_evíts
-
n_evíts_ﬁd
Ë* (
evít
*));

242 
s›
->
evít_fdsz
 = 
fdsz
;

243 
	`check_£À˘›
(
s›
);

247 
îr‹
:

248 
	`evít_w¨n
("malloc");

250 
	}
}

254 
	$£À˘_add
(*
¨g
, 
evít
 *
ev
)

256 
£À˘›
 *
s›
 = 
¨g
;

258 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

259  (
	`evsig«l_add
(
ev
));

261 
	`check_£À˘›
(
s›
);

266 i‡(
s›
->
evít_fds
 < 
ev
->
ev_fd
) {

267 
fdsz
 = 
s›
->
evít_fdsz
;

269 i‡(
fdsz
 < (
fd_mask
))

270 
fdsz
 = (
fd_mask
);

272 
fdsz
 <

273 (
	`howm™y
(
ev
->
ev_fd
 + 1, 
NFDBITS
Ë* (
fd_mask
)))

274 
fdsz
 *= 2;

276 i‡(
fdsz
 !
s›
->
evít_fdsz
) {

277 i‡(
	`£À˘_ªsize
(
s›
, 
fdsz
)) {

278 
	`check_£À˘›
(
s›
);

283 
s›
->
evít_fds
 = 
ev
->
ev_fd
;

286 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

287 
	`FD_SET
(
ev
->
ev_fd
, 
s›
->
evít_ªad£t_ö
);

288 
s›
->
evít_r_by_fd
[
ev
->
ev_fd
] =Év;

290 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

291 
	`FD_SET
(
ev
->
ev_fd
, 
s›
->
evít_wrôe£t_ö
);

292 
s›
->
evít_w_by_fd
[
ev
->
ev_fd
] =Év;

294 
	`check_£À˘›
(
s›
);

297 
	}
}

304 
	$£À˘_dñ
(*
¨g
, 
evít
 *
ev
)

306 
£À˘›
 *
s›
 = 
¨g
;

308 
	`check_£À˘›
(
s›
);

309 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

310  (
	`evsig«l_dñ
(
ev
));

312 i‡(
s›
->
evít_fds
 < 
ev
->
ev_fd
) {

313 
	`check_£À˘›
(
s›
);

317 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

318 
	`FD_CLR
(
ev
->
ev_fd
, 
s›
->
evít_ªad£t_ö
);

319 
s›
->
evít_r_by_fd
[
ev
->
ev_fd
] = 
NULL
;

322 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

323 
	`FD_CLR
(
ev
->
ev_fd
, 
s›
->
evít_wrôe£t_ö
);

324 
s›
->
evít_w_by_fd
[
ev
->
ev_fd
] = 
NULL
;

327 
	`check_£À˘›
(
s›
);

329 
	}
}

332 
	$£À˘_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

334 
£À˘›
 *
s›
 = 
¨g
;

336 
	`evsig«l_dóŒoc
(
ba£
);

337 i‡(
s›
->
evít_ªad£t_ö
)

338 
	`‰ì
(
s›
->
evít_ªad£t_ö
);

339 i‡(
s›
->
evít_wrôe£t_ö
)

340 
	`‰ì
(
s›
->
evít_wrôe£t_ö
);

341 i‡(
s›
->
evít_ªad£t_out
)

342 
	`‰ì
(
s›
->
evít_ªad£t_out
);

343 i‡(
s›
->
evít_wrôe£t_out
)

344 
	`‰ì
(
s›
->
evít_wrôe£t_out
);

345 i‡(
s›
->
evít_r_by_fd
)

346 
	`‰ì
(
s›
->
evít_r_by_fd
);

347 i‡(
s›
->
evít_w_by_fd
)

348 
	`‰ì
(
s›
->
evít_w_by_fd
);

350 
	`mem£t
(
s›
, 0, (
£À˘›
));

351 
	`‰ì
(
s›
);

352 
	}
}

	@signal.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 #ifde‡
WIN32


34 
	#WIN32_LEAN_AND_MEAN


	)

35 
	~<wösock2.h
>

36 
	~<wödows.h
>

37 #unde‡
WIN32_LEAN_AND_MEAN


39 
	~<sys/ty≥s.h
>

40 #ifde‡
HAVE_SYS_TIME_H


41 
	~<sys/time.h
>

43 
	~<sys/queue.h
>

44 #ifde‡
HAVE_SYS_SOCKET_H


45 
	~<sys/sockë.h
>

47 
	~<sig«l.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°rög.h
>

51 #ifde‡
HAVE_UNISTD_H


52 
	~<uni°d.h
>

54 
	~<î∫o.h
>

55 #ifde‡
HAVE_FCNTL_H


56 
	~<f˙é.h
>

58 
	~<as£π.h
>

60 
	~"evít.h
"

61 
	~"evít-öã∫Æ.h
"

62 
	~"evsig«l.h
"

63 
	~"evutû.h
"

64 
	~"log.h
"

66 
evít_ba£
 *
	gevsig«l_ba£
 = 
NULL
;

68 
evsig«l_h™dÀr
(
sig
);

72 
	$evsig«l_cb
(
fd
, 
wh©
, *
¨g
)

74 
sig«ls
[100];

75 #ifde‡
WIN32


76 
SSIZE_T
 
n
;

78 
ssize_t
 
n
;

81 
n
 = 
	`ªcv
(
fd
, 
sig«ls
, (signals), 0);

82 i‡(
n
 == -1)

83 
	`evít_îr
(1, "%s:Ñód", 
__func__
);

84 
	}
}

86 #ifde‡
HAVE_SETFD


87 
	#FD_CLOSEONEXEC
(
x
) do { \

88 i‡(
	`f˙é
(
x
, 
F_SETFD
, 1) == -1) \

89 
	`evít_w¨n
("f˙é(%d, F_SETFD)", 
x
); \

90 } 0)

	)

92 
	#FD_CLOSEONEXEC
(
x
)

	)

96 
	$evsig«l_öô
(
evít_ba£
 *
ba£
)

98 
i
;

105 i‡(
	`evutû_sockë∑ú
(

106 
AF_UNIX
, 
SOCK_STREAM
, 0, 
ba£
->
sig
.
ev_sig«l_∑ú
) == -1)

107 
	`evít_îr
(1, "%s: sockë∑ú", 
__func__
);

109 
	`FD_CLOSEONEXEC
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

110 
	`FD_CLOSEONEXEC
(
ba£
->
sig
.
ev_sig«l_∑ú
[1]);

111 
ba£
->
sig
.
sh_ﬁd
 = 
NULL
;

112 
ba£
->
sig
.
sh_ﬁd_max
 = 0;

113 
ba£
->
sig
.
evsig«l_ˇught
 = 0;

114 
	`mem£t
(&
ba£
->
sig
.
evsigˇught
, 0, (
sig_©omic_t
)*
NSIG
);

116 
i
 = 0; i < 
NSIG
; ++i)

117 
	`TAILQ_INIT
(&
ba£
->
sig
.
evsigevíts
[
i
]);

119 
	`evutû_make_sockë_n⁄blockög
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

121 
	`evít_£t
(&
ba£
->
sig
.
ev_sig«l
, ba£->sig.
ev_sig«l_∑ú
[1],

122 
EV_READ
 | 
EV_PERSIST
, 
evsig«l_cb
, &
ba£
->
sig
.
ev_sig«l
);

123 
ba£
->
sig
.
ev_sig«l
.
ev_ba£
 = base;

124 
ba£
->
sig
.
ev_sig«l
.
ev_Êags
 |
EVLIST_INTERNAL
;

125 
	}
}

130 
_evsig«l_£t_h™dÀr
(
evít_ba£
 *
ba£
,

131 
evsig«l
, (*
h™dÀr
)())

133 #ifde‡
HAVE_SIGACTION


134 
siga˘i⁄
 
ß
;

136 
ev_sigh™dÀr_t
 
sh
;

138 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

139 *
p
;

145 i‡(
evsig«l
 >
sig
->
sh_ﬁd_max
) {

146 
√w_max
 = 
evsig«l
 + 1;

147 
	`evít_debug
(("%s:Évsignal (%d) >= sh_old_max (%d),Ñesizing",

148 
__func__
, 
evsig«l
, 
sig
->
sh_ﬁd_max
));

149 
p
 = 
	`ªÆloc
(
sig
->
sh_ﬁd
, 
√w_max
 * (*sig->sh_old));

150 i‡(
p
 =
NULL
) {

151 
	`evít_w¨n
("realloc");

155 
	`mem£t
((*)
p
 + 
sig
->
sh_ﬁd_max
 * (*sig->
sh_ﬁd
),

156 0, (
√w_max
 - 
sig
->
sh_ﬁd_max
Ë* (*sig->
sh_ﬁd
));

158 
sig
->
sh_ﬁd_max
 = 
√w_max
;

159 
sig
->
sh_ﬁd
 = 
p
;

163 
sig
->
sh_ﬁd
[
evsig«l
] = 
	`mÆloc
( *sig->sh_old[evsignal]);

164 i‡(
sig
->
sh_ﬁd
[
evsig«l
] =
NULL
) {

165 
	`evít_w¨n
("malloc");

170 #ifde‡
HAVE_SIGACTION


171 
	`mem£t
(&
ß
, 0, (sa));

172 
ß
.
ß_h™dÀr
 = 
h™dÀr
;

173 
ß
.
ß_Êags
 |
SA_RESTART
;

174 
	`sigfûl£t
(&
ß
.
ß_mask
);

176 i‡(
	`siga˘i⁄
(
evsig«l
, &
ß
, 
sig
->
sh_ﬁd
[evsignal]) == -1) {

177 
	`evít_w¨n
("sigaction");

178 
	`‰ì
(
sig
->
sh_ﬁd
[
evsig«l
]);

182 i‡((
sh
 = 
	`sig«l
(
evsig«l
, 
h™dÀr
)Ë=
SIG_ERR
) {

183 
	`evít_w¨n
("signal");

184 
	`‰ì
(
sig
->
sh_ﬁd
[
evsig«l
]);

187 *
sig
->
sh_ﬁd
[
evsig«l
] = 
sh
;

191 
	}
}

194 
	$evsig«l_add
(
evít
 *
ev
)

196 
evsig«l
;

197 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

198 
evsig«l_öfo
 *
sig
 = &
ev
->
ev_ba£
->sig;

200 i‡(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
))

201 
	`evít_îrx
(1, "%s: EV_SIGNAL incom∑tibÀ u£", 
__func__
);

202 
evsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

203 
	`as£π
(
evsig«l
 >0 &&Évsig«»< 
NSIG
);

204 i‡(
	`TAILQ_EMPTY
(&
sig
->
evsigevíts
[
evsig«l
])) {

205 
	`evít_debug
(("%s: %p: ch™gög sig«»h™dÀr", 
__func__
, 
ev
));

206 i‡(
	`_evsig«l_£t_h™dÀr
(

207 
ba£
, 
evsig«l
, 
evsig«l_h™dÀr
) == -1)

211 
evsig«l_ba£
 = 
ba£
;

213 i‡(!
sig
->
ev_sig«l_added
) {

214 i‡(
	`evít_add
(&
sig
->
ev_sig«l
, 
NULL
))

216 
sig
->
ev_sig«l_added
 = 1;

221 
	`TAILQ_INSERT_TAIL
(&
sig
->
evsigevíts
[
evsig«l
], 
ev
, 
ev_sig«l_√xt
);

224 
	}
}

227 
	$_evsig«l_ª°‹e_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
)

229 
ªt
 = 0;

230 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

231 #ifde‡
HAVE_SIGACTION


232 
siga˘i⁄
 *
sh
;

234 
ev_sigh™dÀr_t
 *
sh
;

238 
sh
 = 
sig
->
sh_ﬁd
[
evsig«l
];

239 
sig
->
sh_ﬁd
[
evsig«l
] = 
NULL
;

240 #ifde‡
HAVE_SIGACTION


241 i‡(
	`siga˘i⁄
(
evsig«l
, 
sh
, 
NULL
) == -1) {

242 
	`evít_w¨n
("sigaction");

243 
ªt
 = -1;

246 i‡(
	`sig«l
(
evsig«l
, *
sh
Ë=
SIG_ERR
) {

247 
	`evít_w¨n
("signal");

248 
ªt
 = -1;

251 
	`‰ì
(
sh
);

253  
ªt
;

254 
	}
}

257 
	$evsig«l_dñ
(
evít
 *
ev
)

259 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

260 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

261 
evsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

263 
	`as£π
(
evsig«l
 >0 &&Évsig«»< 
NSIG
);

266 
	`TAILQ_REMOVE
(&
sig
->
evsigevíts
[
evsig«l
], 
ev
, 
ev_sig«l_√xt
);

268 i‡(!
	`TAILQ_EMPTY
(&
sig
->
evsigevíts
[
evsig«l
]))

271 
	`evít_debug
(("%s: %p:Ñe°‹ög sig«»h™dÀr", 
__func__
, 
ev
));

273  (
	`_evsig«l_ª°‹e_h™dÀr
(
ev
->
ev_ba£
, 
	`EVENT_SIGNAL
(ev)));

274 
	}
}

277 
	$evsig«l_h™dÀr
(
sig
)

279 
ßve_î∫o
 = 
î∫o
;

281 i‡(
evsig«l_ba£
 =
NULL
) {

282 
	`evít_w¨n
(

284 
__func__
, 
sig
);

288 
evsig«l_ba£
->
sig
.
evsigˇught
[sig]++;

289 
evsig«l_ba£
->
sig
.
evsig«l_ˇught
 = 1;

291 #i‚de‡
HAVE_SIGACTION


292 
	`sig«l
(
sig
, 
evsig«l_h™dÀr
);

296 
	`£nd
(
evsig«l_ba£
->
sig
.
ev_sig«l_∑ú
[0], "a", 1, 0);

297 
î∫o
 = 
ßve_î∫o
;

298 
	}
}

301 
	$evsig«l_¥o˚ss
(
evít_ba£
 *
ba£
)

303 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

304 
evít
 *
ev
, *
√xt_ev
;

305 
sig_©omic_t
 
nˇŒs
;

306 
i
;

308 
ba£
->
sig
.
evsig«l_ˇught
 = 0;

309 
i
 = 1; i < 
NSIG
; ++i) {

310 
nˇŒs
 = 
sig
->
evsigˇught
[
i
];

311 i‡(
nˇŒs
 == 0)

314 
ev
 = 
	`TAILQ_FIRST
(&
sig
->
evsigevíts
[
i
]);

315 
ev
 !
NULL
;Év = 
√xt_ev
) {

316 
√xt_ev
 = 
	`TAILQ_NEXT
(
ev
, 
ev_sig«l_√xt
);

317 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

318 
	`evít_dñ
(
ev
);

319 
	`evít_a˘ive
(
ev
, 
EV_SIGNAL
, 
nˇŒs
);

322 
sig
->
evsigˇught
[
i
] = 0;

324 
	}
}

327 
	$evsig«l_dóŒoc
(
evít_ba£
 *
ba£
)

329 
i
 = 0;

330 i‡(
ba£
->
sig
.
ev_sig«l_added
) {

331 
	`evít_dñ
(&
ba£
->
sig
.
ev_sig«l
);

332 
ba£
->
sig
.
ev_sig«l_added
 = 0;

334 
i
 = 0; i < 
NSIG
; ++i) {

335 i‡(
i
 < 
ba£
->
sig
.
sh_ﬁd_max
 && ba£->sig.
sh_ﬁd
[i] !
NULL
)

336 
	`_evsig«l_ª°‹e_h™dÀr
(
ba£
, 
i
);

339 
	`EVUTIL_CLOSESOCKET
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

340 
ba£
->
sig
.
ev_sig«l_∑ú
[0] = -1;

341 
	`EVUTIL_CLOSESOCKET
(
ba£
->
sig
.
ev_sig«l_∑ú
[1]);

342 
ba£
->
sig
.
ev_sig«l_∑ú
[1] = -1;

343 
ba£
->
sig
.
sh_ﬁd_max
 = 0;

346 
	`‰ì
(
ba£
->
sig
.
sh_ﬁd
);

347 
	}
}

	@strlcpy-internal.h

1 #i‚de‡
_STRLCPY_INTERNAL_H_


2 
	#_STRLCPY_INTERNAL_H_


	)

4 #ifde‡
__˝lu•lus


8 #ifde‡
HAVE_CONFIG_H


9 
	~"c⁄fig.h
"

12 #i‚de‡
HAVE_STRLCPY


13 
	~<°rög.h
>

14 
size_t
 
_evít_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

15 
	#°æ˝y
 
_evít_°æ˝y


	)

18 #ifde‡
__˝lu•lus


	@strlcpy.c

30 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

31 *
	grcsid
 = "$OpenBSD: strlcpy.c,v 1.5 2001/05/13 15:40:16 deraadt Exp $";

34 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_CONFIG_H


37 
	~"c⁄fig.h
"

40 #i‚de‡
HAVE_STRLCPY


41 
	~"°æ˝y-öã∫Æ.h
"

48 
size_t


49 
	$_evít_°æ˝y
(
d°
, 
§c
, 
siz
)

50 *
d°
;

51 c⁄° *
§c
;

52 
size_t
 
siz
;

54 *
d
 = 
d°
;

55 c⁄° *
s
 = 
§c
;

56 
size_t
 
n
 = 
siz
;

59 i‡(
n
 != 0 && --n != 0) {

61 i‡((*
d
++ = *
s
++) == 0)

63 } --
n
 != 0);

67 i‡(
n
 == 0) {

68 i‡(
siz
 != 0)

69 *
d
 = '\0';

70 *
s
++)

74 (
s
 - 
§c
 - 1);

75 
	}
}

	@test/bench.c

36 #ifde‡
HAVE_CONFIG_H


37 
	~"c⁄fig.h
"

40 
	~<sys/ty≥s.h
>

41 
	~<sys/°©.h
>

42 
	~<sys/time.h
>

43 #ifde‡
WIN32


44 
	~<wödows.h
>

46 
	~<sys/sockë.h
>

47 
	~<sys/sig«l.h
>

48 
	~<sys/ªsour˚.h
>

50 
	~<f˙é.h
>

51 
	~<°dlib.h
>

52 
	~<°dio.h
>

53 
	~<°rög.h
>

54 
	~<uni°d.h
>

55 
	~<î∫o.h
>

57 
	~<evít.h
>

58 
	~<evutû.h
>

61 
	gcou¡
, 
	gwrôes
, 
	gfúed
;

62 *
	gpùes
;

63 
	gnum_pùes
, 
	gnum_a˘ive
, 
	gnum_wrôes
;

64 
evít
 *
	gevíts
;

69 
	$ªad_cb
(
fd
, 
which
, *
¨g
)

71 
idx
 = (Ë
¨g
, 
widx
 = idx + 1;

72 
u_ch¨
 
ch
;

74 
cou¡
 +
	`ªad
(
fd
, &
ch
, (ch));

75 i‡(
wrôes
) {

76 i‡(
widx
 >
num_pùes
)

77 
widx
 -
num_pùes
;

78 
	`wrôe
(
pùes
[2 * 
widx
 + 1], "e", 1);

79 
wrôes
--;

80 
fúed
++;

82 
	}
}

84 
timevÆ
 *

85 
	$run_⁄˚
()

87 *
˝
, 
i
, 
•a˚
;

88 
timevÆ
 
ts
, 
ã
;

90 
˝
 = 
pùes
, 
i
 = 0; i < 
num_pùes
; i++, cp += 2) {

91 
	`evít_dñ
(&
evíts
[
i
]);

92 
	`evít_£t
(&
evíts
[
i
], 
˝
[0], 
EV_READ
 | 
EV_PERSIST
, 
ªad_cb
, (*) i);

93 
	`evít_add
(&
evíts
[
i
], 
NULL
);

96 
	`evít_lo›
(
EVLOOP_ONCE
 | 
EVLOOP_NONBLOCK
);

98 
fúed
 = 0;

99 
•a˚
 = 
num_pùes
 / 
num_a˘ive
;

100 
•a˚
 = space * 2;

101 
i
 = 0; i < 
num_a˘ive
; i++, 
fúed
++)

102 
	`wrôe
(
pùes
[
i
 * 
•a˚
 + 1], "e", 1);

104 
cou¡
 = 0;

105 
wrôes
 = 
num_wrôes
;

106 { 
xcou¡
 = 0;

107 
	`gëtimeofday
(&
ts
, 
NULL
);

109 
	`evít_lo›
(
EVLOOP_ONCE
 | 
EVLOOP_NONBLOCK
);

110 
xcou¡
++;

111 } 
cou¡
 !
fúed
);

112 
	`gëtimeofday
(&
ã
, 
NULL
);

114 i‡(
xcou¡
 !
cou¡
Ë
	`Ârötf
(
°dîr
, "Xcount: %d, Rcount: %d\n", xcount, count);

117 
	`evutû_timîsub
(&
ã
, &
ts
, &te);

119  (&
ã
);

120 
	}
}

123 
	$maö
 (
¨gc
, **
¨gv
)

125 #i‚de‡
WIN32


126 
æimô
 
æ
;

128 
i
, 
c
;

129 
timevÆ
 *
tv
;

130 *
˝
;

132 
num_pùes
 = 100;

133 
num_a˘ive
 = 1;

134 
num_wrôes
 = 
num_pùes
;

135 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "n:a:w:")) != -1) {

136 
c
) {

138 
num_pùes
 = 
	`©oi
(
›èrg
);

141 
num_a˘ive
 = 
	`©oi
(
›èrg
);

144 
num_wrôes
 = 
	`©oi
(
›èrg
);

147 
	`Ârötf
(
°dîr
, "IŒegÆárgumíà\"%c\"\n", 
c
);

148 
	`exô
(1);

152 #i‚de‡
WIN32


153 
æ
.
æim_cur
 =Ñl.
æim_max
 = 
num_pùes
 * 2 + 50;

154 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æ
) == -1) {

155 
	`≥º‹
("setrlimit");

156 
	`exô
(1);

160 
evíts
 = 
	`ˇŒoc
(
num_pùes
, (
evít
));

161 
pùes
 = 
	`ˇŒoc
(
num_pùes
 * 2, ());

162 i‡(
evíts
 =
NULL
 || 
pùes
 == NULL) {

163 
	`≥º‹
("malloc");

164 
	`exô
(1);

167 
	`evít_öô
();

169 
˝
 = 
pùes
, 
i
 = 0; i < 
num_pùes
; i++, cp += 2) {

170 #ifde‡
USE_PIPES


171 i‡(
	`pùe
(
˝
) == -1) {

173 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
˝
) == -1) {

175 
	`≥º‹
("pipe");

176 
	`exô
(1);

180 
i
 = 0; i < 25; i++) {

181 
tv
 = 
	`run_⁄˚
();

182 i‡(
tv
 =
NULL
)

183 
	`exô
(1);

184 
	`Ârötf
(
°dout
, "%ld\n",

185 
tv
->
tv_£c
 * 1000000L +Åv->
tv_u£c
);

188 
	`exô
(0);

189 
	}
}

	@test/regress.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sys/waô.h
>

46 
	~<sys/sig«l.h
>

47 
	~<uni°d.h
>

48 
	~<√tdb.h
>

50 
	~<as£π.h
>

51 
	~<f˙é.h
>

52 
	~<sig«l.h
>

53 
	~<°dlib.h
>

54 
	~<°dio.h
>

55 
	~<°rög.h
>

56 
	~<î∫o.h
>

58 
	~"evít.h
"

59 
	~"evutû.h
"

60 
	~"evít-öã∫Æ.h
"

61 
	~"log.h
"

63 
	~"ªgªss.h
"

64 #i‚de‡
WIN32


65 
	~"ªgªss.gí.h
"

68 
	g∑ú
[2];

69 
	gã°_ok
;

70 
	gˇŒed
;

71 
	gwbuf
[4096];

72 
	grbuf
[4096];

73 
	gwoff
;

74 
	groff
;

75 
	gu£≥rsi°
;

76 
timevÆ
 
	gt£t
;

77 
timevÆ
 
	gtˇŒed
;

78 
evít_ba£
 *
	gglobÆ_ba£
;

80 
	#TEST1
 "thi†i†®ã°"

	)

81 
	#SECONDS
 1

	)

83 #i‚de‡
SHUT_WR


84 
	#SHUT_WR
 1

	)

87 #ifde‡
WIN32


88 
	#wrôe
(
fd
,
buf
,
Àn
Ë
	`£nd
((fd),(buf),÷í),0)

	)

89 
	#ªad
(
fd
,
buf
,
Àn
Ë
	`ªcv
((fd),(buf),÷í),0)

	)

93 
	$sim∂e_ªad_cb
(
fd
, 
evít
, *
¨g
)

95 
buf
[256];

96 
Àn
;

98 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

100 i‡(
Àn
) {

101 i‡(!
ˇŒed
) {

102 i‡(
	`evít_add
(
¨g
, 
NULL
) == -1)

103 
	`exô
(1);

105 } i‡(
ˇŒed
 == 1)

106 
ã°_ok
 = 1;

108 
ˇŒed
++;

109 
	}
}

112 
	$sim∂e_wrôe_cb
(
fd
, 
evít
, *
¨g
)

114 
Àn
;

116 
Àn
 = 
	`wrôe
(
fd
, 
TEST1
, 
	`°æí
(TEST1) + 1);

117 i‡(
Àn
 == -1)

118 
ã°_ok
 = 0;

120 
ã°_ok
 = 1;

121 
	}
}

124 
	$mu…ùÀ_wrôe_cb
(
fd
, 
evít
, *
¨g
)

126 
evít
 *
ev
 = 
¨g
;

127 
Àn
;

129 
Àn
 = 128;

130 i‡(
woff
 + 
Àn
 >(
wbuf
))

131 
Àn
 = (
wbuf
Ë- 
woff
;

133 
Àn
 = 
	`wrôe
(
fd
, 
wbuf
 + 
woff
,Üen);

134 i‡(
Àn
 == -1) {

135 
	`Ârötf
(
°dîr
, "%s: wrôe\n", 
__func__
);

136 i‡(
u£≥rsi°
)

137 
	`evít_dñ
(
ev
);

141 
woff
 +
Àn
;

143 i‡(
woff
 >(
wbuf
)) {

144 
	`shutdown
(
fd
, 
SHUT_WR
);

145 i‡(
u£≥rsi°
)

146 
	`evít_dñ
(
ev
);

150 i‡(!
u£≥rsi°
) {

151 i‡(
	`evít_add
(
ev
, 
NULL
) == -1)

152 
	`exô
(1);

154 
	}
}

157 
	$mu…ùÀ_ªad_cb
(
fd
, 
evít
, *
¨g
)

159 
evít
 *
ev
 = 
¨g
;

160 
Àn
;

162 
Àn
 = 
	`ªad
(
fd
, 
rbuf
 + 
roff
, (rbuf) -Ñoff);

163 i‡(
Àn
 == -1)

164 
	`Ârötf
(
°dîr
, "%s:Ñód\n", 
__func__
);

165 i‡(
Àn
 <= 0) {

166 i‡(
u£≥rsi°
)

167 
	`evít_dñ
(
ev
);

171 
roff
 +
Àn
;

172 i‡(!
u£≥rsi°
) {

173 i‡(
	`evít_add
(
ev
, 
NULL
) == -1)

174 
	`exô
(1);

176 
	}
}

179 
	$timeout_cb
(
fd
, 
evít
, *
¨g
)

181 
timevÆ
 
tv
;

182 
diff
;

184 
	`evutû_gëtimeofday
(&
tˇŒed
, 
NULL
);

185 i‡(
	`evutû_timîcmp
(&
tˇŒed
, &
t£t
, >))

186 
	`evutû_timîsub
(&
tˇŒed
, &
t£t
, &
tv
);

188 
	`evutû_timîsub
(&
t£t
, &
tˇŒed
, &
tv
);

190 
diff
 = 
tv
.
tv_£c
*1000 +Åv.
tv_u£c
/1000 - 
SECONDS
 * 1000;

191 i‡(
diff
 < 0)

192 
diff
 = -diff;

194 i‡(
diff
 < 100)

195 
ã°_ok
 = 1;

196 
	}
}

199 
	$sig«l_cb_ß
(
sig
)

201 
ã°_ok
 = 2;

202 
	}
}

205 
	$sig«l_cb
(
fd
, 
evít
, *
¨g
)

207 
evít
 *
ev
 = 
¨g
;

209 
	`sig«l_dñ
(
ev
);

210 
ã°_ok
 = 1;

211 
	}
}

213 
	sbŸh
 {

214 
evít
 
	mev
;

215 
	mƒód
;

219 
	$comböed_ªad_cb
(
fd
, 
evít
, *
¨g
)

221 
bŸh
 *bŸh = 
¨g
;

222 
buf
[128];

223 
Àn
;

225 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

226 i‡(
Àn
 == -1)

227 
	`Ârötf
(
°dîr
, "%s:Ñód\n", 
__func__
);

228 i‡(
Àn
 <= 0)

231 
bŸh
->
ƒód
 +
Àn
;

232 i‡(
	`evít_add
(&
bŸh
->
ev
, 
NULL
) == -1)

233 
	`exô
(1);

234 
	}
}

237 
	$comböed_wrôe_cb
(
fd
, 
evít
, *
¨g
)

239 
bŸh
 *bŸh = 
¨g
;

240 
buf
[128];

241 
Àn
;

243 
Àn
 = (
buf
);

244 i‡(
Àn
 > 
bŸh
->
ƒód
)

245 
Àn
 = 
bŸh
->
ƒód
;

247 
Àn
 = 
	`wrôe
(
fd
, 
buf
,Üen);

248 i‡(
Àn
 == -1)

249 
	`Ârötf
(
°dîr
, "%s: wrôe\n", 
__func__
);

250 i‡(
Àn
 <= 0) {

251 
	`shutdown
(
fd
, 
SHUT_WR
);

255 
bŸh
->
ƒód
 -
Àn
;

256 i‡(
	`evít_add
(&
bŸh
->
ev
, 
NULL
) == -1)

257 
	`exô
(1);

258 
	}
}

263 
	$£tup_ã°
(c⁄° *
«me
)

266 
	`Ârötf
(
°dout
, "%s", 
«me
);

268 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1) {

269 
	`Ârötf
(
°dîr
, "%s: sockë∑ú\n", 
__func__
);

270 
	`exô
(1);

273 #ifde‡
HAVE_FCNTL


274 i‡(
	`f˙é
(
∑ú
[0], 
F_SETFL
, 
O_NONBLOCK
) == -1)

275 
	`Ârötf
(
°dîr
, "fcntl(O_NONBLOCK)");

277 i‡(
	`f˙é
(
∑ú
[1], 
F_SETFL
, 
O_NONBLOCK
) == -1)

278 
	`Ârötf
(
°dîr
, "fcntl(O_NONBLOCK)");

281 
ã°_ok
 = 0;

282 
ˇŒed
 = 0;

284 
	}
}

287 
	$˛ónup_ã°
()

289 #i‚de‡
WIN32


290 
	`˛o£
(
∑ú
[0]);

291 
	`˛o£
(
∑ú
[1]);

293 
	`Clo£H™dÀ
((
HANDLE
)
∑ú
[0]);

294 
	`Clo£H™dÀ
((
HANDLE
)
∑ú
[1]);

296 i‡(
ã°_ok
)

297 
	`Ârötf
(
°dout
, "OK\n");

299 
	`Ârötf
(
°dout
, "FAILED\n");

300 
	`exô
(1);

302 
ã°_ok
 = 0;

304 
	}
}

307 
	$ã°_sim∂îód
()

309 
evít
 
ev
;

312 
	`£tup_ã°
("SimpleÑead: ");

314 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

315 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

317 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev);

318 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

319 
	`exô
(1);

320 
	`evít_di•©ch
();

322 
	`˛ónup_ã°
();

323 
	}
}

326 
	$ã°_sim∂ewrôe
()

328 
evít
 
ev
;

331 
	`£tup_ã°
("Simple write: ");

333 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
, 
sim∂e_wrôe_cb
, &ev);

334 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

335 
	`exô
(1);

336 
	`evít_di•©ch
();

338 
	`˛ónup_ã°
();

339 
	}
}

342 
	$ã°_mu…ùÀ
()

344 
evít
 
ev
, 
ev2
;

345 
i
;

348 
	`£tup_ã°
("MultipleÑead/write: ");

349 
	`mem£t
(
rbuf
, 0, (rbuf));

350 
i
 = 0; i < (
wbuf
); i++)

351 
wbuf
[
i
] = i;

353 
roff
 = 
woff
 = 0;

354 
u£≥rsi°
 = 0;

356 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
, 
mu…ùÀ_wrôe_cb
, &ev);

357 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

358 
	`exô
(1);

359 
	`evít_£t
(&
ev2
, 
∑ú
[1], 
EV_READ
, 
mu…ùÀ_ªad_cb
, &ev2);

360 i‡(
	`evít_add
(&
ev2
, 
NULL
) == -1)

361 
	`exô
(1);

362 
	`evít_di•©ch
();

364 i‡(
roff
 =
woff
)

365 
ã°_ok
 = 
	`memcmp
(
rbuf
, 
wbuf
, (wbuf)) == 0;

367 
	`˛ónup_ã°
();

368 
	}
}

371 
	$ã°_≥rsi°ít
()

373 
evít
 
ev
, 
ev2
;

374 
i
;

377 
	`£tup_ã°
("PersistÑead/write: ");

378 
	`mem£t
(
rbuf
, 0, (rbuf));

379 
i
 = 0; i < (
wbuf
); i++)

380 
wbuf
[
i
] = i;

382 
roff
 = 
woff
 = 0;

383 
u£≥rsi°
 = 1;

385 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
|
EV_PERSIST
, 
mu…ùÀ_wrôe_cb
, &ev);

386 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

387 
	`exô
(1);

388 
	`evít_£t
(&
ev2
, 
∑ú
[1], 
EV_READ
|
EV_PERSIST
, 
mu…ùÀ_ªad_cb
, &ev2);

389 i‡(
	`evít_add
(&
ev2
, 
NULL
) == -1)

390 
	`exô
(1);

391 
	`evít_di•©ch
();

393 i‡(
roff
 =
woff
)

394 
ã°_ok
 = 
	`memcmp
(
rbuf
, 
wbuf
, (wbuf)) == 0;

396 
	`˛ónup_ã°
();

397 
	}
}

400 
	$ã°_comböed
()

402 
bŸh
 
r1
, 
r2
, 
w1
, 
w2
;

404 
	`£tup_ã°
("CombinedÑead/write: ");

405 
	`mem£t
(&
r1
, 0, (r1));

406 
	`mem£t
(&
r2
, 0, (r2));

407 
	`mem£t
(&
w1
, 0, (w1));

408 
	`mem£t
(&
w2
, 0, (w2));

410 
w1
.
ƒód
 = 4096;

411 
w2
.
ƒód
 = 8192;

413 
	`evít_£t
(&
r1
.
ev
, 
∑ú
[0], 
EV_READ
, 
comböed_ªad_cb
, &r1);

414 
	`evít_£t
(&
w1
.
ev
, 
∑ú
[0], 
EV_WRITE
, 
comböed_wrôe_cb
, &w1);

415 
	`evít_£t
(&
r2
.
ev
, 
∑ú
[1], 
EV_READ
, 
comböed_ªad_cb
, &r2);

416 
	`evít_£t
(&
w2
.
ev
, 
∑ú
[1], 
EV_WRITE
, 
comböed_wrôe_cb
, &w2);

417 i‡(
	`evít_add
(&
r1
.
ev
, 
NULL
) == -1)

418 
	`exô
(1);

419 i‡(
	`evít_add
(&
w1
.
ev
, 
NULL
))

420 
	`exô
(1);

421 i‡(
	`evít_add
(&
r2
.
ev
, 
NULL
))

422 
	`exô
(1);

423 i‡(
	`evít_add
(&
w2
.
ev
, 
NULL
))

424 
	`exô
(1);

426 
	`evít_di•©ch
();

428 i‡(
r1
.
ƒód
 =8192 && 
r2
.nread == 4096)

429 
ã°_ok
 = 1;

431 
	`˛ónup_ã°
();

432 
	}
}

435 
	$ã°_sim∂ëimeout
()

437 
timevÆ
 
tv
;

438 
evít
 
ev
;

440 
	`£tup_ã°
("SimpleÅimeout: ");

442 
tv
.
tv_u£c
 = 0;

443 
tv
.
tv_£c
 = 
SECONDS
;

444 
	`evtimî_£t
(&
ev
, 
timeout_cb
, 
NULL
);

445 
	`evtimî_add
(&
ev
, &
tv
);

447 
	`evutû_gëtimeofday
(&
t£t
, 
NULL
);

448 
	`evít_di•©ch
();

450 
	`˛ónup_ã°
();

451 
	}
}

453 #i‚de‡
WIN32


454 
evít_ba£
 *
cuºít_ba£
;

457 
	$chûd_sig«l_cb
(
fd
, 
evít
, *
¨g
)

459 
timevÆ
 
tv
;

460 *
pöt
 = 
¨g
;

462 *
pöt
 = 1;

464 
tv
.
tv_u£c
 = 500000;

465 
tv
.
tv_£c
 = 0;

466 
	`evít_lo›exô
(&
tv
);

467 
	}
}

470 
	$ã°_f‹k
()

472 
°©us
, 
gŸ_sigchld
 = 0;

473 
evít
 
ev
, 
sig_ev
;

474 
pid_t
 
pid
;

476 
	`£tup_ã°
("After fork: ");

478 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

480 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev);

481 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

482 
	`exô
(1);

484 
	`sig«l_£t
(&
sig_ev
, 
SIGCHLD
, 
chûd_sig«l_cb
, &
gŸ_sigchld
);

485 
	`sig«l_add
(&
sig_ev
, 
NULL
);

487 i‡((
pid
 = 
	`f‹k
()) == 0) {

489 i‡(
	`evít_ªöô
(
cuºít_ba£
) == -1) {

490 
	`Ârötf
(
°dîr
, "FAILED (reinit)\n");

491 
	`exô
(1);

494 
	`sig«l_dñ
(&
sig_ev
);

496 
ˇŒed
 = 0;

498 
	`evít_di•©ch
();

503 
	`exô
(
ã°_ok
 !0 || 
ˇŒed
 != 2 ? -2 : 76);

507 
	`¶ìp
(1);

509 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

511 i‡(
	`waôpid
(
pid
, &
°©us
, 0) == -1) {

512 
	`Ârötf
(
°dîr
, "FAILED (fork)\n");

513 
	`exô
(1);

516 i‡(
	`WEXITSTATUS
(
°©us
) != 76) {

517 
	`Ârötf
(
°dîr
, "FAILED (exô): %d\n", 
	`WEXITSTATUS
(
°©us
));

518 
	`exô
(1);

522 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

523 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

525 
	`evít_di•©ch
();

527 i‡(!
gŸ_sigchld
) {

528 
	`Ârötf
(
°dout
, "FAILED (sigchld)\n");

529 
	`exô
(1);

532 
	`sig«l_dñ
(&
sig_ev
);

534 
	`˛ónup_ã°
();

535 
	}
}

538 
	$ã°_sim∂esig«l
()

540 
evít
 
ev
;

541 
ôimîvÆ
 
ôv
;

543 
	`£tup_ã°
("Simple signal: ");

544 
	`sig«l_£t
(&
ev
, 
SIGALRM
, 
sig«l_cb
, &ev);

545 
	`sig«l_add
(&
ev
, 
NULL
);

547 
	`sig«l_dñ
(&
ev
);

548 
	`sig«l_add
(&
ev
, 
NULL
);

550 
	`mem£t
(&
ôv
, 0, (itv));

551 
ôv
.
ô_vÆue
.
tv_£c
 = 1;

552 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1)

553 
skù_sim∂esig«l
;

555 
	`evít_di•©ch
();

556 
skù_sim∂esig«l
:

557 i‡(
	`sig«l_dñ
(&
ev
) == -1)

558 
ã°_ok
 = 0;

560 
	`˛ónup_ã°
();

561 
	}
}

564 
	$ã°_mu…ùÀsig«l
()

566 
evít
 
ev_⁄e
, 
ev_two
;

567 
ôimîvÆ
 
ôv
;

569 
	`£tup_ã°
("Multiple signal: ");

571 
	`sig«l_£t
(&
ev_⁄e
, 
SIGALRM
, 
sig«l_cb
, &ev_one);

572 
	`sig«l_add
(&
ev_⁄e
, 
NULL
);

574 
	`sig«l_£t
(&
ev_two
, 
SIGALRM
, 
sig«l_cb
, &ev_two);

575 
	`sig«l_add
(&
ev_two
, 
NULL
);

577 
	`mem£t
(&
ôv
, 0, (itv));

578 
ôv
.
ô_vÆue
.
tv_£c
 = 1;

579 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1)

580 
skù_sim∂esig«l
;

582 
	`evít_di•©ch
();

584 
skù_sim∂esig«l
:

585 i‡(
	`sig«l_dñ
(&
ev_⁄e
) == -1)

586 
ã°_ok
 = 0;

587 i‡(
	`sig«l_dñ
(&
ev_two
) == -1)

588 
ã°_ok
 = 0;

590 
	`˛ónup_ã°
();

591 
	}
}

594 
	$ã°_immedüãsig«l
()

596 
evít
 
ev
;

598 
ã°_ok
 = 0;

599 
	`¥ötf
("Immediate signal: ");

600 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

601 
	`sig«l_add
(&
ev
, 
NULL
);

602 
	`øi£
(
SIGUSR1
);

603 
	`evít_lo›
(
EVLOOP_NONBLOCK
);

604 
	`sig«l_dñ
(&
ev
);

605 
	`˛ónup_ã°
();

606 
	}
}

609 
	$ã°_sig«l_dóŒoc
()

612 
evít
 
ev
;

613 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

614 
	`¥ötf
("Signal dealloc: ");

615 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

616 
	`sig«l_add
(&
ev
, 
NULL
);

617 
	`sig«l_dñ
(&
ev
);

618 
	`evít_ba£_‰ì
(
ba£
);

620 
ã°_ok
 = 1;

621 
	`˛ónup_ã°
();

622 
	}
}

625 
	$ã°_sig«l_pùñoss
()

628 
evít_ba£
 *
ba£1
, *
ba£2
;

629 
pùe1
;

630 
ã°_ok
 = 0;

631 
	`¥ötf
("SignalÖipeloss: ");

632 
ba£1
 = 
	`evít_öô
();

633 
pùe1
 = 
ba£1
->
sig
.
ev_sig«l_∑ú
[0];

634 
ba£2
 = 
	`evít_öô
();

635 
	`evít_ba£_‰ì
(
ba£2
);

636 
	`evít_ba£_‰ì
(
ba£1
);

637 i‡(
	`˛o£
(
pùe1
Ë!-1 || 
î∫o
!=
EBADF
) {

639 
	`¥ötf
("signalÖipeÇot closed. ");

640 
ã°_ok
 = 0;

642 
ã°_ok
 = 1;

644 
	`˛ónup_ã°
();

645 
	}
}

653 
	$ã°_sig«l_swôchba£
()

655 
evít
 
ev1
, 
ev2
;

656 
evít_ba£
 *
ba£1
, *
ba£2
;

657 
is_kqueue
;

658 
ã°_ok
 = 0;

659 
	`¥ötf
("Signal switchbase: ");

660 
ba£1
 = 
	`evít_öô
();

661 
ba£2
 = 
	`evít_öô
();

662 
is_kqueue
 = !
	`°rcmp
(
	`evít_gë_mëhod
(),"kqueue");

663 
	`sig«l_£t
(&
ev1
, 
SIGUSR1
, 
sig«l_cb
, &ev1);

664 
	`sig«l_£t
(&
ev2
, 
SIGUSR1
, 
sig«l_cb
, &ev2);

665 i‡(
	`evít_ba£_£t
(
ba£1
, &
ev1
) ||

666 
	`evít_ba£_£t
(
ba£2
, &
ev2
) ||

667 
	`evít_add
(&
ev1
, 
NULL
) ||

668 
	`evít_add
(&
ev2
, 
NULL
)) {

669 
	`Ârötf
(
°dîr
, "%s: c™nŸ së ba£,ádd\n", 
__func__
);

670 
	`exô
(1);

673 
ã°_ok
 = 0;

675 
	`øi£
(
SIGUSR1
);

676 
	`evít_ba£_lo›
(
ba£2
, 
EVLOOP_NONBLOCK
);

677 i‡(
is_kqueue
) {

678 i‡(!
ã°_ok
)

679 
d⁄e
;

680 
ã°_ok
 = 0;

682 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

683 i‡(
ã°_ok
 && !
is_kqueue
) {

684 
ã°_ok
 = 0;

687 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

688 
	`øi£
(
SIGUSR1
);

689 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

690 
	`evít_ba£_lo›
(
ba£2
, 
EVLOOP_NONBLOCK
);

692 
d⁄e
:

693 
	`evít_ba£_‰ì
(
ba£1
);

694 
	`evít_ba£_‰ì
(
ba£2
);

695 
	`˛ónup_ã°
();

696 
	}
}

703 
	$ã°_sig«l_as£π
()

705 
evít
 
ev
;

706 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

707 
ã°_ok
 = 0;

708 
	`¥ötf
("Signal handlerássert: ");

710 
	`sig«l_£t
(&
ev
, 
SIGCONT
, 
sig«l_cb
, &ev);

711 
	`sig«l_add
(&
ev
, 
NULL
);

716 
	`sig«l_dñ
(&
ev
);

718 
	`øi£
(
SIGCONT
);

720 i‡(
ba£
->
sig
.
evsig«l_ˇught
)

721 
ã°_ok
 = 0;

723 
ã°_ok
 = 1;

725 
	`evít_ba£_‰ì
(
ba£
);

726 
	`˛ónup_ã°
();

728 
	}
}

734 
	$ã°_sig«l_ª°‹e
()

736 
evít
 
ev
;

737 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

738 #ifde‡
HAVE_SIGACTION


739 
siga˘i⁄
 
ß
;

742 
ã°_ok
 = 0;

743 
	`¥ötf
("Signal handlerÑestore: ");

744 #ifde‡
HAVE_SIGACTION


745 
ß
.
ß_h™dÀr
 = 
sig«l_cb_ß
;

746 
ß
.
ß_Êags
 = 0x0;

747 
	`sigem±y£t
(&
ß
.
ß_mask
);

748 i‡(
	`siga˘i⁄
(
SIGUSR1
, &
ß
, 
NULL
) == -1)

749 
out
;

751 i‡(
	`sig«l
(
SIGUSR1
, 
sig«l_cb_ß
Ë=
SIG_ERR
)

752 
out
;

754 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

755 
	`sig«l_add
(&
ev
, 
NULL
);

756 
	`sig«l_dñ
(&
ev
);

758 
	`øi£
(
SIGUSR1
);

760 i‡(
ã°_ok
 != 2)

761 
ã°_ok
 = 0;

762 
out
:

763 
	`evít_ba£_‰ì
(
ba£
);

764 
	`˛ónup_ã°
();

766 
	}
}

770 
	$ã°_‰ì_a˘ive_ba£
()

772 
evít_ba£
 *
ba£1
;

773 
evít
 
ev1
;

774 
	`£tup_ã°
("Freeáctive base: ");

775 
ba£1
 = 
	`evít_öô
();

776 
	`evít_£t
(&
ev1
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev1);

777 
	`evít_ba£_£t
(
ba£1
, &
ev1
);

778 
	`evít_add
(&
ev1
, 
NULL
);

780 
	`evít_ba£_‰ì
(
ba£1
);

781 
ã°_ok
 = 1;

782 
	`˛ónup_ã°
();

783 
	}
}

786 
	$ã°_evít_ba£_√w
()

788 
evít_ba£
 *
ba£
;

789 
evít
 
ev1
;

790 
	`£tup_ã°
("Event baseÇew: ");

792 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

793 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

795 
ba£
 = 
	`evít_ba£_√w
();

796 
	`evít_£t
(&
ev1
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev1);

797 
	`evít_ba£_£t
(
ba£
, &
ev1
);

798 
	`evít_add
(&
ev1
, 
NULL
);

800 
	`evít_ba£_di•©ch
(
ba£
);

802 
	`evít_ba£_‰ì
(
ba£
);

803 
ã°_ok
 = 1;

804 
	`˛ónup_ã°
();

805 
	}
}

808 
	$ã°_lo›exô
()

810 
timevÆ
 
tv
, 
tv_°¨t
, 
tv_íd
;

811 
evít
 
ev
;

813 
	`£tup_ã°
("LoopÉxit: ");

815 
tv
.
tv_u£c
 = 0;

816 
tv
.
tv_£c
 = 60*60*24;

817 
	`evtimî_£t
(&
ev
, 
timeout_cb
, 
NULL
);

818 
	`evtimî_add
(&
ev
, &
tv
);

820 
tv
.
tv_u£c
 = 0;

821 
tv
.
tv_£c
 = 1;

822 
	`evít_lo›exô
(&
tv
);

824 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

825 
	`evít_di•©ch
();

826 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

827 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

829 
	`evtimî_dñ
(&
ev
);

831 i‡(
tv
.
tv_£c
 < 2)

832 
ã°_ok
 = 1;

834 
	`˛ónup_ã°
();

835 
	}
}

838 
	$ã°_lo›exô_mu…ùÀ
()

840 
timevÆ
 
tv
;

841 
evít_ba£
 *
ba£
;

843 
	`£tup_ã°
("Loop MultipleÉxit: ");

845 
ba£
 = 
	`evít_ba£_√w
();

847 
tv
.
tv_u£c
 = 0;

848 
tv
.
tv_£c
 = 1;

849 
	`evít_ba£_lo›exô
(
ba£
, &
tv
);

851 
tv
.
tv_u£c
 = 0;

852 
tv
.
tv_£c
 = 2;

853 
	`evít_ba£_lo›exô
(
ba£
, &
tv
);

855 
	`evít_ba£_di•©ch
(
ba£
);

857 
	`evít_ba£_‰ì
(
ba£
);

859 
ã°_ok
 = 1;

861 
	`˛ónup_ã°
();

862 
	}
}

865 
	$bªak_cb
(
fd
, 
evíts
, *
¨g
)

867 
ã°_ok
 = 1;

868 
	`evít_lo›bªak
();

869 
	}
}

872 
	$Áû_cb
(
fd
, 
evíts
, *
¨g
)

874 
ã°_ok
 = 0;

875 
	}
}

878 
	$ã°_lo›bªak
()

880 
evít
 
ev1
, 
ev2
;

881 
timevÆ
 
tv
;

883 
	`£tup_ã°
("Loop break: ");

885 
tv
.
tv_£c
 = 0;

886 
tv
.
tv_u£c
 = 0;

887 
	`evtimî_£t
(&
ev1
, 
bªak_cb
, 
NULL
);

888 
	`evtimî_add
(&
ev1
, &
tv
);

889 
	`evtimî_£t
(&
ev2
, 
Áû_cb
, 
NULL
);

890 
	`evtimî_add
(&
ev2
, &
tv
);

892 
	`evít_di•©ch
();

894 
	`evtimî_dñ
(&
ev1
);

895 
	`evtimî_dñ
(&
ev2
);

897 
	`˛ónup_ã°
();

898 
	}
}

901 
	$ã°_evbuf„r
() {

903 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

904 
	`£tup_ã°
("Testing Evbuffer: ");

906 
	`evbuf„r_add_¥ötf
(
evb
, "%s/%d", "hello", 1);

908 i‡(
	`EVBUFFER_LENGTH
(
evb
) == 7 &&

909 
	`°rcmp
((*)
	`EVBUFFER_DATA
(
evb
), "hello/1") == 0)

910 
ã°_ok
 = 1;

912 
	`evbuf„r_‰ì
(
evb
);

914 
	`˛ónup_ã°
();

915 
	}
}

918 
	$ã°_evbuf„r_föd
()

920 
u_ch¨
* 
p
;

921 c⁄° * 
ã°1
 = "1234567890\r\n";

922 c⁄° * 
ã°2
 = "1234567890\r";

923 
	#EVBUFFER_INITIAL_LENGTH
 256

	)

924 
ã°3
[
EVBUFFER_INITIAL_LENGTH
];

925 
i
;

926 
evbuf„r
 * 
buf
 = 
	`evbuf„r_√w
();

929 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 1: ");

930 
	`evbuf„r_add
(
buf
, (
u_ch¨
*)
ã°1
, 
	`°æí
(test1));

931 
	`evbuf„r_døö
(
buf
, 
	`°æí
(
ã°1
));

932 
	`evbuf„r_add
(
buf
, (
u_ch¨
*)
ã°2
, 
	`°æí
(test2));

933 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
*)"\r\n", 2);

934 i‡(
p
 =
NULL
) {

935 
	`Ârötf
(
°dout
, "OK\n");

937 
	`Ârötf
(
°dout
, "FAILED\n");

938 
	`exô
(1);

945 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 2: ");

946 
	`evbuf„r_døö
(
buf
, 
	`°æí
(
ã°2
));

947 
i
 = 0; i < 
EVBUFFER_INITIAL_LENGTH
; ++i)

948 
ã°3
[
i
] = 'a';

949 
ã°3
[
EVBUFFER_INITIAL_LENGTH
 - 1] = 'x';

950 
	`evbuf„r_add
(
buf
, (
u_ch¨
 *)
ã°3
, 
EVBUFFER_INITIAL_LENGTH
);

951 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
 *)"xy", 2);

952 i‡(
p
 =
NULL
) {

953 
	`¥ötf
("OK\n");

955 
	`Ârötf
(
°dout
, "FAILED\n");

956 
	`exô
(1);

960 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 3: ");

961 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
 *)"ax", 2);

962 i‡(
p
 !
NULL
 && 
	`°∫cmp
((*)p, "ax", 2) == 0) {

963 
	`¥ötf
("OK\n");

965 
	`Ârötf
(
°dout
, "FAILED\n");

966 
	`exô
(1);

969 
	`evbuf„r_‰ì
(
buf
);

970 
	}
}

977 
	$ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

979 i‡(
	`EVBUFFER_LENGTH
(
bev
->
öput
) == 8333) {

980 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

981 
ã°_ok
++;

983 
	}
}

986 
	$wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

988 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0)

989 
ã°_ok
++;

990 
	}
}

993 
	$îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

995 
ã°_ok
 = -2;

996 
	}
}

999 
	$ã°_buf„ªvít
()

1001 
buf„ªvít
 *
bev1
, *
bev2
;

1002 
buf„r
[8333];

1003 
i
;

1005 
	`£tup_ã°
("Bufferevent: ");

1007 
bev1
 = 
	`buf„ªvít_√w
(
∑ú
[0], 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
NULL
);

1008 
bev2
 = 
	`buf„ªvít_√w
(
∑ú
[1], 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
NULL
);

1010 
	`buf„ªvít_dißbÀ
(
bev1
, 
EV_READ
);

1011 
	`buf„ªvít_íabÀ
(
bev2
, 
EV_READ
);

1013 
i
 = 0; i < (
buf„r
); i++)

1014 
buf„r
[
i
] = i;

1016 
	`buf„ªvít_wrôe
(
bev1
, 
buf„r
, (buffer));

1018 
	`evít_di•©ch
();

1020 
	`buf„ªvít_‰ì
(
bev1
);

1021 
	`buf„ªvít_‰ì
(
bev2
);

1023 i‡(
ã°_ok
 != 2)

1024 
ã°_ok
 = 0;

1026 
	`˛ónup_ã°
();

1027 
	}
}

1034 
	$wm_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

1036 
Àn
 = 
	`EVBUFFER_LENGTH
(
bev
->
öput
);

1037 
ƒód
;

1039 
	`as£π
(
Àn
 >= 10 &&Üen <= 20);

1041 
	`evbuf„r_døö
(
bev
->
öput
, 
Àn
);

1043 
ƒód
 +
Àn
;

1044 i‡(
ƒód
 == 65000) {

1045 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

1046 
ã°_ok
++;

1048 
	}
}

1051 
	$wm_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

1053 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0)

1054 
ã°_ok
++;

1055 
	}
}

1058 
	$wm_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

1060 
ã°_ok
 = -2;

1061 
	}
}

1064 
	$ã°_buf„ªvít_w©îm¨ks
()

1066 
buf„ªvít
 *
bev1
, *
bev2
;

1067 
buf„r
[65000];

1068 
i
;

1070 
	`£tup_ã°
("Bufferevent Watermarks: ");

1072 
bev1
 = 
	`buf„ªvít_√w
(
∑ú
[0], 
NULL
, 
wm_wrôecb
, 
wm_îr‹cb
, NULL);

1073 
bev2
 = 
	`buf„ªvít_√w
(
∑ú
[1], 
wm_ªadcb
, 
NULL
, 
wm_îr‹cb
, NULL);

1075 
	`buf„ªvít_dißbÀ
(
bev1
, 
EV_READ
);

1076 
	`buf„ªvít_íabÀ
(
bev2
, 
EV_READ
);

1078 
i
 = 0; i < (
buf„r
); i++)

1079 
buf„r
[
i
] = i;

1081 
	`buf„ªvít_wrôe
(
bev1
, 
buf„r
, (buffer));

1084 
	`buf„ªvít_£tw©îm¨k
(
bev2
, 
EV_READ
, 10, 20);

1086 
	`evít_di•©ch
();

1088 
	`buf„ªvít_‰ì
(
bev1
);

1089 
	`buf„ªvít_‰ì
(
bev2
);

1091 i‡(
ã°_ok
 != 2)

1092 
ã°_ok
 = 0;

1094 
	`˛ónup_ã°
();

1095 
	}
}

1097 
	sã°_¥i_evít
 {

1098 
evít
 
	mev
;

1099 
	mcou¡
;

1103 
	$ã°_¥i‹ôõs_cb
(
fd
, 
wh©
, *
¨g
)

1105 
ã°_¥i_evít
 *
¥i
 = 
¨g
;

1106 
timevÆ
 
tv
;

1108 i‡(
¥i
->
cou¡
 == 3) {

1109 
	`evít_lo›exô
(
NULL
);

1113 
¥i
->
cou¡
++;

1115 
	`evutû_timî˛ór
(&
tv
);

1116 
	`evít_add
(&
¥i
->
ev
, &
tv
);

1117 
	}
}

1120 
	$ã°_¥i‹ôõs
(
≈ri‹ôõs
)

1122 
buf
[32];

1123 
ã°_¥i_evít
 
⁄e
, 
two
;

1124 
timevÆ
 
tv
;

1126 
	`evutû_¢¥ötf
(
buf
, (buf), "Te°ög Pri‹ôõ†%d: ", 
≈ri‹ôõs
);

1127 
	`£tup_ã°
(
buf
);

1129 
	`evít_ba£_¥i‹ôy_öô
(
globÆ_ba£
, 
≈ri‹ôõs
);

1131 
	`mem£t
(&
⁄e
, 0, (one));

1132 
	`mem£t
(&
two
, 0, (two));

1134 
	`timeout_£t
(&
⁄e
.
ev
, 
ã°_¥i‹ôõs_cb
, &one);

1135 i‡(
	`evít_¥i‹ôy_£t
(&
⁄e
.
ev
, 0) == -1) {

1136 
	`Ârötf
(
°dîr
, "%s: faûedÅÿ£à¥i‹ôy", 
__func__
);

1137 
	`exô
(1);

1140 
	`timeout_£t
(&
two
.
ev
, 
ã°_¥i‹ôõs_cb
, &two);

1141 i‡(
	`evít_¥i‹ôy_£t
(&
two
.
ev
, 
≈ri‹ôõs
 - 1) == -1) {

1142 
	`Ârötf
(
°dîr
, "%s: faûedÅÿ£à¥i‹ôy", 
__func__
);

1143 
	`exô
(1);

1146 
	`evutû_timî˛ór
(&
tv
);

1148 i‡(
	`evít_add
(&
⁄e
.
ev
, &
tv
) == -1)

1149 
	`exô
(1);

1150 i‡(
	`evít_add
(&
two
.
ev
, &
tv
) == -1)

1151 
	`exô
(1);

1153 
	`evít_di•©ch
();

1155 
	`evít_dñ
(&
⁄e
.
ev
);

1156 
	`evít_dñ
(&
two
.
ev
);

1158 i‡(
≈ri‹ôõs
 == 1) {

1159 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 3)

1160 
ã°_ok
 = 1;

1161 } i‡(
≈ri‹ôõs
 == 2) {

1163 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 1)

1164 
ã°_ok
 = 1;

1166 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 0)

1167 
ã°_ok
 = 1;

1170 
	`˛ónup_ã°
();

1171 
	}
}

1174 
	$ã°_mu…ùÀ_cb
(
fd
, 
evít
, *
¨g
)

1176 i‡(
evít
 & 
EV_READ
)

1177 
ã°_ok
 |= 1;

1178 i‡(
evít
 & 
EV_WRITE
)

1179 
ã°_ok
 |= 2;

1180 
	}
}

1183 
	$ã°_mu…ùÀ_evíts_f‹_ßme_fd
()

1185 
evít
 
e1
, 
e2
;

1187 
	`£tup_ã°
("MultipleÉvents for same fd: ");

1189 
	`evít_£t
(&
e1
, 
∑ú
[0], 
EV_READ
, 
ã°_mu…ùÀ_cb
, 
NULL
);

1190 
	`evít_add
(&
e1
, 
NULL
);

1191 
	`evít_£t
(&
e2
, 
∑ú
[0], 
EV_WRITE
, 
ã°_mu…ùÀ_cb
, 
NULL
);

1192 
	`evít_add
(&
e2
, 
NULL
);

1193 
	`evít_lo›
(
EVLOOP_ONCE
);

1194 
	`evít_dñ
(&
e2
);

1195 
	`wrôe
(
∑ú
[1], 
TEST1
, 
	`°æí
(TEST1)+1);

1196 
	`evít_lo›
(
EVLOOP_ONCE
);

1197 
	`evít_dñ
(&
e1
);

1199 i‡(
ã°_ok
 != 3)

1200 
ã°_ok
 = 0;

1202 
	`˛ónup_ã°
();

1203 
	}
}

1205 
evèg_decode_öt
(
uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

1206 
evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
numbî
);

1207 
evèg_decode_èg
(
uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

1210 
	$ªad_⁄˚_cb
(
fd
, 
evít
, *
¨g
)

1212 
buf
[256];

1213 
Àn
;

1215 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

1217 i‡(
ˇŒed
) {

1218 
ã°_ok
 = 0;

1219 } i‡(
Àn
) {

1221 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

1222 
ã°_ok
 = 1;

1225 
ˇŒed
++;

1226 
	}
}

1229 
	$ã°_w™t_⁄ly_⁄˚
()

1231 
evít
 
ev
;

1232 
timevÆ
 
tv
;

1235 
	`£tup_ã°
("WantÑead only once: ");

1237 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

1240 
	`evutû_timî˛ór
(&
tv
);

1241 
tv
.
tv_£c
 = 1;

1242 
	`evít_lo›exô
(&
tv
);

1244 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
ªad_⁄˚_cb
, &ev);

1245 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

1246 
	`exô
(1);

1247 
	`evít_di•©ch
();

1249 
	`˛ónup_ã°
();

1250 
	}
}

1252 
	#TEST_MAX_INT
 6

	)

1255 
	$evèg_öt_ã°
()

1257 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1258 
uöt32_t
 
öãgîs
[
TEST_MAX_INT
] = {

1261 
uöt32_t
 
öãgî
;

1262 
i
;

1264 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1265 
ﬁdÀn
, 
√wÀn
;

1266 
ﬁdÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1267 
	`ícode_öt
(
tmp
, 
öãgîs
[
i
]);

1268 
√wÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1269 
	`Ârötf
(
°dout
, "\t\tencoded 0x%08x with %d bytes\n",

1270 
öãgîs
[
i
], 
√wÀn
 - 
ﬁdÀn
);

1273 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1274 i‡(
	`evèg_decode_öt
(&
öãgî
, 
tmp
) == -1) {

1275 
	`Ârötf
(
°dîr
, "decodê%d faûed", 
i
);

1276 
	`exô
(1);

1278 i‡(
öãgî
 !
öãgîs
[
i
]) {

1279 
	`Ârötf
(
°dîr
, "got %x, wanted %x",

1280 
öãgî
, 
öãgîs
[
i
]);

1281 
	`exô
(1);

1285 i‡(
	`EVBUFFER_LENGTH
(
tmp
) != 0) {

1286 
	`Ârötf
(
°dîr
, "trailing data");

1287 
	`exô
(1);

1289 
	`evbuf„r_‰ì
(
tmp
);

1291 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1292 
	}
}

1295 
	$evèg_fuzz
()

1297 
u_ch¨
 
buf„r
[4096];

1298 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1299 
timevÆ
 
tv
;

1300 
i
, 
j
;

1302 
nŸ_Áûed
 = 0;

1303 
j
 = 0; j < 100; j++) {

1304 
i
 = 0; i < (
buf„r
); i++)

1305 
buf„r
[
i
] = 
	`ønd
();

1306 
	`evbuf„r_døö
(
tmp
, -1);

1307 
	`evbuf„r_add
(
tmp
, 
buf„r
, (buffer));

1309 i‡(
	`evèg_unm¨shÆ_timevÆ
(
tmp
, 0, &
tv
) != -1)

1310 
nŸ_Áûed
++;

1314 i‡(
nŸ_Áûed
 >= 10) {

1315 
	`Ârötf
(
°dîr
, "evtag_unmarshal should have failed");

1316 
	`exô
(1);

1320 
	`evbuf„r_døö
(
tmp
, -1);

1321 
	`evutû_timî˛ór
(&
tv
);

1322 
tv
.
tv_£c
 = 1;

1323 
	`evèg_m¨shÆ_timevÆ
(
tmp
, 0, &
tv
);

1324 
	`evbuf„r_add
(
tmp
, 
buf„r
, (buffer));

1326 
	`EVBUFFER_DATA
(
tmp
)[1] = 0xff;

1327 i‡(
	`evèg_unm¨shÆ_timevÆ
(
tmp
, 0, &
tv
) != -1) {

1328 
	`Ârötf
(
°dîr
, "evtag_unmarshal_timeval should have failed");

1329 
	`exô
(1);

1332 
	`evbuf„r_‰ì
(
tmp
);

1334 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1335 
	}
}

1338 
	$evèg_èg_ícodög
()

1340 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1341 
uöt32_t
 
öãgîs
[
TEST_MAX_INT
] = {

1344 
uöt32_t
 
öãgî
;

1345 
i
;

1347 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1348 
ﬁdÀn
, 
√wÀn
;

1349 
ﬁdÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1350 
	`evèg_ícode_èg
(
tmp
, 
öãgîs
[
i
]);

1351 
√wÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1352 
	`Ârötf
(
°dout
, "\t\tencoded 0x%08x with %d bytes\n",

1353 
öãgîs
[
i
], 
√wÀn
 - 
ﬁdÀn
);

1356 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1357 i‡(
	`evèg_decode_èg
(&
öãgî
, 
tmp
) == -1) {

1358 
	`Ârötf
(
°dîr
, "decodê%d faûed", 
i
);

1359 
	`exô
(1);

1361 i‡(
öãgî
 !
öãgîs
[
i
]) {

1362 
	`Ârötf
(
°dîr
, "got %x, wanted %x",

1363 
öãgî
, 
öãgîs
[
i
]);

1364 
	`exô
(1);

1368 i‡(
	`EVBUFFER_LENGTH
(
tmp
) != 0) {

1369 
	`Ârötf
(
°dîr
, "trailing data");

1370 
	`exô
(1);

1372 
	`evbuf„r_‰ì
(
tmp
);

1374 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1375 
	}
}

1378 
	$evèg_ã°
()

1380 
	`Ârötf
(
°dout
, "Testing Tagging:\n");

1382 
	`evèg_öô
();

1383 
	`evèg_öt_ã°
();

1384 
	`evèg_fuzz
();

1386 
	`evèg_èg_ícodög
();

1388 
	`Ârötf
(
°dout
, "OK\n");

1389 
	}
}

1391 #i‚de‡
WIN32


1393 
	$Ωc_ã°
()

1395 
msg
 *msg, *
msg2
;

1396 
kûl
 *
©èck
;

1397 
run
 *run;

1398 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1399 
timevÆ
 
tv_°¨t
, 
tv_íd
;

1400 
uöt32_t
 
èg
;

1401 
i
;

1403 
	`Ârötf
(
°dout
, "Testing RPC: ");

1405 
msg
 = 
	`msg_√w
();

1406 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

1407 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "phoenix");

1409 i‡(
	`EVTAG_GET
(
msg
, 
©èck
, &attack) == -1) {

1410 
	`Ârötf
(
°dîr
, "FailedÅo set kill message.\n");

1411 
	`exô
(1);

1414 
	`EVTAG_ASSIGN
(
©èck
, 
wóp⁄
, "feather");

1415 
	`EVTAG_ASSIGN
(
©èck
, 
a˘i⁄
, "tickle");

1417 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

1418 
i
 = 0; i < 1000; ++i) {

1419 
run
 = 
	`EVTAG_ADD
(
msg
,Ñun);

1420 i‡(
run
 =
NULL
) {

1421 
	`Ârötf
(
°dîr
, "FailedÅoáddÑun message.\n");

1422 
	`exô
(1);

1424 
	`EVTAG_ASSIGN
(
run
, 
how
, "very fast but with some data in it");

1425 
	`EVTAG_ASSIGN
(
run
, 
fixed_byãs
,

1429 i‡(
	`msg_com∂ëe
(
msg
) == -1) {

1430 
	`Ârötf
(
°dîr
, "FailedÅo make complete message.\n");

1431 
	`exô
(1);

1434 
	`evèg_m¨shÆ_msg
(
tmp
, 0xdóf, 
msg
);

1436 i‡(
	`evèg_≥ek
(
tmp
, &
èg
) == -1) {

1437 
	`Ârötf
(
°dîr
, "FailedÅoÖeakÅag.\n");

1438 
	`exô
 (1);

1441 i‡(
èg
 != 0xdeaf) {

1442 
	`Ârötf
(
°dîr
, "GŸ inc‹ª˘Åag: %0x.\n", 
èg
);

1443 
	`exô
 (1);

1446 
msg2
 = 
	`msg_√w
();

1447 i‡(
	`evèg_unm¨shÆ_msg
(
tmp
, 0xdóf, 
msg2
) == -1) {

1448 
	`Ârötf
(
°dîr
, "FailedÅo unmarshal message.\n");

1449 
	`exô
(1);

1452 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

1453 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

1454 
	`Ârötf
(
°dîr
, "(%.1f us/add) ",

1455 ()
tv_íd
.
tv_£c
/()
i
 * 1000000.0 +

1456 
tv_íd
.
tv_u£c
 / ()
i
);

1458 i‡(!
	`EVTAG_HAS
(
msg2
, 
‰om_«me
) ||

1459 !
	`EVTAG_HAS
(
msg2
, 
to_«me
) ||

1460 !
	`EVTAG_HAS
(
msg2
, 
©èck
)) {

1461 
	`Ârötf
(
°dîr
, "Missing data structures.\n");

1462 
	`exô
(1);

1465 i‡(
	`EVTAG_LEN
(
msg2
, 
run
Ë!
i
) {

1466 
	`Ârötf
(
°dîr
, "WrongÇumber ofÑun messages.\n");

1467 
	`exô
(1);

1470 
	`msg_‰ì
(
msg
);

1471 
	`msg_‰ì
(
msg2
);

1473 
	`evbuf„r_‰ì
(
tmp
);

1475 
	`Ârötf
(
°dout
, "OK\n");

1476 
	}
}

1480 
	$ã°_evutû_°πﬁl
()

1482 c⁄° *
s
;

1483 *
íd±r
;

1484 
	`£tup_ã°
("evutil_stroll: ");

1485 
ã°_ok
 = 0;

1487 i‡(
	`evutû_°πﬁl
("5000000000", 
NULL
, 10Ë!((
ev_öt64_t
)5000000)*1000)

1488 
îr
;

1489 i‡(
	`evutû_°πﬁl
("-5000000000", 
NULL
, 10Ë!((
ev_öt64_t
)5000000)*-1000)

1490 
îr
;

1491 
s
 = " 99999stuff";

1492 i‡(
	`evutû_°πﬁl
(
s
, &
íd±r
, 10Ë!(
ev_öt64_t
)99999)

1493 
îr
;

1494 i‡(
íd±r
 !
s
+6)

1495 
îr
;

1496 i‡(
	`evutû_°πﬁl
("foo", 
NULL
, 10) != 0)

1497 
îr
;

1499 
ã°_ok
 = 1;

1500 
îr
:

1501 
	`˛ónup_ã°
();

1502 
	}
}

1506 
	$maö
 (
¨gc
, **
¨gv
)

1508 #ifde‡
WIN32


1509 
WORD
 
wVîsi⁄Reque°ed
;

1510 
WSADATA
 
wßD©a
;

1511 
îr
;

1513 
wVîsi⁄Reque°ed
 = 
	`MAKEWORD
( 2, 2 );

1515 
îr
 = 
	`WSASèπup
–
wVîsi⁄Reque°ed
, &
wßD©a
 );

1518 #i‚de‡
WIN32


1519 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
)

1522 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

1525 
globÆ_ba£
 = 
	`evít_öô
();

1527 
	`ã°_evutû_°πﬁl
();

1530 
	`ã°_¥i‹ôõs
(1);

1531 
	`ã°_¥i‹ôõs
(2);

1532 
	`ã°_¥i‹ôõs
(3);

1534 
	`ã°_evbuf„r
();

1535 
	`ã°_evbuf„r_föd
();

1537 
	`ã°_buf„ªvít
();

1538 
	`ã°_buf„ªvít_w©îm¨ks
();

1540 
	`ã°_‰ì_a˘ive_ba£
();

1542 
	`ã°_evít_ba£_√w
();

1544 
	`hâp_suôe
();

1546 #i‚de‡
WIN32


1547 
	`Ωc_suôe
();

1550 
	`dns_suôe
();

1552 #i‚de‡
WIN32


1553 
	`ã°_f‹k
();

1556 
	`ã°_sim∂îód
();

1558 
	`ã°_sim∂ewrôe
();

1560 
	`ã°_mu…ùÀ
();

1562 
	`ã°_≥rsi°ít
();

1564 
	`ã°_comböed
();

1566 
	`ã°_sim∂ëimeout
();

1567 #i‚de‡
WIN32


1568 
	`ã°_sim∂esig«l
();

1569 
	`ã°_mu…ùÀsig«l
();

1570 
	`ã°_immedüãsig«l
();

1572 
	`ã°_lo›exô
();

1573 
	`ã°_lo›bªak
();

1575 
	`ã°_lo›exô_mu…ùÀ
();

1577 
	`ã°_mu…ùÀ_evíts_f‹_ßme_fd
();

1579 
	`ã°_w™t_⁄ly_⁄˚
();

1581 
	`evèg_ã°
();

1583 #i‚de‡
WIN32


1584 
	`Ωc_ã°
();

1586 
	`ã°_sig«l_dóŒoc
();

1587 
	`ã°_sig«l_pùñoss
();

1588 
	`ã°_sig«l_swôchba£
();

1589 
	`ã°_sig«l_ª°‹e
();

1590 
	`ã°_sig«l_as£π
();

1594 
	}
}

	@test/regress.gen.c

6 
	~<sys/ty≥s.h
>

7 
	~<sys/time.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<as£π.h
>

11 
	~<evít.h
>

14 
	~"ªgªss.gí.h
"

16 
evít_îr
(
evÆ
, c⁄° *
fmt
, ...);

17 
evít_w¨n
(c⁄° *
fmt
, ...);

18 
evít_îrx
(
evÆ
, c⁄° *
fmt
, ...);

19 
evít_w¨nx
(c⁄° *
fmt
, ...);

26 
msg_ac˚ss_
 
	g__msg_ba£
 = {

27 
msg_‰om_«me_assign
,

28 
msg_‰om_«me_gë
,

29 
msg_to_«me_assign
,

30 
msg_to_«me_gë
,

31 
msg_©èck_assign
,

32 
msg_©èck_gë
,

33 
msg_run_assign
,

34 
msg_run_gë
,

35 
msg_run_add
,

38 
msg
 *

39 
	$msg_√w
()

41 
msg
 *
tmp
;

42 i‡((
tmp
 = 
	`mÆloc
((
msg
))Ë=
NULL
) {

43 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

44  (
NULL
);

46 
tmp
->
ba£
 = &
__msg_ba£
;

48 
tmp
->
‰om_«me_d©a
 = 
NULL
;

49 
tmp
->
‰om_«me_£t
 = 0;

51 
tmp
->
to_«me_d©a
 = 
NULL
;

52 
tmp
->
to_«me_£t
 = 0;

54 
tmp
->
©èck_d©a
 = 
NULL
;

55 
tmp
->
©èck_£t
 = 0;

57 
tmp
->
run_d©a
 = 
NULL
;

58 
tmp
->
run_Àngth
 = 0;

59 
tmp
->
run_num_Æloˇãd
 = 0;

60 
tmp
->
run_£t
 = 0;

62  (
tmp
);

63 
	}
}

68 
run
 *

69 
	$msg_run_add
(
msg
 *msg)

71 i‡(++
msg
->
run_Àngth
 >msg->
run_num_Æloˇãd
) {

72 
tobe_Æloˇãd
 = 
msg
->
run_num_Æloˇãd
;

73 
run
 ** 
√w_d©a
 = 
NULL
;

74 
tobe_Æloˇãd
 = !tobe_allocated ? 1 :Åobe_allocated << 1;

75 
√w_d©a
 = (
run
 **Ë
	`ªÆloc
(
msg
->
run_d©a
,

76 
tobe_Æloˇãd
 * (
run
 *));

77 i‡(
√w_d©a
 =
NULL
)

78 
îr‹
;

79 
msg
->
run_d©a
 = 
√w_d©a
;

80 
msg
->
run_num_Æloˇãd
 = 
tobe_Æloˇãd
;

82 
msg
->
run_d©a
[msg->
run_Àngth
 - 1] = 
	`run_√w
();

83 i‡(
msg
->
run_d©a
[msg->
run_Àngth
 - 1] =
NULL
)

84 
îr‹
;

85 
msg
->
run_£t
 = 1;

86  (
msg
->
run_d©a
[msg->
run_Àngth
 - 1]);

87 
îr‹
:

88 --
msg
->
run_Àngth
;

89  (
NULL
);

90 
	}
}

94 
	$msg_‰om_«me_assign
(
msg
 *msg,

95 c⁄° * 
vÆue
)

97 i‡(
msg
->
‰om_«me_d©a
 !
NULL
)

98 
	`‰ì
(
msg
->
‰om_«me_d©a
);

99 i‡((
msg
->
‰om_«me_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

101 
msg
->
‰om_«me_£t
 = 1;

103 
	}
}

106 
	$msg_to_«me_assign
(
msg
 *msg,

107 c⁄° * 
vÆue
)

109 i‡(
msg
->
to_«me_d©a
 !
NULL
)

110 
	`‰ì
(
msg
->
to_«me_d©a
);

111 i‡((
msg
->
to_«me_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

113 
msg
->
to_«me_£t
 = 1;

115 
	}
}

118 
	$msg_©èck_assign
(
msg
 *msg,

119 c⁄° 
kûl
* 
vÆue
)

121 
evbuf„r
 *
tmp
 = 
NULL
;

122 i‡(
msg
->
©èck_£t
) {

123 
	`kûl_˛ór
(
msg
->
©èck_d©a
);

124 
msg
->
©èck_£t
 = 0;

126 
msg
->
©èck_d©a
 = 
	`kûl_√w
();

127 i‡(
msg
->
©èck_d©a
 =
NULL
) {

128 
	`evít_w¨n
("%s: kûl_√w()", 
__func__
);

129 
îr‹
;

132 i‡((
tmp
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

133 
	`evít_w¨n
("%s:Évbuf„r_√w()", 
__func__
);

134 
îr‹
;

136 
	`kûl_m¨shÆ
(
tmp
, 
vÆue
);

137 i‡(
	`kûl_unm¨shÆ
(
msg
->
©èck_d©a
, 
tmp
) == -1) {

138 
	`evít_w¨nx
("%s: kûl_unm¨shÆ", 
__func__
);

139 
îr‹
;

141 
msg
->
©èck_£t
 = 1;

142 
	`evbuf„r_‰ì
(
tmp
);

144 
îr‹
:

145 i‡(
tmp
 !
NULL
)

146 
	`evbuf„r_‰ì
(
tmp
);

147 i‡(
msg
->
©èck_d©a
 !
NULL
) {

148 
	`kûl_‰ì
(
msg
->
©èck_d©a
);

149 
msg
->
©èck_d©a
 = 
NULL
;

152 
	}
}

155 
	$msg_run_assign
(
msg
 *msg, 
off
,

156 c⁄° 
run
 * 
vÆue
)

158 
evbuf„r
 *
tmp
 = 
NULL
;

159 i‡(!
msg
->
run_£t
 || 
off
 < 0 || of‡>msg->
run_Àngth
)

161 
	`run_˛ór
(
msg
->
run_d©a
[
off
]);

162 i‡((
tmp
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

163 
	`evít_w¨n
("%s:Évbuf„r_√w()", 
__func__
);

164 
îr‹
;

166 
	`run_m¨shÆ
(
tmp
, 
vÆue
);

167 i‡(
	`run_unm¨shÆ
(
msg
->
run_d©a
[
off
], 
tmp
) == -1) {

168 
	`evít_w¨nx
("%s:Ñun_unm¨shÆ", 
__func__
);

169 
îr‹
;

171 
	`evbuf„r_‰ì
(
tmp
);

173 
îr‹
:

174 i‡(
tmp
 !
NULL
)

175 
	`evbuf„r_‰ì
(
tmp
);

176 
	`run_˛ór
(
msg
->
run_d©a
[
off
]);

178 
	}
}

181 
	$msg_‰om_«me_gë
(
msg
 *msg, * *
vÆue
)

183 i‡(
msg
->
‰om_«me_£t
 != 1)

185 *
vÆue
 = 
msg
->
‰om_«me_d©a
;

187 
	}
}

190 
	$msg_to_«me_gë
(
msg
 *msg, * *
vÆue
)

192 i‡(
msg
->
to_«me_£t
 != 1)

194 *
vÆue
 = 
msg
->
to_«me_d©a
;

196 
	}
}

199 
	$msg_©èck_gë
(
msg
 *msg, 
kûl
* *
vÆue
)

201 i‡(
msg
->
©èck_£t
 != 1) {

202 
msg
->
©èck_d©a
 = 
	`kûl_√w
();

203 i‡(
msg
->
©èck_d©a
 =
NULL
)

205 
msg
->
©èck_£t
 = 1;

207 *
vÆue
 = 
msg
->
©èck_d©a
;

209 
	}
}

212 
	$msg_run_gë
(
msg
 *msg, 
off£t
,

213 
run
 * *
vÆue
)

215 i‡(!
msg
->
run_£t
 || 
off£t
 < 0 || off£à>msg->
run_Àngth
)

217 *
vÆue
 = 
msg
->
run_d©a
[
off£t
];

219 
	}
}

222 
	$msg_˛ór
(
msg
 *
tmp
)

224 i‡(
tmp
->
‰om_«me_£t
 == 1) {

225 
	`‰ì
 (
tmp
->
‰om_«me_d©a
);

226 
tmp
->
‰om_«me_d©a
 = 
NULL
;

227 
tmp
->
‰om_«me_£t
 = 0;

229 i‡(
tmp
->
to_«me_£t
 == 1) {

230 
	`‰ì
 (
tmp
->
to_«me_d©a
);

231 
tmp
->
to_«me_d©a
 = 
NULL
;

232 
tmp
->
to_«me_£t
 = 0;

234 i‡(
tmp
->
©èck_£t
 == 1) {

235 
	`kûl_‰ì
(
tmp
->
©èck_d©a
);

236 
tmp
->
©èck_d©a
 = 
NULL
;

237 
tmp
->
©èck_£t
 = 0;

239 i‡(
tmp
->
run_£t
 == 1) {

240 
i
;

241 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

242 
	`run_‰ì
(
tmp
->
run_d©a
[
i
]);

244 
	`‰ì
(
tmp
->
run_d©a
);

245 
tmp
->
run_d©a
 = 
NULL
;

246 
tmp
->
run_£t
 = 0;

247 
tmp
->
run_Àngth
 = 0;

248 
tmp
->
run_num_Æloˇãd
 = 0;

250 
	}
}

253 
	$msg_‰ì
(
msg
 *
tmp
)

255 i‡(
tmp
->
‰om_«me_d©a
 !
NULL
)

256 
	`‰ì
 (
tmp
->
‰om_«me_d©a
);

257 i‡(
tmp
->
to_«me_d©a
 !
NULL
)

258 
	`‰ì
 (
tmp
->
to_«me_d©a
);

259 i‡(
tmp
->
©èck_d©a
 !
NULL
)

260 
	`kûl_‰ì
(
tmp
->
©èck_d©a
);

261 i‡(
tmp
->
run_d©a
 !
NULL
) {

262 
i
;

263 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

264 
	`run_‰ì
(
tmp
->
run_d©a
[
i
]);

265 
tmp
->
run_d©a
[
i
] = 
NULL
;

267 
	`‰ì
(
tmp
->
run_d©a
);

268 
tmp
->
run_d©a
 = 
NULL
;

269 
tmp
->
run_Àngth
 = 0;

270 
tmp
->
run_num_Æloˇãd
 = 0;

272 
	`‰ì
(
tmp
);

273 
	}
}

276 
	$msg_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
msg
 *
tmp
){

277 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
MSG_FROM_NAME
, 
tmp
->
‰om_«me_d©a
);

278 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
MSG_TO_NAME
, 
tmp
->
to_«me_d©a
);

279 i‡(
tmp
->
©èck_£t
) {

280 
	`evèg_m¨shÆ_kûl
(
evbuf
, 
MSG_ATTACK
, 
tmp
->
©èck_d©a
);

283 
i
;

284 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

285 
	`evèg_m¨shÆ_run
(
evbuf
, 
MSG_RUN
, 
tmp
->
run_d©a
[
i
]);

288 
	}
}

291 
	$msg_unm¨shÆ
(
msg
 *
tmp
, 
evbuf„r
 *
evbuf
)

293 
uöt32_t
 
èg
;

294 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

295 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

297 
èg
) {

299 
MSG_FROM_NAME
:

301 i‡(
tmp
->
‰om_«me_£t
)

303 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
MSG_FROM_NAME
, &
tmp
->
‰om_«me_d©a
) == -1) {

304 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ from_«me", 
__func__
);

307 
tmp
->
‰om_«me_£t
 = 1;

310 
MSG_TO_NAME
:

312 i‡(
tmp
->
to_«me_£t
)

314 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
MSG_TO_NAME
, &
tmp
->
to_«me_d©a
) == -1) {

315 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆÅo_«me", 
__func__
);

318 
tmp
->
to_«me_£t
 = 1;

321 
MSG_ATTACK
:

323 i‡(
tmp
->
©èck_£t
)

325 
tmp
->
©èck_d©a
 = 
	`kûl_√w
();

326 i‡(
tmp
->
©èck_d©a
 =
NULL
)

328 i‡(
	`evèg_unm¨shÆ_kûl
(
evbuf
, 
MSG_ATTACK
, 
tmp
->
©èck_d©a
) == -1) {

329 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆáâack", 
__func__
);

332 
tmp
->
©èck_£t
 = 1;

335 
MSG_RUN
:

337 i‡(
	`msg_run_add
(
tmp
Ë=
NULL
)

339 i‡(
	`evèg_unm¨shÆ_run
(
evbuf
, 
MSG_RUN
,

340 
tmp
->
run_d©a
[tmp->
run_Àngth
 - 1]) == -1) {

341 --
tmp
->
run_Àngth
;

342 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆÑun", 
__func__
);

345 
tmp
->
run_£t
 = 1;

353 i‡(
	`msg_com∂ëe
(
tmp
) == -1)

356 
	}
}

359 
	$msg_com∂ëe
(
msg
 *msg)

361 i‡(!
msg
->
‰om_«me_£t
)

363 i‡(!
msg
->
to_«me_£t
)

365 i‡(
msg
->
©èck_£t
 && 
	`kûl_com∂ëe
(msg->
©èck_d©a
) == -1)

368 
i
;

369 
i
 = 0; i < 
msg
->
run_Àngth
; ++i) {

370 i‡(
	`run_com∂ëe
(
msg
->
run_d©a
[
i
]) == -1)

375 
	}
}

378 
	$evèg_unm¨shÆ_msg
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
√ed_èg
, 
msg
 *msg)

380 
uöt32_t
 
èg
;

381 
ªs
 = -1;

383 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

385 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

386 
îr‹
;

388 i‡(
	`msg_unm¨shÆ
(
msg
, 
tmp
) == -1)

389 
îr‹
;

391 
ªs
 = 0;

393 
îr‹
:

394 
	`evbuf„r_‰ì
(
tmp
);

395  (
ªs
);

396 
	}
}

399 
	$evèg_m¨shÆ_msg
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
èg
, c⁄° 
msg
 *msg)

401 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

402 
	`as£π
(
_buf
 !
NULL
);

403 
	`evbuf„r_døö
(
_buf
, -1);

404 
	`msg_m¨shÆ
(
_buf
, 
msg
);

405 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

406 
	`evbuf„r_‰ì
(
_buf
);

407 
	}
}

413 
kûl_ac˚ss_
 
	g__kûl_ba£
 = {

414 
kûl_wóp⁄_assign
,

415 
kûl_wóp⁄_gë
,

416 
kûl_a˘i⁄_assign
,

417 
kûl_a˘i⁄_gë
,

418 
kûl_how_o·í_assign
,

419 
kûl_how_o·í_gë
,

422 
kûl
 *

423 
	$kûl_√w
()

425 
kûl
 *
tmp
;

426 i‡((
tmp
 = 
	`mÆloc
((
kûl
))Ë=
NULL
) {

427 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

428  (
NULL
);

430 
tmp
->
ba£
 = &
__kûl_ba£
;

432 
tmp
->
wóp⁄_d©a
 = 
NULL
;

433 
tmp
->
wóp⁄_£t
 = 0;

435 
tmp
->
a˘i⁄_d©a
 = 
NULL
;

436 
tmp
->
a˘i⁄_£t
 = 0;

438 
tmp
->
how_o·í_d©a
 = 0;

439 
tmp
->
how_o·í_£t
 = 0;

441  (
tmp
);

442 
	}
}

448 
	$kûl_wóp⁄_assign
(
kûl
 *
msg
,

449 c⁄° * 
vÆue
)

451 i‡(
msg
->
wóp⁄_d©a
 !
NULL
)

452 
	`‰ì
(
msg
->
wóp⁄_d©a
);

453 i‡((
msg
->
wóp⁄_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

455 
msg
->
wóp⁄_£t
 = 1;

457 
	}
}

460 
	$kûl_a˘i⁄_assign
(
kûl
 *
msg
,

461 c⁄° * 
vÆue
)

463 i‡(
msg
->
a˘i⁄_d©a
 !
NULL
)

464 
	`‰ì
(
msg
->
a˘i⁄_d©a
);

465 i‡((
msg
->
a˘i⁄_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

467 
msg
->
a˘i⁄_£t
 = 1;

469 
	}
}

472 
	$kûl_how_o·í_assign
(
kûl
 *
msg
, c⁄° 
uöt32_t
 
vÆue
)

474 
msg
->
how_o·í_£t
 = 1;

475 
msg
->
how_o·í_d©a
 = 
vÆue
;

477 
	}
}

480 
	$kûl_wóp⁄_gë
(
kûl
 *
msg
, * *
vÆue
)

482 i‡(
msg
->
wóp⁄_£t
 != 1)

484 *
vÆue
 = 
msg
->
wóp⁄_d©a
;

486 
	}
}

489 
	$kûl_a˘i⁄_gë
(
kûl
 *
msg
, * *
vÆue
)

491 i‡(
msg
->
a˘i⁄_£t
 != 1)

493 *
vÆue
 = 
msg
->
a˘i⁄_d©a
;

495 
	}
}

498 
	$kûl_how_o·í_gë
(
kûl
 *
msg
, 
uöt32_t
 *
vÆue
)

500 i‡(
msg
->
how_o·í_£t
 != 1)

502 *
vÆue
 = 
msg
->
how_o·í_d©a
;

504 
	}
}

507 
	$kûl_˛ór
(
kûl
 *
tmp
)

509 i‡(
tmp
->
wóp⁄_£t
 == 1) {

510 
	`‰ì
 (
tmp
->
wóp⁄_d©a
);

511 
tmp
->
wóp⁄_d©a
 = 
NULL
;

512 
tmp
->
wóp⁄_£t
 = 0;

514 i‡(
tmp
->
a˘i⁄_£t
 == 1) {

515 
	`‰ì
 (
tmp
->
a˘i⁄_d©a
);

516 
tmp
->
a˘i⁄_d©a
 = 
NULL
;

517 
tmp
->
a˘i⁄_£t
 = 0;

519 
tmp
->
how_o·í_£t
 = 0;

520 
	}
}

523 
	$kûl_‰ì
(
kûl
 *
tmp
)

525 i‡(
tmp
->
wóp⁄_d©a
 !
NULL
)

526 
	`‰ì
 (
tmp
->
wóp⁄_d©a
);

527 i‡(
tmp
->
a˘i⁄_d©a
 !
NULL
)

528 
	`‰ì
 (
tmp
->
a˘i⁄_d©a
);

529 
	`‰ì
(
tmp
);

530 
	}
}

533 
	$kûl_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
kûl
 *
tmp
){

534 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
KILL_WEAPON
, 
tmp
->
wóp⁄_d©a
);

535 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
KILL_ACTION
, 
tmp
->
a˘i⁄_d©a
);

536 i‡(
tmp
->
how_o·í_£t
) {

537 
	`evèg_m¨shÆ_öt
(
evbuf
, 
KILL_HOW_OFTEN
, 
tmp
->
how_o·í_d©a
);

539 
	}
}

542 
	$kûl_unm¨shÆ
(
kûl
 *
tmp
, 
evbuf„r
 *
evbuf
)

544 
uöt32_t
 
èg
;

545 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

546 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

548 
èg
) {

550 
KILL_WEAPON
:

552 i‡(
tmp
->
wóp⁄_£t
)

554 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
KILL_WEAPON
, &
tmp
->
wóp⁄_d©a
) == -1) {

555 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ wóp⁄", 
__func__
);

558 
tmp
->
wóp⁄_£t
 = 1;

561 
KILL_ACTION
:

563 i‡(
tmp
->
a˘i⁄_£t
)

565 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
KILL_ACTION
, &
tmp
->
a˘i⁄_d©a
) == -1) {

566 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆá˘i⁄", 
__func__
);

569 
tmp
->
a˘i⁄_£t
 = 1;

572 
KILL_HOW_OFTEN
:

574 i‡(
tmp
->
how_o·í_£t
)

576 i‡(
	`evèg_unm¨shÆ_öt
(
evbuf
, 
KILL_HOW_OFTEN
, &
tmp
->
how_o·í_d©a
) == -1) {

577 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ how_o·í", 
__func__
);

580 
tmp
->
how_o·í_£t
 = 1;

588 i‡(
	`kûl_com∂ëe
(
tmp
) == -1)

591 
	}
}

594 
	$kûl_com∂ëe
(
kûl
 *
msg
)

596 i‡(!
msg
->
wóp⁄_£t
)

598 i‡(!
msg
->
a˘i⁄_£t
)

601 
	}
}

604 
	$evèg_unm¨shÆ_kûl
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
√ed_èg
, 
kûl
 *
msg
)

606 
uöt32_t
 
èg
;

607 
ªs
 = -1;

609 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

611 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

612 
îr‹
;

614 i‡(
	`kûl_unm¨shÆ
(
msg
, 
tmp
) == -1)

615 
îr‹
;

617 
ªs
 = 0;

619 
îr‹
:

620 
	`evbuf„r_‰ì
(
tmp
);

621  (
ªs
);

622 
	}
}

625 
	$evèg_m¨shÆ_kûl
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
èg
, c⁄° 
kûl
 *
msg
)

627 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

628 
	`as£π
(
_buf
 !
NULL
);

629 
	`evbuf„r_døö
(
_buf
, -1);

630 
	`kûl_m¨shÆ
(
_buf
, 
msg
);

631 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

632 
	`evbuf„r_‰ì
(
_buf
);

633 
	}
}

639 
run_ac˚ss_
 
	g__run_ba£
 = {

640 
run_how_assign
,

641 
run_how_gë
,

642 
run_some_byãs_assign
,

643 
run_some_byãs_gë
,

644 
run_fixed_byãs_assign
,

645 
run_fixed_byãs_gë
,

648 
run
 *

649 
	$run_√w
()

651 
run
 *
tmp
;

652 i‡((
tmp
 = 
	`mÆloc
((
run
))Ë=
NULL
) {

653 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

654  (
NULL
);

656 
tmp
->
ba£
 = &
__run_ba£
;

658 
tmp
->
how_d©a
 = 
NULL
;

659 
tmp
->
how_£t
 = 0;

661 
tmp
->
some_byãs_d©a
 = 
NULL
;

662 
tmp
->
some_byãs_Àngth
 = 0;

663 
tmp
->
some_byãs_£t
 = 0;

665 
	`mem£t
(
tmp
->
fixed_byãs_d©a
, 0, (tmp->fixed_bytes_data));

666 
tmp
->
fixed_byãs_£t
 = 0;

668  (
tmp
);

669 
	}
}

675 
	$run_how_assign
(
run
 *
msg
,

676 c⁄° * 
vÆue
)

678 i‡(
msg
->
how_d©a
 !
NULL
)

679 
	`‰ì
(
msg
->
how_d©a
);

680 i‡((
msg
->
how_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

682 
msg
->
how_£t
 = 1;

684 
	}
}

687 
	$run_some_byãs_assign
(
run
 *
msg
, c⁄° 
uöt8_t
 * 
vÆue
, 
uöt32_t
 
Àn
)

689 i‡(
msg
->
some_byãs_d©a
 !
NULL
)

690 
	`‰ì
 (
msg
->
some_byãs_d©a
);

691 
msg
->
some_byãs_d©a
 = 
	`mÆloc
(
Àn
);

692 i‡(
msg
->
some_byãs_d©a
 =
NULL
)

694 
msg
->
some_byãs_£t
 = 1;

695 
msg
->
some_byãs_Àngth
 = 
Àn
;

696 
	`mem˝y
(
msg
->
some_byãs_d©a
, 
vÆue
, 
Àn
);

698 
	}
}

701 
	$run_fixed_byãs_assign
(
run
 *
msg
, c⁄° 
uöt8_t
 *
vÆue
)

703 
msg
->
fixed_byãs_£t
 = 1;

704 
	`mem˝y
(
msg
->
fixed_byãs_d©a
, 
vÆue
, 24);

706 
	}
}

709 
	$run_how_gë
(
run
 *
msg
, * *
vÆue
)

711 i‡(
msg
->
how_£t
 != 1)

713 *
vÆue
 = 
msg
->
how_d©a
;

715 
	}
}

718 
	$run_some_byãs_gë
(
run
 *
msg
, 
uöt8_t
 * *
vÆue
, 
uöt32_t
 *
∂í
)

720 i‡(
msg
->
some_byãs_£t
 != 1)

722 *
vÆue
 = 
msg
->
some_byãs_d©a
;

723 *
∂í
 = 
msg
->
some_byãs_Àngth
;

725 
	}
}

728 
	$run_fixed_byãs_gë
(
run
 *
msg
, 
uöt8_t
 **
vÆue
)

730 i‡(
msg
->
fixed_byãs_£t
 != 1)

732 *
vÆue
 = 
msg
->
fixed_byãs_d©a
;

734 
	}
}

737 
	$run_˛ór
(
run
 *
tmp
)

739 i‡(
tmp
->
how_£t
 == 1) {

740 
	`‰ì
 (
tmp
->
how_d©a
);

741 
tmp
->
how_d©a
 = 
NULL
;

742 
tmp
->
how_£t
 = 0;

744 i‡(
tmp
->
some_byãs_£t
 == 1) {

745 
	`‰ì
 (
tmp
->
some_byãs_d©a
);

746 
tmp
->
some_byãs_d©a
 = 
NULL
;

747 
tmp
->
some_byãs_Àngth
 = 0;

748 
tmp
->
some_byãs_£t
 = 0;

750 
tmp
->
fixed_byãs_£t
 = 0;

751 
	`mem£t
(
tmp
->
fixed_byãs_d©a
, 0, (tmp->fixed_bytes_data));

752 
	}
}

755 
	$run_‰ì
(
run
 *
tmp
)

757 i‡(
tmp
->
how_d©a
 !
NULL
)

758 
	`‰ì
 (
tmp
->
how_d©a
);

759 i‡(
tmp
->
some_byãs_d©a
 !
NULL
)

760 
	`‰ì
 (
tmp
->
some_byãs_d©a
);

761 
	`‰ì
(
tmp
);

762 
	}
}

765 
	$run_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
run
 *
tmp
){

766 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
RUN_HOW
, 
tmp
->
how_d©a
);

767 i‡(
tmp
->
some_byãs_£t
) {

768 
	`evèg_m¨shÆ
(
evbuf
, 
RUN_SOME_BYTES
, 
tmp
->
some_byãs_d©a
,Åmp->
some_byãs_Àngth
);

770 
	`evèg_m¨shÆ
(
evbuf
, 
RUN_FIXED_BYTES
, 
tmp
->
fixed_byãs_d©a
, (tmp->fixed_bytes_data));

771 
	}
}

774 
	$run_unm¨shÆ
(
run
 *
tmp
, 
evbuf„r
 *
evbuf
)

776 
uöt32_t
 
èg
;

777 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

778 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

780 
èg
) {

782 
RUN_HOW
:

784 i‡(
tmp
->
how_£t
)

786 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
RUN_HOW
, &
tmp
->
how_d©a
) == -1) {

787 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ how", 
__func__
);

790 
tmp
->
how_£t
 = 1;

793 
RUN_SOME_BYTES
:

795 i‡(
tmp
->
some_byãs_£t
)

797 i‡(
	`evèg_∑ylﬂd_Àngth
(
evbuf
, &
tmp
->
some_byãs_Àngth
) == -1)

799 i‡(
tmp
->
some_byãs_Àngth
 > 
	`EVBUFFER_LENGTH
(
evbuf
))

801 i‡((
tmp
->
some_byãs_d©a
 = 
	`mÆloc
—mp->
some_byãs_Àngth
)Ë=
NULL
)

803 i‡(
	`evèg_unm¨shÆ_fixed
(
evbuf
, 
RUN_SOME_BYTES
, 
tmp
->
some_byãs_d©a
,Åmp->
some_byãs_Àngth
) == -1) {

804 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ some_byãs", 
__func__
);

807 
tmp
->
some_byãs_£t
 = 1;

810 
RUN_FIXED_BYTES
:

812 i‡(
tmp
->
fixed_byãs_£t
)

814 i‡(
	`evèg_unm¨shÆ_fixed
(
evbuf
, 
RUN_FIXED_BYTES
, 
tmp
->
fixed_byãs_d©a
, (tmp->fixed_bytes_data)) == -1) {

815 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ fixed_byãs", 
__func__
);

818 
tmp
->
fixed_byãs_£t
 = 1;

826 i‡(
	`run_com∂ëe
(
tmp
) == -1)

829 
	}
}

832 
	$run_com∂ëe
(
run
 *
msg
)

834 i‡(!
msg
->
how_£t
)

836 i‡(!
msg
->
fixed_byãs_£t
)

839 
	}
}

842 
	$evèg_unm¨shÆ_run
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
√ed_èg
, 
run
 *
msg
)

844 
uöt32_t
 
èg
;

845 
ªs
 = -1;

847 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

849 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

850 
îr‹
;

852 i‡(
	`run_unm¨shÆ
(
msg
, 
tmp
) == -1)

853 
îr‹
;

855 
ªs
 = 0;

857 
îr‹
:

858 
	`evbuf„r_‰ì
(
tmp
);

859  (
ªs
);

860 
	}
}

863 
	$evèg_m¨shÆ_run
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
èg
, c⁄° 
run
 *
msg
)

865 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

866 
	`as£π
(
_buf
 !
NULL
);

867 
	`evbuf„r_døö
(
_buf
, -1);

868 
	`run_m¨shÆ
(
_buf
, 
msg
);

869 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

870 
	`evbuf„r_‰ì
(
_buf
);

871 
	}
}

	@test/regress.gen.h

5 #i‚de‡
___REGRESS_RPC_


6 
	#___REGRESS_RPC_


	)

8 
	~<evít-c⁄fig.h
>

9 #ifde‡
_EVENT_HAVE_STDINT_H


10 
	~<°döt.h
>

12 
	#EVTAG_HAS
(
msg
, 
membî
Ë((msg)->membî##
_£t
 =1)

	)

13 
	#EVTAG_ASSIGN
(
msg
, 
membî
, 
¨gs
...Ë(*(msg)->
ba£
->membî##
_assign
)(msg, ##árgs)

	)

14 
	#EVTAG_GET
(
msg
, 
membî
, 
¨gs
...Ë(*(msg)->
ba£
->membî##
_gë
)(msg, ##árgs)

	)

15 
	#EVTAG_ADD
(
msg
, 
membî
Ë(*(msg)->
ba£
->membî##
_add
)(msg)

	)

16 
	#EVTAG_LEN
(
msg
, 
membî
Ë((msg)->membî##
_Àngth
)

	)

18 
	gmsg
;

19 
	gkûl
;

20 
	grun
;

23 
	emsg_
 {

24 
	mMSG_FROM_NAME
=1,

25 
	mMSG_TO_NAME
=2,

26 
	mMSG_ATTACK
=3,

27 
	mMSG_RUN
=4,

28 
	mMSG_MAX_TAGS


32 
	smsg_ac˚ss_
 {

33 (*
	m‰om_«me_assign
)(
	mmsg
 *, const *);

34 (*
	m‰om_«me_gë
)(
	mmsg
 *, * *);

35 (*
	mto_«me_assign
)(
	mmsg
 *, const *);

36 (*
	mto_«me_gë
)(
	mmsg
 *, * *);

37 (*
	m©èck_assign
)(
	mmsg
 *, c⁄° 
	mkûl
*);

38 (*
	m©èck_gë
)(
	mmsg
 *, 
	mkûl
* *);

39 (*
	mrun_assign
)(
	mmsg
 *, , c⁄° 
	mrun
 *);

40 (*
	mrun_gë
)(
	mmsg
 *, , 
	mrun
 * *);

41 
	mrun
 * (*
	mrun_add
)(
	mmsg
 *);

44 
	smsg
 {

45 
msg_ac˚ss_
 *
	mba£
;

47 *
	m‰om_«me_d©a
;

48 *
	mto_«me_d©a
;

49 
kûl
* 
	m©èck_d©a
;

50 
run
 **
	mrun_d©a
;

51 
	mrun_Àngth
;

52 
	mrun_num_Æloˇãd
;

54 
uöt8_t
 
	m‰om_«me_£t
;

55 
uöt8_t
 
	mto_«me_£t
;

56 
uöt8_t
 
	m©èck_£t
;

57 
uöt8_t
 
	mrun_£t
;

60 
msg
 *
msg_√w
();

61 
msg_‰ì
(
msg
 *);

62 
msg_˛ór
(
msg
 *);

63 
msg_m¨shÆ
(
evbuf„r
 *, c⁄° 
msg
 *);

64 
msg_unm¨shÆ
(
msg
 *, 
evbuf„r
 *);

65 
msg_com∂ëe
(
msg
 *);

66 
evèg_m¨shÆ_msg
(
evbuf„r
 *, 
uöt32_t
,

67 c⁄° 
msg
 *);

68 
evèg_unm¨shÆ_msg
(
evbuf„r
 *, 
uöt32_t
,

69 
msg
 *);

70 
msg_‰om_«me_assign
(
msg
 *, const *);

71 
msg_‰om_«me_gë
(
msg
 *, * *);

72 
msg_to_«me_assign
(
msg
 *, const *);

73 
msg_to_«me_gë
(
msg
 *, * *);

74 
msg_©èck_assign
(
msg
 *, c⁄° 
kûl
*);

75 
msg_©èck_gë
(
msg
 *, 
kûl
* *);

76 
msg_run_assign
(
msg
 *, , c⁄° 
run
 *);

77 
msg_run_gë
(
msg
 *, , 
run
 * *);

78 
run
 * 
msg_run_add
(
msg
 *);

82 
	ekûl_
 {

83 
	mKILL_WEAPON
=65825,

84 
	mKILL_ACTION
=2,

85 
	mKILL_HOW_OFTEN
=3,

86 
	mKILL_MAX_TAGS


90 
	skûl_ac˚ss_
 {

91 (*
	mwóp⁄_assign
)(
	mkûl
 *, const *);

92 (*
	mwóp⁄_gë
)(
	mkûl
 *, * *);

93 (*
	ma˘i⁄_assign
)(
	mkûl
 *, const *);

94 (*
	ma˘i⁄_gë
)(
	mkûl
 *, * *);

95 (*
	mhow_o·í_assign
)(
	mkûl
 *, c⁄° 
	muöt32_t
);

96 (*
	mhow_o·í_gë
)(
	mkûl
 *, 
	muöt32_t
 *);

99 
	skûl
 {

100 
kûl_ac˚ss_
 *
	mba£
;

102 *
	mwóp⁄_d©a
;

103 *
	ma˘i⁄_d©a
;

104 
uöt32_t
 
	mhow_o·í_d©a
;

106 
uöt8_t
 
	mwóp⁄_£t
;

107 
uöt8_t
 
	ma˘i⁄_£t
;

108 
uöt8_t
 
	mhow_o·í_£t
;

111 
kûl
 *
kûl_√w
();

112 
kûl_‰ì
(
kûl
 *);

113 
kûl_˛ór
(
kûl
 *);

114 
kûl_m¨shÆ
(
evbuf„r
 *, c⁄° 
kûl
 *);

115 
kûl_unm¨shÆ
(
kûl
 *, 
evbuf„r
 *);

116 
kûl_com∂ëe
(
kûl
 *);

117 
evèg_m¨shÆ_kûl
(
evbuf„r
 *, 
uöt32_t
,

118 c⁄° 
kûl
 *);

119 
evèg_unm¨shÆ_kûl
(
evbuf„r
 *, 
uöt32_t
,

120 
kûl
 *);

121 
kûl_wóp⁄_assign
(
kûl
 *, const *);

122 
kûl_wóp⁄_gë
(
kûl
 *, * *);

123 
kûl_a˘i⁄_assign
(
kûl
 *, const *);

124 
kûl_a˘i⁄_gë
(
kûl
 *, * *);

125 
kûl_how_o·í_assign
(
kûl
 *, c⁄° 
uöt32_t
);

126 
kûl_how_o·í_gë
(
kûl
 *, 
uöt32_t
 *);

130 
	erun_
 {

131 
	mRUN_HOW
=1,

132 
	mRUN_SOME_BYTES
=2,

133 
	mRUN_FIXED_BYTES
=3,

134 
	mRUN_MAX_TAGS


138 
	srun_ac˚ss_
 {

139 (*
	mhow_assign
)(
	mrun
 *, const *);

140 (*
	mhow_gë
)(
	mrun
 *, * *);

141 (*
	msome_byãs_assign
)(
	mrun
 *, c⁄° 
	muöt8_t
 *, 
	muöt32_t
);

142 (*
	msome_byãs_gë
)(
	mrun
 *, 
	muöt8_t
 * *, 
	muöt32_t
 *);

143 (*
	mfixed_byãs_assign
)(
	mrun
 *, c⁄° 
	muöt8_t
 *);

144 (*
	mfixed_byãs_gë
)(
	mrun
 *, 
	muöt8_t
 **);

147 
	srun
 {

148 
run_ac˚ss_
 *
	mba£
;

150 *
	mhow_d©a
;

151 
uöt8_t
 *
	msome_byãs_d©a
;

152 
uöt32_t
 
	msome_byãs_Àngth
;

153 
uöt8_t
 
	mfixed_byãs_d©a
[24];

155 
uöt8_t
 
	mhow_£t
;

156 
uöt8_t
 
	msome_byãs_£t
;

157 
uöt8_t
 
	mfixed_byãs_£t
;

160 
run
 *
run_√w
();

161 
run_‰ì
(
run
 *);

162 
run_˛ór
(
run
 *);

163 
run_m¨shÆ
(
evbuf„r
 *, c⁄° 
run
 *);

164 
run_unm¨shÆ
(
run
 *, 
evbuf„r
 *);

165 
run_com∂ëe
(
run
 *);

166 
evèg_m¨shÆ_run
(
evbuf„r
 *, 
uöt32_t
,

167 c⁄° 
run
 *);

168 
evèg_unm¨shÆ_run
(
evbuf„r
 *, 
uöt32_t
,

169 
run
 *);

170 
run_how_assign
(
run
 *, const *);

171 
run_how_gë
(
run
 *, * *);

172 
run_some_byãs_assign
(
run
 *, c⁄° 
uöt8_t
 *, 
uöt32_t
);

173 
run_some_byãs_gë
(
run
 *, 
uöt8_t
 * *, 
uöt32_t
 *);

174 
run_fixed_byãs_assign
(
run
 *, c⁄° 
uöt8_t
 *);

175 
run_fixed_byãs_gë
(
run
 *, 
uöt8_t
 **);

	@test/regress.h

27 #i‚de‡
_REGRESS_H_


28 
	#_REGRESS_H_


	)

30 #ifde‡
__˝lu•lus


34 
hâp_suôe
();

35 
hâp_basic_ã°
();

37 
Ωc_suôe
();

39 
dns_suôe
();

41 #ifde‡
__˝lu•lus


	@test/regress_dns.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sys/sig«l.h
>

46 
	~<√töë/ö.h
>

47 
	~<¨∑/öë.h
>

48 
	~<uni°d.h
>

50 #ifde‡
HAVE_NETINET_IN6_H


51 
	~<√töë/ö6.h
>

53 #ifde‡
HAVE_NETDB_H


54 
	~<√tdb.h
>

56 
	~<f˙é.h
>

57 
	~<°dlib.h
>

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~<î∫o.h
>

62 
	~"evít.h
"

63 
	~"evdns.h
"

64 
	~"log.h
"

66 
	gdns_ok
 = 0;

67 
	gdns_îr
 = 0;

69 
dns_suôe
();

72 
	$dns_gëho°by«me_cb
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

73 *
addªs£s
, *
¨g
)

75 
dns_ok
 = 
dns_îr
 = 0;

77 i‡(
ªsu…
 =
DNS_ERR_TIMEOUT
) {

78 
	`Ârötf
(
°dout
, "[Timed out] ");

79 
dns_îr
 = 
ªsu…
;

80 
out
;

83 i‡(
ªsu…
 !
DNS_ERR_NONE
) {

84 
	`Ârötf
(
°dout
, "[Eº‹ codê%d] ", 
ªsu…
);

85 
out
;

88 
	`Ârötf
(
°dîr
, "ty≥: %d, cou¡: %d,Åé: %d: ", 
ty≥
, 
cou¡
, 
âl
);

90 
ty≥
) {

91 
DNS_IPv6_AAAA
: {

92 #i‡
	`deföed
(
HAVE_STRUCT_IN6_ADDR
Ë&& deföed(
HAVE_INET_NTOP
)

93 
ö6_addr
 *
ö6_addrs
 = 
addªs£s
;

94 
buf
[
INET6_ADDRSTRLEN
+1];

95 
i
;

97 i‡(
âl
 < 0)

98 
out
;

99 
i
 = 0; i < 
cou¡
; ++i) {

100 c⁄° *
b
 = 
	`öë_¡›
(
AF_INET6
, &
ö6_addrs
[
i
], 
buf
,(buf));

101 i‡(
b
)

102 
	`Ârötf
(
°dîr
, "%†", 
b
);

104 
	`Ârötf
(
°dîr
, "%†", 
	`°ªº‹
(
î∫o
));

109 
DNS_IPv4_A
: {

110 
ö_addr
 *
ö_addrs
 = 
addªs£s
;

111 
i
;

113 i‡(
âl
 < 0)

114 
out
;

115 
i
 = 0; i < 
cou¡
; ++i)

116 
	`Ârötf
(
°dîr
, "%†", 
	`öë_¡ﬂ
(
ö_addrs
[
i
]));

119 
DNS_PTR
:

121 i‡(
cou¡
 != 1)

122 
out
;

124 
	`Ârötf
(
°dîr
, "%†", *(**)
addªs£s
);

127 
out
;

130 
dns_ok
 = 
ty≥
;

132 
out
:

133 
	`evít_lo›exô
(
NULL
);

134 
	}
}

137 
	$dns_gëho°by«me
()

139 
	`Ârötf
(
°dout
, "Simple DNSÑesolve: ");

140 
dns_ok
 = 0;

141 
	`evdns_ªsﬁve_ùv4
("www.m⁄key.‹g", 0, 
dns_gëho°by«me_cb
, 
NULL
);

142 
	`evít_di•©ch
();

144 i‡(
dns_ok
 =
DNS_IPv4_A
) {

145 
	`Ârötf
(
°dout
, "OK\n");

147 
	`Ârötf
(
°dout
, "FAILED\n");

148 
	`exô
(1);

150 
	}
}

153 
	$dns_gëho°by«me6
()

155 
	`Ârötf
(
°dout
, "IPv6 DNSÑesolve: ");

156 
dns_ok
 = 0;

157 
	`evdns_ªsﬁve_ùv6
("www.õtf.‹g", 0, 
dns_gëho°by«me_cb
, 
NULL
);

158 
	`evít_di•©ch
();

160 i‡(
dns_ok
 =
DNS_IPv6_AAAA
) {

161 
	`Ârötf
(
°dout
, "OK\n");

162 } i‡(!
dns_ok
 && 
dns_îr
 =
DNS_ERR_TIMEOUT
) {

163 
	`Ârötf
(
°dout
, "SKIPPED\n");

165 
	`Ârötf
(
°dout
, "FAILED (%d)\n", 
dns_ok
);

166 
	`exô
(1);

168 
	}
}

171 
	$dns_gëho°byaddr
()

173 
ö_addr
 
ö
;

174 
ö
.
s_addr
 = 
	`ht⁄l
(0x7f000001ul);

175 
	`Ârötf
(
°dout
, "SimpleÑeverse DNSÑesolve: ");

176 
dns_ok
 = 0;

177 
	`evdns_ªsﬁve_ªvî£
(&
ö
, 0, 
dns_gëho°by«me_cb
, 
NULL
);

178 
	`evít_di•©ch
();

180 i‡(
dns_ok
 =
DNS_PTR
) {

181 
	`Ârötf
(
°dout
, "OK\n");

183 
	`Ârötf
(
°dout
, "FAILED\n");

184 
	`exô
(1);

186 
	}
}

188 
	gn_£rvî_ª•⁄£s
 = 0;

191 
	$dns_£rvî_ªque°_cb
(
evdns_£rvî_ªque°
 *
ªq
, *
d©a
)

193 
i
, 
r
;

194 c⁄° 
TEST_ARPA
[] = "11.11.168.192.in-addr.arpa";

195 
i
 = 0; i < 
ªq
->
nque°i⁄s
; ++i) {

196 
ö_addr
 
™s
;

197 
™s
.
s_addr
 = 
	`ht⁄l
(0xc0a80b0bUL);

198 i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_A
 &&

199 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

200 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, "zz.example.com")) {

201 
r
 = 
	`evdns_£rvî_ªque°_add_a_ª∂y
(
ªq
, "zz.example.com",

202 1, &
™s
.
s_addr
, 12345);

203 i‡(
r
<0)

204 
dns_ok
 = 0;

205 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_AAAA
 &&

206 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

207 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, "zz.example.com")) {

208 
addr6
[17] = "abcdefghijklmnop";

209 
r
 = 
	`evdns_£rvî_ªque°_add_ØØ_ª∂y
(
ªq
, "zz.example.com",

210 1, 
addr6
, 123);

211 i‡(
r
<0)

212 
dns_ok
 = 0;

213 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_PTR
 &&

214 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

215 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, 
TEST_ARPA
)) {

216 
r
 = 
	`evdns_£rvî_ªque°_add_±r_ª∂y
(
ªq
, 
NULL
, 
TEST_ARPA
,

218 i‡(
r
<0)

219 
dns_ok
 = 0;

221 
	`Ârötf
(
°dout
, "Unexpected question %d %d \"%s\" ",

222 
ªq
->
que°i⁄s
[
i
]->
ty≥
,

223 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
,

224 
ªq
->
que°i⁄s
[
i
]->
«me
);

225 
dns_ok
 = 0;

228 
r
 = 
	`evdns_£rvî_ªque°_ª•⁄d
(
ªq
, 0);

229 i‡(
r
<0) {

230 
	`Ârötf
(
°dout
, "Couldn't sendÑeply. ");

231 
dns_ok
 = 0;

233 
	}
}

236 
	$dns_£rvî_gëho°by«me_cb
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

237 *
addªs£s
, *
¨g
)

239 i‡(
ªsu…
 !
DNS_ERR_NONE
) {

240 
	`Ârötf
(
°dout
, "U√x≥˘edÑesu… %d. ", 
ªsu…
);

241 
dns_ok
 = 0;

242 
out
;

244 i‡(
cou¡
 != 1) {

245 
	`Ârötf
(
°dout
, "U√x≥˘edánswî cou¡ %d. ", 
cou¡
);

246 
dns_ok
 = 0;

247 
out
;

249 
ty≥
) {

250 
DNS_IPv4_A
: {

251 
ö_addr
 *
ö_addrs
 = 
addªs£s
;

252 i‡(
ö_addrs
[0].
s_addr
 !
	`ht⁄l
(0xc0a80b0bULË|| 
âl
 != 12345) {

253 
	`Ârötf
(
°dout
, "Bad IPv4Ñesponse \"%s\" %d. ",

254 
	`öë_¡ﬂ
(
ö_addrs
[0]), 
âl
);

255 
dns_ok
 = 0;

256 
out
;

260 
DNS_IPv6_AAAA
: {

261 #i‡
	`deföed
 (
HAVE_STRUCT_IN6_ADDR
Ë&& deföed(
HAVE_INET_NTOP
)

262 
ö6_addr
 *
ö6_addrs
 = 
addªs£s
;

263 
buf
[
INET6_ADDRSTRLEN
+1];

264 i‡(
	`memcmp
(&
ö6_addrs
[0].
s6_addr
, "abcdefghijklmnop", 16)

265 || 
âl
 != 123) {

266 c⁄° *
b
 = 
	`öë_¡›
(
AF_INET6
, &
ö6_addrs
[0],
buf
,(buf));

267 
	`Ârötf
(
°dout
, "Bad IPv6Ñe•⁄£ \"%s\" %d. ", 
b
, 
âl
);

268 
dns_ok
 = 0;

269 
out
;

274 
DNS_PTR
: {

275 **
addrs
 = 
addªs£s
;

276 i‡(
	`°rcmp
(
addrs
[0], "ZZ.EXAMPLE.COM"Ë|| 
âl
 != 54321) {

277 
	`Ârötf
(
°dout
, "Bad PTRÑesponse \"%s\" %d. ",

278 
addrs
[0], 
âl
);

279 
dns_ok
 = 0;

280 
out
;

285 
	`Ârötf
(
°dout
, "BadÑe•⁄£Åy≥ %d. ", 
ty≥
);

286 
dns_ok
 = 0;

289 
out
:

290 i‡(++
n_£rvî_ª•⁄£s
 == 3) {

291 
	`evít_lo›exô
(
NULL
);

293 
	}
}

296 
	$dns_£rvî
()

298 
sock
;

299 
sockaddr_ö
 
my_addr
;

300 
evdns_£rvî_p‹t
 *
p‹t
;

301 
ö_addr
 
ªsﬁve_addr
;

303 
dns_ok
 = 1;

304 
	`Ârötf
(
°dout
, "DNS server support: ");

308 
	`evdns_«me£rvî_ù_add
("127.0.0.1:35353");

309 i‡(
	`evdns_cou¡_«me£rvîs
() != 1) {

310 
	`Ârötf
(
°dout
, "Couldn't set up.\n");

311 
	`exô
(1);

315 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

316 i‡(
sock
 == -1) {

317 
	`≥º‹
("socket");

318 
	`exô
(1);

320 #ifde‡
WIN32


322 
u_l⁄g
 
n⁄blockög
 = 1;

323 
	`io˘lsockë
(
sock
, 
FIONBIO
, &
n⁄blockög
);

326 
	`f˙é
(
sock
, 
F_SETFL
, 
O_NONBLOCK
);

328 
	`mem£t
(&
my_addr
, 0, (my_addr));

329 
my_addr
.
sö_Ámûy
 = 
AF_INET
;

330 
my_addr
.
sö_p‹t
 = 
	`ht⁄s
(35353);

331 
my_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(0x7f000001UL);

332 i‡(
	`böd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr)) < 0) {

333 
	`≥º‹
("bind");

334 
	`exô
 (1);

336 
p‹t
 = 
	`evdns_add_£rvî_p‹t
(
sock
, 0, 
dns_£rvî_ªque°_cb
, 
NULL
);

339 
	`evdns_ªsﬁve_ùv4
("zz.exam∂e.com", 
DNS_QUERY_NO_SEARCH
,

340 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

341 
	`evdns_ªsﬁve_ùv6
("zz.exam∂e.com", 
DNS_QUERY_NO_SEARCH
,

342 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

343 
ªsﬁve_addr
.
s_addr
 = 
	`ht⁄l
(0xc0a80b0bUL);

344 
	`evdns_ªsﬁve_ªvî£
(&
ªsﬁve_addr
, 0,

345 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

347 
	`evít_di•©ch
();

349 i‡(
dns_ok
) {

350 
	`Ârötf
(
°dout
, "OK\n");

352 
	`Ârötf
(
°dout
, "FAILED\n");

353 
	`exô
(1);

356 
	`evdns_˛o£_£rvî_p‹t
(
p‹t
);

357 
	`evdns_shutdown
(0);

358 #ifde‡
WIN32


359 
	`˛o£sockë
(
sock
);

361 
	`˛o£
(
sock
);

363 
	}
}

366 
	$dns_suôe
()

368 
	`dns_£rvî
();

370 
	`evdns_öô
();

371 
	`dns_gëho°by«me
();

372 
	`dns_gëho°by«me6
();

373 
	`dns_gëho°byaddr
();

375 
	`evdns_shutdown
(0);

376 
	}
}

	@test/regress_http.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sys/sig«l.h
>

46 
	~<uni°d.h
>

47 
	~<√tdb.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<î∫o.h
>

55 
	~"evít.h
"

56 
	~"evhâp.h
"

57 
	~"log.h
"

58 
	~"hâp-öã∫Æ.h
"

60 
∑ú
[];

61 
ã°_ok
;

63 
evhâp
 *
	ghâp
;

65 
evít_ba£
 *
	gba£
;

67 
hâp_suôe
();

69 
hâp_basic_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

70 
hâp_chunked_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

71 
hâp_po°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

72 
hâp_di•©chî_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

73 
hâp_œrge_dñay_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

75 
evhâp
 *

76 
	$hâp_£tup
(*
µ‹t
, 
evít_ba£
 *
ba£
)

78 
i
;

79 
evhâp
 *
myhâp
;

80 
p‹t
 = -1;

83 
myhâp
 = 
	`evhâp_√w
(
ba£
);

84 
i
 = 0; i < 50; ++i) {

85 i‡(
	`evhâp_böd_sockë
(
myhâp
, "127.0.0.1", 8080 + 
i
) != -1) {

86 
p‹t
 = 8080 + 
i
;

91 i‡(
p‹t
 == -1)

92 
	`evít_îrx
(1, "CouldÇot start web server");

95 
	`evhâp_£t_cb
(
myhâp
, "/ã°", 
hâp_basic_cb
, 
NULL
);

96 
	`evhâp_£t_cb
(
myhâp
, "/chunked", 
hâp_chunked_cb
, 
NULL
);

97 
	`evhâp_£t_cb
(
myhâp
, "/po°ô", 
hâp_po°_cb
, 
NULL
);

98 
	`evhâp_£t_cb
(
myhâp
, "/œrgedñay", 
hâp_œrge_dñay_cb
, 
NULL
);

99 
	`evhâp_£t_cb
(
myhâp
, "/", 
hâp_di•©chî_cb
, 
NULL
);

101 *
µ‹t
 = 
p‹t
;

102  (
myhâp
);

103 
	}
}

105 #i‚de‡
NI_MAXSERV


106 
	#NI_MAXSERV
 1024

	)

110 
	$hâp_c⁄√˘
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

113 #ifde‡
WIN32


114 
ho°ít
 *
he
;

115 
sockaddr_ö
 
sö
;

117 
addröfo
 
ai
, *
aô›
;

118 
°Ω‹t
[
NI_MAXSERV
];

120 
sockaddr
 *
ß
;

121 
¶í
;

122 
fd
;

124 #ifde‡
WIN32


125 i‡(!(
he
 = 
	`gëho°by«me
(
addªss
))) {

126 
	`evít_w¨n
("gethostbyname");

128 
	`mem˝y
(&
sö
.
sö_addr
, 
he
->
h_addr_li°
[0], he->
h_Àngth
);

129 
sö
.
sö_Ámûy
 = 
AF_INET
;

130 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

131 
¶í
 = (
sockaddr_ö
);

132 
ß
 = (
sockaddr
*)&
sö
;

134 
	`mem£t
(&
ai
, 0,  (ai));

135 
ai
.
ai_Ámûy
 = 
AF_INET
;

136 
ai
.
ai_sockty≥
 = 
SOCK_STREAM
;

137 
	`¢¥ötf
(
°Ω‹t
,  (°Ω‹t), "%d", 
p‹t
);

138 i‡(
	`gëaddröfo
(
addªss
, 
°Ω‹t
, &
ai
, &
aô›
) != 0) {

139 
	`evít_w¨n
("getaddrinfo");

142 
ß
 = 
aô›
->
ai_addr
;

143 
¶í
 = 
aô›
->
ai_addæí
;

146 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

147 i‡(
fd
 == -1)

148 
	`evít_îr
(1, "socket failed");

150 i‡(
	`c⁄√˘
(
fd
, 
ß
, 
¶í
) == -1)

151 
	`evít_îr
(1, "connect failed");

153 #i‚de‡
WIN32


154 
	`‰ìaddröfo
(
aô›
);

157  (
fd
);

158 
	}
}

161 
	$hâp_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

163 c⁄° *
wh©
 = "This is funny";

165 
	`evít_debug
(("%s: %s\n", 
__func__
, 
	`EVBUFFER_DATA
(
bev
->
öput
)));

167 i‡(
	`evbuf„r_föd
(
bev
->
öput
,

168 (c⁄° *Ë
wh©
, 
	`°æí
(wh©)Ë!
NULL
) {

169 
evhâp_ªque°
 *
ªq
 = 
	`evhâp_ªque°_√w
(
NULL
, NULL);

170 
mesßge_ªad_°©us
 
d⁄e
;

172 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

173 
d⁄e
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
bev
->
öput
);

174 i‡(
d⁄e
 !
ALL_DATA_READ
)

175 
out
;

177 
d⁄e
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
bev
->
öput
);

178 i‡(
d⁄e
 !
ALL_DATA_READ
)

179 
out
;

181 i‡(
d⁄e
 == 1 &&

182 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,

183 "C⁄ã¡-Ty≥"Ë!
NULL
)

184 
ã°_ok
++;

186 
out
:

187 
	`evhâp_ªque°_‰ì
(
ªq
);

188 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

189 i‡(
ba£
)

190 
	`evít_ba£_lo›exô
(
ba£
, 
NULL
);

192 
	`evít_lo›exô
(
NULL
);

194 
	}
}

197 
	$hâp_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

199 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0) {

201 
	`buf„ªvít_íabÀ
(
bev
, 
EV_READ
);

202 
ã°_ok
++;

204 
	}
}

207 
	$hâp_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

209 
ã°_ok
 = -2;

210 
	`evít_lo›exô
(
NULL
);

211 
	}
}

214 
	$hâp_basic_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

216 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

217 
em±y
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Em±y"Ë!
NULL
;

218 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

219 
	`evbuf„r_add_¥ötf
(
evb
, "This is funny");

223 c⁄° *
mu…i
 =

224 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,"X-multi");

225 i‡(
mu…i
) {

226 i‡(
	`°rcmp
("END", 
mu…i
 + 
	`°æí
(multi) - 3) == 0)

227 
ã°_ok
++;

228 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Last"))

229 
ã°_ok
++;

234 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Negative"))

235 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

239 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Everything is fine",

240 !
em±y
 ? 
evb
 : 
NULL
);

242 
	`evbuf„r_‰ì
(
evb
);

243 
	}
}

245 c⁄°* c⁄° 
	gCHUNKS
[] = {

251 
	schunk_ªq_°©e
 {

252 
evhâp_ªque°
 *
	mªq
;

253 
	mi
;

257 
	$hâp_chunked_åickÀ_cb
(
fd
, 
evíts
, *
¨g
)

259 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

260 
chunk_ªq_°©e
 *
°©e
 = 
¨g
;

261 
timevÆ
 
whí
 = { 0, 0 };

263 
	`evbuf„r_add_¥ötf
(
evb
, "%s", 
CHUNKS
[
°©e
->
i
]);

264 
	`evhâp_£nd_ª∂y_chunk
(
°©e
->
ªq
, 
evb
);

265 
	`evbuf„r_‰ì
(
evb
);

267 i‡(++
°©e
->
i
 < (
CHUNKS
)/(CHUNKS[0])) {

268 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
,

269 
hâp_chunked_åickÀ_cb
, 
°©e
, &
whí
);

271 
	`evhâp_£nd_ª∂y_íd
(
°©e
->
ªq
);

272 
	`‰ì
(
°©e
);

274 
	}
}

277 
	$hâp_chunked_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

279 
timevÆ
 
whí
 = { 0, 0 };

280 
chunk_ªq_°©e
 *
°©e
 = 
	`mÆloc
((chunk_req_state));

281 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

283 
	`mem£t
(
°©e
, 0, (
chunk_ªq_°©e
));

284 
°©e
->
ªq
 =Ñeq;

287 
	`evhâp_£nd_ª∂y_°¨t
(
ªq
, 
HTTP_OK
, "Everything is fine");

291 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_chunked_åickÀ_cb
, 
°©e
, &
whí
);

292 
	}
}

295 
	$hâp_com∂ëe_wrôe
(
fd
, 
wh©
, *
¨g
)

297 
buf„ªvít
 *
bev
 = 
¨g
;

298 c⁄° *
hâp_ªque°
 = "host\r\n"

301 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

302 
	}
}

305 
	$hâp_basic_ã°
()

307 
timevÆ
 
tv
;

308 
buf„ªvít
 *
bev
;

309 
fd
;

310 c⁄° *
hâp_ªque°
;

311 
p‹t
 = -1;

313 
ã°_ok
 = 0;

314 
	`Ârötf
(
°dout
, "Testing Basic HTTP Server: ");

316 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

319 i‡(
	`evhâp_böd_sockë
(
hâp
, "127.0.0.1", 
p‹t
 + 1) == -1) {

320 
	`Ârötf
(
°dout
, "FAILED (bind)\n");

321 
	`exô
(1);

324 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

327 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

328 
hâp_îr‹cb
, 
NULL
);

331 
hâp_ªque°
 =

335 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

336 
	`timî˛ór
(&
tv
);

337 
tv
.
tv_u£c
 = 10000;

338 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_com∂ëe_wrôe
, 
bev
, &
tv
);

340 
	`evít_di•©ch
();

342 i‡(
ã°_ok
 != 3) {

343 
	`Ârötf
(
°dout
, "FAILED\n");

344 
	`exô
(1);

348 
	`buf„ªvít_‰ì
(
bev
);

349 
	`EVUTIL_CLOSESOCKET
(
fd
);

351 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
 + 1);

354 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

355 
hâp_îr‹cb
, 
NULL
);

357 
hâp_ªque°
 =

363 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

365 
	`evít_di•©ch
();

367 
	`buf„ªvít_‰ì
(
bev
);

368 
	`EVUTIL_CLOSESOCKET
(
fd
);

370 
	`evhâp_‰ì
(
hâp
);

372 i‡(
ã°_ok
 != 5) {

373 
	`Ârötf
(
°dout
, "FAILED\n");

374 
	`exô
(1);

377 
	`Ârötf
(
°dout
, "OK\n");

378 
	}
}

380 
evhâp_c⁄√˘i⁄
 *
	gdñayed_˛õ¡
;

383 
	$hâp_dñay_ª∂y
(
fd
, 
wh©
, *
¨g
)

385 
evhâp_ªque°
 *
ªq
 = 
¨g
;

387 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
NULL
);

389 ++
ã°_ok
;

390 
	}
}

393 
	$hâp_œrge_dñay_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

395 
timevÆ
 
tv
;

396 
	`timî˛ór
(&
tv
);

397 
tv
.
tv_£c
 = 3;

399 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_dñay_ª∂y
, 
ªq
, &
tv
);

402 
	`evhâp_c⁄√˘i⁄_Áû
(
dñayed_˛õ¡
, 
EVCON_HTTP_EOF
);

403 
	}
}

405 
hâp_ªque°_d⁄e
(
evhâp_ªque°
 *, *);

406 
hâp_ªque°_em±y_d⁄e
(
evhâp_ªque°
 *, *);

409 
	$hâp_c⁄√˘i⁄_ã°
(
≥rsi°ít
)

411 
p‹t
 = -1;

412 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

413 
evhâp_ªque°
 *
ªq
 = 
NULL
;

415 
ã°_ok
 = 0;

416 
	`Ârötf
(
°dout
, "Testing Request Connection Pipeline %s: ",

417 
≥rsi°ít
 ? "(persistent)" : "");

419 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

421 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

422 i‡(
evc⁄
 =
NULL
) {

423 
	`Ârötf
(
°dout
, "FAILED\n");

424 
	`exô
(1);

432 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_d⁄e
, 
NULL
);

435 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

438 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

439 
	`Ârötf
(
°dout
, "FAILED\n");

440 
	`exô
(1);

443 
	`evít_di•©ch
();

445 i‡(
ã°_ok
 != 1) {

446 
	`Ârötf
(
°dout
, "FAILED\n");

447 
	`exô
(1);

451 
ã°_ok
 = 0;

453 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_d⁄e
, 
NULL
);

456 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

462 i‡(!
≥rsi°ít
)

463 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

466 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

467 
	`Ârötf
(
°dout
, "FAILED\n");

468 
	`exô
(1);

471 
	`evít_di•©ch
();

474 
ã°_ok
 = 0;

476 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_em±y_d⁄e
, 
NULL
);

479 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Empty", "itis");

482 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

483 
	`Ârötf
(
°dout
, "FAILED\n");

484 
	`exô
(1);

487 
	`evít_di•©ch
();

489 i‡(
ã°_ok
 != 1) {

490 
	`Ârötf
(
°dout
, "FAILED\n");

491 
	`exô
(1);

494 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

495 
	`evhâp_‰ì
(
hâp
);

497 
	`Ârötf
(
°dout
, "OK\n");

498 
	}
}

501 
	$hâp_ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

503 c⁄° *
wh©
 = "This is funny";

505 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

506 
	`Ârötf
(
°dîr
, "FAILED\n");

507 
	`exô
(1);

510 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

511 
	`Ârötf
(
°dîr
, "FAILED\n");

512 
	`exô
(1);

515 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

516 
	`Ârötf
(
°dîr
, "FAILED\n");

517 
	`exô
(1);

520 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

521 
	`Ârötf
(
°dîr
, "FAILED\n");

522 
	`exô
(1);

525 
ã°_ok
 = 1;

526 
	`evít_lo›exô
(
NULL
);

527 
	}
}

532 
	$hâp_ªque°_em±y_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

534 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

535 
	`Ârötf
(
°dîr
, "FAILED\n");

536 
	`exô
(1);

539 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "D©e"Ë=
NULL
) {

540 
	`Ârötf
(
°dîr
, "FAILED\n");

541 
	`exô
(1);

545 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
) {

546 
	`Ârötf
(
°dîr
, "FAILED\n");

547 
	`exô
(1);

550 i‡(
	`°rcmp
(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Content-Length"),

552 
	`Ârötf
(
°dîr
, "FAILED\n");

553 
	`exô
(1);

556 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) != 0) {

557 
	`Ârötf
(
°dîr
, "FAILED\n");

558 
	`exô
(1);

561 
ã°_ok
 = 1;

562 
	`evít_lo›exô
(
NULL
);

563 
	}
}

570 
	$hâp_di•©chî_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

573 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

574 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

575 
	`evbuf„r_add_¥ötf
(
evb
, "DISPATCHER_TEST");

577 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
evb
);

579 
	`evbuf„r_‰ì
(
evb
);

580 
	}
}

583 
	$hâp_di•©chî_ã°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

585 c⁄° *
wh©
 = "DISPATCHER_TEST";

587 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

588 
	`Ârötf
(
°dîr
, "FAILED\n");

589 
	`exô
(1);

592 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

593 
	`Ârötf
(
°dîr
, "FAILED (contentÅype)\n");

594 
	`exô
(1);

597 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

598 
	`Ârötf
(
°dîr
, "FAILED (length %zu vs %zu)\n",

599 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
wh©
));

600 
	`exô
(1);

603 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

604 
	`Ârötf
(
°dîr
, "FAILED (data)\n");

605 
	`exô
(1);

608 
ã°_ok
 = 1;

609 
	`evít_lo›exô
(
NULL
);

610 
	}
}

613 
	$hâp_di•©chî_ã°
()

615 
p‹t
 = -1;

616 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

617 
evhâp_ªque°
 *
ªq
 = 
NULL
;

619 
ã°_ok
 = 0;

620 
	`Ârötf
(
°dout
, "Testing HTTP Dispatcher: ");

622 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

624 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

625 i‡(
evc⁄
 =
NULL
) {

626 
	`Ârötf
(
°dout
, "FAILED\n");

627 
	`exô
(1);

631 
	`evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evc⁄
, "127.0.0.1");

638 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_di•©chî_ã°_d⁄e
, 
NULL
);

639 i‡(
ªq
 =
NULL
) {

640 
	`Ârötf
(
°dout
, "FAILED\n");

641 
	`exô
(1);

645 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

647 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/?arg=val") == -1) {

648 
	`Ârötf
(
°dout
, "FAILED\n");

649 
	`exô
(1);

652 
	`evít_di•©ch
();

654 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

655 
	`evhâp_‰ì
(
hâp
);

657 i‡(
ã°_ok
 != 1) {

658 
	`Ârötf
(
°dout
, "FAILED: %d\n", 
ã°_ok
);

659 
	`exô
(1);

662 
	`Ârötf
(
°dout
, "OK\n");

663 
	}
}

669 
hâp_po°ªque°_d⁄e
(
evhâp_ªque°
 *, *);

671 
	#POST_DATA
 "Okay. NŸÑóŒyÖrötf"

	)

674 
	$hâp_po°_ã°
()

676 
p‹t
 = -1;

677 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

678 
evhâp_ªque°
 *
ªq
 = 
NULL
;

680 
ã°_ok
 = 0;

681 
	`Ârötf
(
°dout
, "Testing HTTP POST Request: ");

683 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

685 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

686 i‡(
evc⁄
 =
NULL
) {

687 
	`Ârötf
(
°dout
, "FAILED\n");

688 
	`exô
(1);

696 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_po°ªque°_d⁄e
, 
NULL
);

697 i‡(
ªq
 =
NULL
) {

698 
	`Ârötf
(
°dout
, "FAILED\n");

699 
	`exô
(1);

703 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

704 
	`evbuf„r_add_¥ötf
(
ªq
->
ouçut_buf„r
, 
POST_DATA
);

706 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_POST
, "/postit") == -1) {

707 
	`Ârötf
(
°dout
, "FAILED\n");

708 
	`exô
(1);

711 
	`evít_di•©ch
();

713 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

714 
	`evhâp_‰ì
(
hâp
);

716 i‡(
ã°_ok
 != 1) {

717 
	`Ârötf
(
°dout
, "FAILED: %d\n", 
ã°_ok
);

718 
	`exô
(1);

721 
	`Ârötf
(
°dout
, "OK\n");

722 
	}
}

725 
	$hâp_po°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

727 
evbuf„r
 *
evb
;

728 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

731 i‡(
ªq
->
ty≥
 !
EVHTTP_REQ_POST
) {

732 
	`Ârötf
(
°dout
, "FAILED (postÅype)\n");

733 
	`exô
(1);

736 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
POST_DATA
)) {

737 
	`Ârötf
(
°dout
, "FAILED (length: %zu vs %zu)\n",

738 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
POST_DATA
));

739 
	`exô
(1);

742 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
POST_DATA
,

743 
	`°æí
(
POST_DATA
))) {

744 
	`Ârötf
(
°dout
, "FAILED (data)\n");

745 
	`Ârötf
(
°dout
, "GŸ :%s\n", 
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
));

746 
	`Ârötf
(
°dout
, "W™t:%s\n", 
POST_DATA
);

747 
	`exô
(1);

750 
evb
 = 
	`evbuf„r_√w
();

751 
	`evbuf„r_add_¥ötf
(
evb
, "This is funny");

753 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
evb
);

755 
	`evbuf„r_‰ì
(
evb
);

756 
	}
}

759 
	$hâp_po°ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

761 c⁄° *
wh©
 = "This is funny";

763 i‡(
ªq
 =
NULL
) {

764 
	`Ârötf
(
°dîr
, "FAILED (timeout)\n");

765 
	`exô
(1);

768 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

770 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

771 
	`exô
(1);

774 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

775 
	`Ârötf
(
°dîr
, "FAILED (contentÅype)\n");

776 
	`exô
(1);

779 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

780 
	`Ârötf
(
°dîr
, "FAILED (length %zu vs %zu)\n",

781 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
wh©
));

782 
	`exô
(1);

785 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

786 
	`Ârötf
(
°dîr
, "FAILED (data)\n");

787 
	`exô
(1);

790 
ã°_ok
 = 1;

791 
	`evít_lo›exô
(
NULL
);

792 
	}
}

795 
	$hâp_Áûuª_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

797 c⁄° *
wh©
 = "400 Bad Request";

798 i‡(
	`evbuf„r_föd
(
bev
->
öput
, (c⁄° *Ë
wh©
, 
	`°æí
(wh©)Ë!
NULL
) {

799 
ã°_ok
 = 2;

800 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

801 
	`evít_lo›exô
(
NULL
);

803 
	}
}

809 
	$hâp_Áûuª_ã°
()

811 
buf„ªvít
 *
bev
;

812 
fd
;

813 c⁄° *
hâp_ªque°
;

814 
p‹t
 = -1;

816 
ã°_ok
 = 0;

817 
	`Ârötf
(
°dout
, "Testing Bad HTTP Request: ");

819 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

821 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

824 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_Áûuª_ªadcb
, 
hâp_wrôecb
,

825 
hâp_îr‹cb
, 
NULL
);

827 
hâp_ªque°
 = "illegalÑequest\r\n";

829 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

831 
	`evít_di•©ch
();

833 
	`buf„ªvít_‰ì
(
bev
);

834 
	`EVUTIL_CLOSESOCKET
(
fd
);

836 
	`evhâp_‰ì
(
hâp
);

838 i‡(
ã°_ok
 != 2) {

839 
	`Ârötf
(
°dout
, "FAILED\n");

840 
	`exô
(1);

843 
	`Ârötf
(
°dout
, "OK\n");

844 
	}
}

847 
	$˛o£_dëe˘_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

849 
timevÆ
 
tv
;

850 i‡(
ªq
 =
NULL
 ||Ñeq->
ª•⁄£_code
 !
HTTP_OK
) {

852 
	`Ârötf
(
°dîr
, "FAILED\n");

853 
	`exô
(1);

856 
ã°_ok
 = 1;

858 
	`timî˛ór
(&
tv
);

859 
tv
.
tv_£c
 = 3;

861 
	`evít_lo›exô
(&
tv
);

862 
	}
}

865 
	$˛o£_dëe˘_œunch
(
fd
, 
wh©
, *
¨g
)

867 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

868 
evhâp_ªque°
 *
ªq
;

870 
ªq
 = 
	`evhâp_ªque°_√w
(
˛o£_dëe˘_d⁄e
, 
NULL
);

873 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

876 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

877 
	`Ârötf
(
°dout
, "FAILED\n");

878 
	`exô
(1);

880 
	}
}

883 
	$˛o£_dëe˘_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

885 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

886 
timevÆ
 
tv
;

888 i‡(
ªq
 !
NULL
 &&Ñeq->
ª•⁄£_code
 !
HTTP_OK
) {

890 
	`Ârötf
(
°dîr
, "FAILED\n");

891 
	`exô
(1);

894 
	`timî˛ór
(&
tv
);

895 
tv
.
tv_£c
 = 3;

898 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
˛o£_dëe˘_œunch
, 
evc⁄
, &
tv
);

899 
	}
}

903 
	$hâp_˛o£_dëe˘i⁄
(
wôh_dñay
)

905 
p‹t
 = -1;

906 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

907 
evhâp_ªque°
 *
ªq
 = 
NULL
;

909 
ã°_ok
 = 0;

910 
	`Ârötf
(
°dout
, "Testing Connection Close Detection%s: ",

911 
wôh_dñay
 ? " (with delay)" : "");

913 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

916 
	`evhâp_£t_timeout
(
hâp
, 2);

918 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

919 i‡(
evc⁄
 =
NULL
) {

920 
	`Ârötf
(
°dout
, "FAILED\n");

921 
	`exô
(1);

924 
dñayed_˛õ¡
 = 
evc⁄
;

931 
ªq
 = 
	`evhâp_ªque°_√w
(
˛o£_dëe˘_cb
, 
evc⁄
);

934 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

937 i‡(
	`evhâp_make_ªque°
(
evc⁄
,

938 
ªq
, 
EVHTTP_REQ_GET
, 
wôh_dñay
 ? "/largedelay" : "/test") == -1) {

939 
	`Ârötf
(
°dout
, "FAILED\n");

940 
	`exô
(1);

943 
	`evít_di•©ch
();

945 i‡(
ã°_ok
 != 1) {

946 
	`Ârötf
(
°dout
, "FAILED\n");

947 
	`exô
(1);

951 i‡(
	`TAILQ_FIRST
(&
hâp
->
c⁄√˘i⁄s
Ë!
NULL
) {

952 
	`Ârötf
(
°dout
, "FAILED (left connections)\n");

953 
	`exô
(1);

956 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

957 
	`evhâp_‰ì
(
hâp
);

959 
	`Ârötf
(
°dout
, "OK\n");

960 
	}
}

963 
	$hâp_highp‹t_ã°
()

965 
i
 = -1;

966 
evhâp
 *
myhâp
 = 
NULL
;

968 
	`Ârötf
(
°dout
, "Testing HTTP Server with highÖort: ");

971 
i
 = 0; i < 50; ++i) {

972 
myhâp
 = 
	`evhâp_°¨t
("127.0.0.1", 65535 - 
i
);

973 i‡(
myhâp
 !
NULL
) {

974 
	`Ârötf
(
°dout
, "OK\n");

975 
	`evhâp_‰ì
(
myhâp
);

980 
	`Ârötf
(
°dout
, "FAILED\n");

981 
	`exô
(1);

982 
	}
}

985 
	$hâp_bad_hódî_ã°
()

987 
evkeyvÆq
 
hódîs
;

989 
	`Ârötf
(
°dout
, "Testing HTTP Header filtering: ");

991 
	`TAILQ_INIT
(&
hódîs
);

993 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two") != 0)

994 
Áû
;

996 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One\r", "Two") != -1)

997 
Áû
;

999 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One\n", "Two") != -1)

1000 
Áû
;

1002 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two\r") != -1)

1003 
Áû
;

1005 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two\n") != -1)

1006 
Áû
;

1008 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1010 
	`Ârötf
(
°dout
, "OK\n");

1012 
Áû
:

1013 
	`Ârötf
(
°dout
, "FAILED\n");

1014 
	`exô
(1);

1015 
	}
}

1018 
	$hâp_ba£_ã°
()

1020 
buf„ªvít
 *
bev
;

1021 
fd
;

1022 c⁄° *
hâp_ªque°
;

1023 
p‹t
 = -1;

1025 
ã°_ok
 = 0;

1026 
	`Ârötf
(
°dout
, "Testing HTTP Server Event Base: ");

1028 
ba£
 = 
	`evít_öô
();

1034 
	`evít_öô
();

1036 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
ba£
);

1038 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1041 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

1042 
hâp_îr‹cb
, 
NULL
);

1043 
	`buf„ªvít_ba£_£t
(
ba£
, 
bev
);

1045 
hâp_ªque°
 =

1051 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

1053 
	`evít_ba£_di•©ch
(
ba£
);

1055 
	`buf„ªvít_‰ì
(
bev
);

1056 
	`EVUTIL_CLOSESOCKET
(
fd
);

1058 
	`evhâp_‰ì
(
hâp
);

1060 
	`evít_ba£_‰ì
(
ba£
);

1061 
ba£
 = 
NULL
;

1063 i‡(
ã°_ok
 != 2) {

1064 
	`Ârötf
(
°dout
, "FAILED\n");

1065 
	`exô
(1);

1068 
	`Ârötf
(
°dout
, "OK\n");

1069 
	}
}

1076 
	$hâp_chunked_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

1079 
	}
}

1082 
	$hâp_chunked_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

1084 i‡(!
ã°_ok
)

1085 
out
;

1087 
ã°_ok
 = -1;

1089 i‡((
wh©
 & 
EVBUFFER_EOF
) != 0) {

1090 
evhâp_ªque°
 *
ªq
 = 
	`evhâp_ªque°_√w
(
NULL
, NULL);

1091 c⁄° *
hódî
;

1092 
mesßge_ªad_°©us
 
d⁄e
;

1094 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

1095 
d⁄e
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
	`EVBUFFER_INPUT
(
bev
));

1096 i‡(
d⁄e
 !
ALL_DATA_READ
)

1097 
out
;

1099 
d⁄e
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
	`EVBUFFER_INPUT
(
bev
));

1100 i‡(
d⁄e
 !
ALL_DATA_READ
)

1101 
out
;

1103 
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Transfer-Encoding");

1104 i‡(
hódî
 =
NULL
 || 
	`°rcmp
(header, "chunked"))

1105 
out
;

1107 
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Connection");

1108 i‡(
hódî
 =
NULL
 || 
	`°rcmp
(header, "close"))

1109 
out
;

1111 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1112 i‡(
hódî
 =
NULL
)

1113 
out
;

1115 i‡(
	`°rcmp
(
hódî
, "d"))

1116 
out
;

1117 
	`‰ì
((*)
hódî
);

1119 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1121 
out
;

1123 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 13 + 2);

1125 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1126 i‡(
hódî
 =
NULL
)

1127 
out
;

1129 i‡(
	`°rcmp
(
hódî
, "12"))

1130 
out
;

1131 
	`‰ì
((*)
hódî
);

1133 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1135 
out
;

1137 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 18 + 2);

1139 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1140 i‡(
hódî
 =
NULL
)

1141 
out
;

1143 i‡(
	`°rcmp
(
hódî
, "8"))

1144 
out
;

1145 
	`‰ì
((*)
hódî
);

1147 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1149 
out
;

1151 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 8 + 2);

1153 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1154 i‡(
hódî
 =
NULL
)

1155 
out
;

1157 i‡(
	`°rcmp
(
hódî
, "0"))

1158 
out
;

1159 
	`‰ì
((*)
hódî
);

1161 
ã°_ok
 = 2;

1164 
out
:

1165 
	`evít_lo›exô
(
NULL
);

1166 
	}
}

1169 
	$hâp_chunked_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

1171 i‡(
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
bev
)) == 0) {

1173 
	`buf„ªvít_íabÀ
(
bev
, 
EV_READ
);

1174 
ã°_ok
++;

1176 
	}
}

1179 
	$hâp_chunked_ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

1181 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

1182 
	`Ârötf
(
°dîr
, "FAILED\n");

1183 
	`exô
(1);

1186 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,

1187 "Tøns„r-Encodög"Ë=
NULL
) {

1188 
	`Ârötf
(
°dîr
, "FAILED\n");

1189 
	`exô
(1);

1192 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) != 13 + 18 + 8) {

1193 
	`Ârötf
(
°dîr
, "FAILED\n");

1194 
	`exô
(1);

1197 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
),

1200 
	`Ârötf
(
°dîr
, "FAILED\n");

1201 
	`exô
(1);

1204 
ã°_ok
 = 1;

1205 
	`evít_lo›exô
(
NULL
);

1206 
	}
}

1209 
	$hâp_chunked_ã°
()

1211 
buf„ªvít
 *
bev
;

1212 
fd
;

1213 c⁄° *
hâp_ªque°
;

1214 
p‹t
 = -1;

1215 
timevÆ
 
tv_°¨t
, 
tv_íd
;

1216 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1217 
evhâp_ªque°
 *
ªq
 = 
NULL
;

1218 
i
;

1220 
ã°_ok
 = 0;

1221 
	`Ârötf
(
°dout
, "Testing Chunked HTTP Reply: ");

1223 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1225 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1228 
bev
 = 
	`buf„ªvít_√w
(
fd
,

1229 
hâp_chunked_ªadcb
, 
hâp_chunked_wrôecb
,

1230 
hâp_chunked_îr‹cb
, 
NULL
);

1232 
hâp_ªque°
 =

1238 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

1240 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

1242 
	`evít_di•©ch
();

1244 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

1245 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

1247 i‡(
tv_íd
.
tv_£c
 >= 1) {

1248 
	`Ârötf
(
°dout
, "FAILED (time)\n");

1249 
	`exô
 (1);

1253 i‡(
ã°_ok
 != 2) {

1254 
	`Ârötf
(
°dout
, "FAILED\n");

1255 
	`exô
(1);

1259 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

1260 i‡(
evc⁄
 =
NULL
) {

1261 
	`Ârötf
(
°dout
, "FAILED\n");

1262 
	`exô
(1);

1266 
i
 = 0; i < 2; i++) {

1267 
ã°_ok
 = 0;

1268 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_chunked_ªque°_d⁄e
, 
NULL
);

1271 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

1274 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

1275 
EVHTTP_REQ_GET
, "/chunked") == -1) {

1276 
	`Ârötf
(
°dout
, "FAILED\n");

1277 
	`exô
(1);

1280 
	`evít_di•©ch
();

1282 i‡(
ã°_ok
 != 1) {

1283 
	`Ârötf
(
°dout
, "FAILED\n");

1284 
	`exô
(1);

1288 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1289 
	`evhâp_‰ì
(
hâp
);

1291 
	`Ârötf
(
°dout
, "OK\n");

1292 
	}
}

1295 
	$hâp_mu…i_löe_hódî_ã°
()

1297 
buf„ªvít
 *
bev
;

1298 
fd
;

1299 c⁄° *
hâp_°¨t_ªque°
;

1300 
p‹t
 = -1;

1302 
ã°_ok
 = 0;

1303 
	`Ârötf
(
°dout
, "Testing HTTP Server with multiÜine: ");

1305 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1307 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1310 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

1311 
hâp_îr‹cb
, 
NULL
);

1313 
hâp_°¨t_ªque°
 =

1323 
	`buf„ªvít_wrôe
(
bev
, 
hâp_°¨t_ªque°
, 
	`°æí
(http_start_request));

1325 
	`evít_di•©ch
();

1327 
	`buf„ªvít_‰ì
(
bev
);

1328 
	`EVUTIL_CLOSESOCKET
(
fd
);

1330 
	`evhâp_‰ì
(
hâp
);

1332 i‡(
ã°_ok
 != 4) {

1333 
	`Ârötf
(
°dout
, "FAILED\n");

1334 
	`exô
(1);

1337 
	`Ârötf
(
°dout
, "OK\n");

1338 
	}
}

1341 
	$hâp_ªque°_bad
(
evhâp_ªque°
 *
ªq
, *
¨g
)

1343 i‡(
ªq
 !
NULL
) {

1344 
	`Ârötf
(
°dîr
, "FAILED\n");

1345 
	`exô
(1);

1348 
ã°_ok
 = 1;

1349 
	`evít_lo›exô
(
NULL
);

1350 
	}
}

1353 
	$hâp_√g©ive_c⁄ã¡_Àngth_ã°
()

1355 
p‹t
 = -1;

1356 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1357 
evhâp_ªque°
 *
ªq
 = 
NULL
;

1359 
ã°_ok
 = 0;

1360 
	`Ârötf
(
°dout
, "Testing HTTP Negative Content Length: ");

1362 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1364 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

1365 i‡(
evc⁄
 =
NULL
) {

1366 
	`Ârötf
(
°dout
, "FAILED\n");

1367 
	`exô
(1);

1375 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_bad
, 
NULL
);

1378 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "X-Negative", "makeitso");

1381 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

1382 
	`Ârötf
(
°dout
, "FAILED\n");

1383 
	`exô
(1);

1386 
	`evít_di•©ch
();

1388 
	`evhâp_‰ì
(
hâp
);

1390 i‡(
ã°_ok
 != 1) {

1391 
	`Ârötf
(
°dout
, "FAILED\n");

1392 
	`exô
(1);

1395 
	`Ârötf
(
°dout
, "OK\n");

1396 
	}
}

1399 
	$hâp_suôe
()

1401 
	`hâp_ba£_ã°
();

1402 
	`hâp_bad_hódî_ã°
();

1403 
	`hâp_basic_ã°
();

1404 
	`hâp_c⁄√˘i⁄_ã°
(0 );

1405 
	`hâp_c⁄√˘i⁄_ã°
(1 );

1406 
	`hâp_˛o£_dëe˘i⁄
(0 );

1407 
	`hâp_˛o£_dëe˘i⁄
(1 );

1408 
	`hâp_po°_ã°
();

1409 
	`hâp_Áûuª_ã°
();

1410 
	`hâp_highp‹t_ã°
();

1411 
	`hâp_di•©chî_ã°
();

1413 
	`hâp_mu…i_löe_hódî_ã°
();

1414 
	`hâp_√g©ive_c⁄ã¡_Àngth_ã°
();

1416 
	`hâp_chunked_ã°
();

1417 
	}
}

	@test/regress_rpc.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sys/sig«l.h
>

46 
	~<uni°d.h
>

47 
	~<√tdb.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<î∫o.h
>

54 
	~<as£π.h
>

56 
	~"evít.h
"

57 
	~"evhâp.h
"

58 
	~"log.h
"

59 
	~"evΩc.h
"

61 
	~"ªgªss.gí.h
"

63 
Ωc_suôe
();

65 
ã°_ok
;

67 
evhâp
 *

68 
	$hâp_£tup
(*
µ‹t
)

70 
i
;

71 
evhâp
 *
myhâp
;

72 
p‹t
 = -1;

75 
i
 = 0; i < 50; ++i) {

76 
myhâp
 = 
	`evhâp_°¨t
("127.0.0.1", 8080 + 
i
);

77 i‡(
myhâp
 !
NULL
) {

78 
p‹t
 = 8080 + 
i
;

83 i‡(
p‹t
 == -1)

84 
	`evít_îrx
(1, "CouldÇot start web server");

86 *
µ‹t
 = 
p‹t
;

87  (
myhâp
);

88 
	}
}

90 
EVRPC_HEADER
(
Mesßge
, 
msg
, 
kûl
);

91 
EVRPC_HEADER
(
NevîRïly
, 
msg
, 
kûl
);

93 
EVRPC_GENERATE
(
Mesßge
, 
msg
, 
kûl
);

94 
EVRPC_GENERATE
(
NevîRïly
, 
msg
, 
kûl
);

96 
	g√ed_öput_hook
 = 0;

97 
	g√ed_ouçut_hook
 = 0;

100 
MesßgeCb
(
EVRPC_STRUCT
(
Mesßge
)* 
Ωc
, *
¨g
)

102 
kûl
* 
	gkûl_ª∂y
 = 
Ωc
->
ª∂y
;

104 i‡(
	g√ed_öput_hook
) {

105 
evhâp_ªque°
* 
	gªq
 = 
EVRPC_REQUEST_HTTP
(
Ωc
);

106 c⁄° *
	ghódî
 = 
evhâp_föd_hódî
(

107 
ªq
->
öput_hódîs
, "X-Hook");

108 
as£π
(
°rcmp
(
hódî
, "input") == 0);

112 
EVTAG_ASSIGN
(
kûl_ª∂y
, 
wóp⁄
, "dagger");

113 
EVTAG_ASSIGN
(
kûl_ª∂y
, 
a˘i⁄
, "waveároundÜikeán idiot");

116 
EVRPC_REQUEST_DONE
(
Ωc
);

119 
EVRPC_STRUCT
(
NevîRïly
Ë*
	gßved_Ωc
;

122 
NevîRïlyCb
(
EVRPC_STRUCT
(
NevîRïly
)* 
Ωc
, *
¨g
)

124 
	gã°_ok
 += 1;

125 
	gßved_Ωc
 = 
Ωc
;

129 
	$Ωc_£tup
(
evhâp
 **
phâp
, *
µ‹t
, 
evΩc_ba£
 **
pba£
)

131 
p‹t
;

132 
evhâp
 *
hâp
 = 
NULL
;

133 
evΩc_ba£
 *
ba£
 = 
NULL
;

135 
hâp
 = 
	`hâp_£tup
(&
p‹t
);

136 
ba£
 = 
	`evΩc_öô
(
hâp
);

138 
	`EVRPC_REGISTER
(
ba£
, 
Mesßge
, 
msg
, 
kûl
, 
MesßgeCb
, 
NULL
);

139 
	`EVRPC_REGISTER
(
ba£
, 
NevîRïly
, 
msg
, 
kûl
, 
NevîRïlyCb
, 
NULL
);

141 *
phâp
 = 
hâp
;

142 *
µ‹t
 = 
p‹t
;

143 *
pba£
 = 
ba£
;

145 
√ed_öput_hook
 = 0;

146 
√ed_ouçut_hook
 = 0;

147 
	}
}

150 
	$Ωc_ã¨down
(
evΩc_ba£
 *
ba£
)

152 
	`as£π
(
	`EVRPC_UNREGISTER
(
ba£
, 
Mesßge
) == 0);

153 
	`as£π
(
	`EVRPC_UNREGISTER
(
ba£
, 
NevîRïly
) == 0);

155 
	`evΩc_‰ì
(
ba£
);

156 
	}
}

159 
	$Ωc_po°ªque°_Áûuª
(
evhâp_ªque°
 *
ªq
, *
¨g
)

161 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_SERVUNAVAIL
) {

163 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

164 
	`exô
(1);

167 
ã°_ok
 = 1;

168 
	`evít_lo›exô
(
NULL
);

169 
	}
}

176 
	$Ωc_basic_ã°
()

178 
p‹t
;

179 
evhâp
 *
hâp
 = 
NULL
;

180 
evΩc_ba£
 *
ba£
 = 
NULL
;

181 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

182 
evhâp_ªque°
 *
ªq
 = 
NULL
;

184 
	`Ârötf
(
°dout
, "Testing Basic RPC Support: ");

186 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

188 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

189 i‡(
evc⁄
 =
NULL
) {

190 
	`Ârötf
(
°dout
, "FAILED\n");

191 
	`exô
(1);

199 
ªq
 = 
	`evhâp_ªque°_√w
(
Ωc_po°ªque°_Áûuª
, 
NULL
);

200 i‡(
ªq
 =
NULL
) {

201 
	`Ârötf
(
°dout
, "FAILED\n");

202 
	`exô
(1);

206 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

207 
	`evbuf„r_add_¥ötf
(
ªq
->
ouçut_buf„r
, "Some Nonsense");

209 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

210 
EVHTTP_REQ_POST
,

212 
	`Ârötf
(
°dout
, "FAILED\n");

213 
	`exô
(1);

216 
ã°_ok
 = 0;

218 
	`evít_di•©ch
();

220 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

222 
	`Ωc_ã¨down
(
ba£
);

224 i‡(
ã°_ok
 != 1) {

225 
	`Ârötf
(
°dout
, "FAILED\n");

226 
	`exô
(1);

229 
	`Ârötf
(
°dout
, "OK\n");

231 
	`evhâp_‰ì
(
hâp
);

232 
	}
}

235 
	$Ωc_po°ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

237 
kûl
* 
kûl_ª∂y
 = 
NULL
;

239 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

241 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

242 
	`exô
(1);

245 
kûl_ª∂y
 = 
	`kûl_√w
();

247 i‡((
	`kûl_unm¨shÆ
(
kûl_ª∂y
, 
ªq
->
öput_buf„r
)) == -1) {

248 
	`Ârötf
(
°dîr
, "FAILED (unmarshal)\n");

249 
	`exô
(1);

252 
	`kûl_‰ì
(
kûl_ª∂y
);

254 
ã°_ok
 = 1;

255 
	`evít_lo›exô
(
NULL
);

256 
	}
}

259 
	$Ωc_basic_mesßge
()

261 
p‹t
;

262 
evhâp
 *
hâp
 = 
NULL
;

263 
evΩc_ba£
 *
ba£
 = 
NULL
;

264 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

265 
evhâp_ªque°
 *
ªq
 = 
NULL
;

266 
msg
 *msg;

268 
	`Ârötf
(
°dout
, "Testing Good RPC Post: ");

270 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

272 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

273 i‡(
evc⁄
 =
NULL
) {

274 
	`Ârötf
(
°dout
, "FAILED\n");

275 
	`exô
(1);

283 
ªq
 = 
	`evhâp_ªque°_√w
(
Ωc_po°ªque°_d⁄e
, 
NULL
);

284 i‡(
ªq
 =
NULL
) {

285 
	`Ârötf
(
°dout
, "FAILED\n");

286 
	`exô
(1);

290 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

293 
msg
 = 
	`msg_√w
();

294 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

295 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

296 
	`msg_m¨shÆ
(
ªq
->
ouçut_buf„r
, 
msg
);

297 
	`msg_‰ì
(
msg
);

299 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

300 
EVHTTP_REQ_POST
,

302 
	`Ârötf
(
°dout
, "FAILED\n");

303 
	`exô
(1);

306 
ã°_ok
 = 0;

308 
	`evít_di•©ch
();

310 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

312 
	`Ωc_ã¨down
(
ba£
);

314 i‡(
ã°_ok
 != 1) {

315 
	`Ârötf
(
°dout
, "FAILED\n");

316 
	`exô
(1);

319 
	`Ârötf
(
°dout
, "OK\n");

321 
	`evhâp_‰ì
(
hâp
);

322 
	}
}

324 
evΩc_poﬁ
 *

325 
	$Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
)

327 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

328 
evΩc_poﬁ
 *
poﬁ
;

330 
poﬁ
 = 
	`evΩc_poﬁ_√w
(
NULL
);

331 
	`as£π
(
poﬁ
 !
NULL
);

333 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

334 
	`as£π
(
evc⁄
 !
NULL
);

336 
	`evΩc_poﬁ_add_c⁄√˘i⁄
(
poﬁ
, 
evc⁄
);

338  (
poﬁ
);

339 
	}
}

342 
	$GŸKûlCb
(
evΩc_°©us
 *
°©us
,

343 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

345 *
wóp⁄
;

346 *
a˘i⁄
;

348 i‡(
√ed_ouçut_hook
) {

349 
evhâp_ªque°
 *
ªq
 = 
°©us
->
hâp_ªq
;

350 c⁄° *
hódî
 = 
	`evhâp_föd_hódî
(

351 
ªq
->
öput_hódîs
, "X-Pool-Hook");

352 
	`as£π
(
	`°rcmp
(
hódî
, "ran") == 0);

355 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_NONE
)

356 
d⁄e
;

358 i‡(
	`EVTAG_GET
(
kûl
, 
wóp⁄
, &weapon) == -1) {

359 
	`Ârötf
(
°dîr
, "get weapon\n");

360 
d⁄e
;

362 i‡(
	`EVTAG_GET
(
kûl
, 
a˘i⁄
, &action) == -1) {

363 
	`Ârötf
(
°dîr
, "getáction\n");

364 
d⁄e
;

367 i‡(
	`°rcmp
(
wóp⁄
, "dagger"))

368 
d⁄e
;

370 i‡(
	`°rcmp
(
a˘i⁄
, "waveároundÜikeán idiot"))

371 
d⁄e
;

373 
ã°_ok
 += 1;

375 
d⁄e
:

376 
	`evít_lo›exô
(
NULL
);

377 
	}
}

380 
	$GŸKûlCbTwo
(
evΩc_°©us
 *
°©us
,

381 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

383 *
wóp⁄
;

384 *
a˘i⁄
;

386 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_NONE
)

387 
d⁄e
;

389 i‡(
	`EVTAG_GET
(
kûl
, 
wóp⁄
, &weapon) == -1) {

390 
	`Ârötf
(
°dîr
, "get weapon\n");

391 
d⁄e
;

393 i‡(
	`EVTAG_GET
(
kûl
, 
a˘i⁄
, &action) == -1) {

394 
	`Ârötf
(
°dîr
, "getáction\n");

395 
d⁄e
;

398 i‡(
	`°rcmp
(
wóp⁄
, "dagger"))

399 
d⁄e
;

401 i‡(
	`°rcmp
(
a˘i⁄
, "waveároundÜikeán idiot"))

402 
d⁄e
;

404 
ã°_ok
 += 1;

406 
d⁄e
:

407 i‡(
ã°_ok
 == 2)

408 
	`evít_lo›exô
(
NULL
);

409 
	}
}

412 
	$Ωc_hook_add_hódî
(
evhâp_ªque°
 *
ªq
,

413 
evbuf„r
 *
evbuf
, *
¨g
)

415 c⁄° *
hook_ty≥
 = 
¨g
;

416 i‡(
	`°rcmp
("öput", 
hook_ty≥
) == 0)

417 
	`evhâp_add_hódî
(
ªq
->
öput_hódîs
, "X-Hook", 
hook_ty≥
);

419 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "X-Hook", 
hook_ty≥
);

421 
	}
}

424 
	$Ωc_hook_ªmove_hódî
(
evhâp_ªque°
 *
ªq
,

425 
evbuf„r
 *
evbuf
, *
¨g
)

427 c⁄° *
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Hook");

428 
	`as£π
(
hódî
 !
NULL
);

429 
	`as£π
(
	`°rcmp
(
hódî
, 
¨g
) == 0);

430 
	`evhâp_ªmove_hódî
(
ªq
->
öput_hódîs
, "X-Hook");

431 
	`evhâp_add_hódî
(
ªq
->
öput_hódîs
, "X-Pool-Hook", "ran");

434 
	}
}

437 
	$Ωc_basic_˛õ¡
()

439 
p‹t
;

440 
evhâp
 *
hâp
 = 
NULL
;

441 
evΩc_ba£
 *
ba£
 = 
NULL
;

442 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

443 
msg
 *msg;

444 
kûl
 *kill;

446 
	`Ârötf
(
°dout
, "Testing RPC Client: ");

448 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

450 
√ed_öput_hook
 = 1;

451 
√ed_ouçut_hook
 = 1;

453 
	`as£π
(
	`evΩc_add_hook
(
ba£
, 
EVRPC_INPUT
, 
Ωc_hook_add_hódî
, (*)"input")

454 !
NULL
);

455 
	`as£π
(
	`evΩc_add_hook
(
ba£
, 
EVRPC_OUTPUT
, 
Ωc_hook_add_hódî
, (*)"output")

456 !
NULL
);

458 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

460 
	`as£π
(
	`evΩc_add_hook
(
poﬁ
, 
EVRPC_INPUT
, 
Ωc_hook_ªmove_hódî
, (*)"output"));

463 
msg
 = 
	`msg_√w
();

464 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

465 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

467 
kûl
 = 
	`kûl_√w
();

469 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl
, 
GŸKûlCb
, 
NULL
);

471 
ã°_ok
 = 0;

473 
	`evít_di•©ch
();

475 i‡(
ã°_ok
 != 1) {

476 
	`Ârötf
(
°dout
, "FAILED (1)\n");

477 
	`exô
(1);

481 
	`kûl_˛ór
(
kûl
);

483 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl
, 
GŸKûlCb
, 
NULL
);

485 
	`evít_di•©ch
();

487 
	`Ωc_ã¨down
(
ba£
);

489 i‡(
ã°_ok
 != 2) {

490 
	`Ârötf
(
°dout
, "FAILED (2)\n");

491 
	`exô
(1);

494 
	`Ârötf
(
°dout
, "OK\n");

496 
	`msg_‰ì
(
msg
);

497 
	`kûl_‰ì
(
kûl
);

499 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

500 
	`evhâp_‰ì
(
hâp
);

501 
	}
}

508 
	$Ωc_basic_queued_˛õ¡
()

510 
p‹t
;

511 
evhâp
 *
hâp
 = 
NULL
;

512 
evΩc_ba£
 *
ba£
 = 
NULL
;

513 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

514 
msg
 *msg;

515 
kûl
 *
kûl_⁄e
, *
kûl_two
;

517 
	`Ârötf
(
°dout
, "Testing RPC (Queued) Client: ");

519 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

521 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

524 
msg
 = 
	`msg_√w
();

525 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

526 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

528 
kûl_⁄e
 = 
	`kûl_√w
();

529 
kûl_two
 = 
	`kûl_√w
();

531 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl_⁄e
, 
GŸKûlCbTwo
, 
NULL
);

532 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl_two
, 
GŸKûlCb
, 
NULL
);

534 
ã°_ok
 = 0;

536 
	`evít_di•©ch
();

538 
	`Ωc_ã¨down
(
ba£
);

540 i‡(
ã°_ok
 != 2) {

541 
	`Ârötf
(
°dout
, "FAILED (1)\n");

542 
	`exô
(1);

545 
	`Ârötf
(
°dout
, "OK\n");

547 
	`msg_‰ì
(
msg
);

548 
	`kûl_‰ì
(
kûl_⁄e
);

549 
	`kûl_‰ì
(
kûl_two
);

551 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

552 
	`evhâp_‰ì
(
hâp
);

553 
	}
}

556 
	$GŸEº‹Cb
(
evΩc_°©us
 *
°©us
,

557 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

559 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_TIMEOUT
)

560 
d⁄e
;

563 i‡(
	`kûl_com∂ëe
(
kûl
) == 0)

564 
d⁄e
;

566 
ã°_ok
 += 1;

568 
d⁄e
:

569 
	`evít_lo›exô
(
NULL
);

570 
	}
}

573 
	$Ωc_˛õ¡_timeout
()

575 
p‹t
;

576 
evhâp
 *
hâp
 = 
NULL
;

577 
evΩc_ba£
 *
ba£
 = 
NULL
;

578 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

579 
msg
 *msg;

580 
kûl
 *kill;

582 
	`Ârötf
(
°dout
, "Testing RPC Client Timeout: ");

584 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

586 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

589 
	`evΩc_poﬁ_£t_timeout
(
poﬁ
, 5);

592 
msg
 = 
	`msg_√w
();

593 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

594 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

596 
kûl
 = 
	`kûl_√w
();

598 
	`EVRPC_MAKE_REQUEST
(
NevîRïly
, 
poﬁ
, 
msg
, 
kûl
, 
GŸEº‹Cb
, 
NULL
);

600 
ã°_ok
 = 0;

602 
	`evít_di•©ch
();

605 
	`EVRPC_REQUEST_DONE
(
ßved_Ωc
);

607 
	`Ωc_ã¨down
(
ba£
);

609 i‡(
ã°_ok
 != 2) {

610 
	`Ârötf
(
°dout
, "FAILED (1)\n");

611 
	`exô
(1);

614 
	`Ârötf
(
°dout
, "OK\n");

616 
	`msg_‰ì
(
msg
);

617 
	`kûl_‰ì
(
kûl
);

619 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

620 
	`evhâp_‰ì
(
hâp
);

621 
	}
}

624 
	$Ωc_suôe
()

626 
	`Ωc_basic_ã°
();

627 
	`Ωc_basic_mesßge
();

628 
	`Ωc_basic_˛õ¡
();

629 
	`Ωc_basic_queued_˛õ¡
();

630 
	`Ωc_˛õ¡_timeout
();

631 
	}
}

	@test/test-eof.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

10 #ifde‡
WIN32


11 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 
	~<sys/time.h
>

16 #ifde‡
HAVE_SYS_SOCKET_H


17 
	~<sys/sockë.h
>

19 
	~<f˙é.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<î∫o.h
>

26 
	~<evít.h
>

27 
	~<evutû.h
>

29 
	gã°_okay
 = 1;

30 
	gˇŒed
 = 0;

33 
	$ªad_cb
(
fd
, 
evít
, *
¨g
)

35 
buf
[256];

36 
Àn
;

38 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

40 
	`¥ötf
("%s:Ñód %d%s\n", 
__func__
,

41 
Àn
,Üen ? "" : " - means EOF");

43 i‡(
Àn
) {

44 i‡(!
ˇŒed
)

45 
	`evít_add
(
¨g
, 
NULL
);

46 } i‡(
ˇŒed
 == 1)

47 
ã°_okay
 = 0;

49 
ˇŒed
++;

50 
	}
}

52 #i‚de‡
SHUT_WR


53 
	#SHUT_WR
 1

	)

57 
	$maö
 (
¨gc
, **
¨gv
)

59 
evít
 
ev
;

60 c⁄° *
ã°
 = "test string";

61 
∑ú
[2];

63 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1)

67 
	`wrôe
(
∑ú
[0], 
ã°
, 
	`°æí
(test)+1);

68 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

71 
	`evít_öô
();

74 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
ªad_cb
, &ev);

76 
	`evít_add
(&
ev
, 
NULL
);

78 
	`evít_di•©ch
();

80  (
ã°_okay
);

81 
	}
}

	@test/test-init.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/°©.h
>

12 
	~<sys/time.h
>

13 #ifde‡
HAVE_SYS_SOCKET_H


14 
	~<sys/sockë.h
>

16 
	~<f˙é.h
>

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<uni°d.h
>

21 
	~<î∫o.h
>

23 
	~<evít.h
>

26 
	$maö
(
¨gc
, **
¨gv
)

29 
	`evít_öô
();

32 
	}
}

	@test/test-time.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/°©.h
>

12 
	~<sys/time.h
>

13 
	~<f˙é.h
>

14 
	~<°dlib.h
>

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~<uni°d.h
>

18 
	~<î∫o.h
>

20 
	~<evít.h
>

22 
	gˇŒed
 = 0;

24 
	#NEVENT
 20000

	)

26 
evít
 *
	gev
[
NEVENT
];

29 
	$ønd_öt
(
n
)

31 #ifde‡
WIN32


32  ()(
	`ønd
(Ë* 
n
);

34  ()(
	`øndom
(Ë% 
n
);

36 
	}
}

39 
	$time_cb
(
fd
, 
evít
, *
¨g
)

41 
timevÆ
 
tv
;

42 
i
, 
j
;

44 
ˇŒed
++;

46 i‡(
ˇŒed
 < 10*
NEVENT
) {

47 
i
 = 0; i < 10; i++) {

48 
j
 = 
	`ønd_öt
(
NEVENT
);

49 
tv
.
tv_£c
 = 0;

50 
tv
.
tv_u£c
 = 
	`ønd_öt
(50000);

51 i‡(
tv
.
tv_u£c
 % 2)

52 
	`evtimî_add
(
ev
[
j
], &
tv
);

54 
	`evtimî_dñ
(
ev
[
j
]);

57 
	}
}

60 
	$maö
 (
¨gc
, **
¨gv
)

62 
timevÆ
 
tv
;

63 
i
;

66 
	`evít_öô
();

68 
i
 = 0; i < 
NEVENT
; i++) {

69 
ev
[
i
] = 
	`mÆloc
((
evít
));

72 
	`evtimî_£t
(
ev
[
i
], 
time_cb
,Év[i]);

73 
tv
.
tv_£c
 = 0;

74 
tv
.
tv_u£c
 = 
	`ønd_öt
(50000);

75 
	`evtimî_add
(
ev
[
i
], &
tv
);

78 
	`evít_di•©ch
();

80  (
ˇŒed
 < 
NEVENT
);

81 
	}
}

	@test/test-weof.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

10 #ifde‡
WIN32


11 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 
	~<sys/time.h
>

16 #ifde‡
HAVE_SYS_SOCKET_H


17 
	~<sys/sockë.h
>

19 
	~<f˙é.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<sig«l.h
>

24 
	~<uni°d.h
>

25 
	~<î∫o.h
>

27 
	~<evít.h
>

28 
	~<evutû.h
>

30 
	g∑ú
[2];

31 
	gã°_okay
 = 1;

32 
	gˇŒed
 = 0;

35 
	$wrôe_cb
(
fd
, 
evít
, *
¨g
)

37 c⁄° *
ã°
 = "test string";

38 
Àn
;

40 
Àn
 = 
	`wrôe
(
fd
, 
ã°
, 
	`°æí
(test) + 1);

42 
	`¥ötf
("%s: wrôê%d%s\n", 
__func__
,

43 
Àn
,Üen ? "" : " - means EOF");

45 i‡(
Àn
 > 0) {

46 i‡(!
ˇŒed
)

47 
	`evít_add
(
¨g
, 
NULL
);

48 
	`˛o£
(
∑ú
[0]);

49 } i‡(
ˇŒed
 == 1)

50 
ã°_okay
 = 0;

52 
ˇŒed
++;

53 
	}
}

56 
	$maö
 (
¨gc
, **
¨gv
)

58 
evít
 
ev
;

60 #i‚de‡
WIN32


61 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
)

65 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1)

69 
	`evít_öô
();

72 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_WRITE
, 
wrôe_cb
, &ev);

74 
	`evít_add
(&
ev
, 
NULL
);

76 
	`evít_di•©ch
();

78  (
ã°_okay
);

79 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
81
1333
WIN32-Code/config.h
WIN32-Code/tree.h
WIN32-Code/win32.c
buffer.c
compat/sys/_time.h
compat/sys/queue.h
config.h
devpoll.c
epoll.c
epoll_sub.c
evbuffer.c
evdns.c
evdns.h
event-config.h
event-internal.h
event.c
event.h
event_tagging.c
evhttp.h
evport.c
evrpc-internal.h
evrpc.c
evrpc.h
evsignal.h
evutil.c
evutil.h
http-internal.h
http.c
kqueue.c
log.c
log.h
min_heap.h
poll.c
sample/event-test.c
sample/signal-test.c
sample/time-test.c
select.c
signal.c
strlcpy-internal.h
strlcpy.c
test/bench.c
test/regress.c
test/regress.gen.c
test/regress.gen.h
test/regress.h
test/regress_dns.c
test/regress_http.c
test/regress_rpc.c
test/test-eof.c
test/test-init.c
test/test-time.c
test/test-weof.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/poll.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
